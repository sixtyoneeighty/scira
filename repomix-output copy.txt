This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-05T21:14:23.904Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
.github/
  ISSUE_TEMPLATE/
    bug_report.yml
    feature_request.yml
app/
  api/
    advanced-search/
      route.ts
    chat/
      route.ts
    image/
      route.ts
    trending/
      route.ts
  search/
    [id]/
      page.tsx
    page.tsx
  share/
    [id]/
      page.tsx
  globals.css
  layout.tsx
  page.tsx
components/
  ui/
    alert-dialog.tsx
    avatar.tsx
    badge.tsx
    button.tsx
    card.tsx
    carousel.tsx
    checkbox.tsx
    codeblock.tsx
    collapsible.tsx
    command.tsx
    dialog.tsx
    dropdown-menu.tsx
    icons.tsx
    input.tsx
    label.tsx
    markdown.tsx
    popover.tsx
    select.tsx
    separator.tsx
    sheet.tsx
    skeleton.tsx
    slider.tsx
    sonner.tsx
    spinner.tsx
    status-indicator.tsx
    switch.tsx
    textarea.tsx
    toggle.tsx
    tooltip.tsx
  answer-section.tsx
  brand-info.tsx
  chat-messages.tsx
  chat-panel.tsx
  chat-share.tsx
  chat.tsx
  clear-history.tsx
  collapsible-message.tsx
  custom-link.tsx
  default-skeleton.tsx
  empty-screen.tsx
  footer.tsx
  header.tsx
  history-container.tsx
  history-item.tsx
  history-list.tsx
  history-skeleton.tsx
  history.tsx
  logo.tsx
  message-actions.tsx
  message.tsx
  mode-toggle.tsx
  model-selector.tsx
  news-ticker.tsx
  reasoning-answer-section.tsx
  related-questions.tsx
  render-message.tsx
  retrieve-section.tsx
  search-mode-toggle.tsx
  search-results-image.tsx
  search-results.tsx
  search-section.tsx
  section.tsx
  sidebar.tsx
  theme-provider.tsx
  tool-badge.tsx
  tool-section.tsx
  trending-queries.tsx
  user-message.tsx
  video-search-results.tsx
  video-search-section.tsx
docs/
  CONFIGURATION.md
lib/
  actions/
    chat.ts
  agents/
    generate-related-questions.ts
    manual-researcher.ts
    researcher.ts
  constants/
    index.ts
  hooks/
    use-copy-to-clipboard.ts
  redis/
    config.ts
  schema/
    related.tsx
    retrieve.tsx
    search.tsx
  streaming/
    create-manual-tool-stream.ts
    create-tool-calling-stream.ts
    handle-stream-finish.ts
    parse-tool-call.ts
    tool-execution.ts
    types.ts
  tools/
    retrieve.ts
    search.ts
    video-search.ts
  types/
    index.ts
    models.ts
  utils/
    context-window.ts
    cookies.ts
    index.ts
    registry.ts
  image-generation.ts
old codebase/
  oldcodebase.txt
public/
  providers/
    logos/
      anthropic.svg
      azure.svg
      deepseek.svg
      fireworks.svg
      google.svg
      groq.svg
      ollama.svg
      openai-compatible.svg
      openai.svg
.env.example
.env.local.example
.eslintrc.json
.gitignore
CODE_OF_CONDUCT.md
components.json
CONTRIBUTING.md
docker-compose.yaml
Dockerfile
LICENSE
next.config.mjs
package.json
postcss.config.mjs
prettier.config.js
README.md
searxng-limiter.toml
searxng-settings.yml
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .github/ISSUE_TEMPLATE/bug_report.yml
================
name: üêû Bug
description: File a bug/issue
title: '[BUG] <title>'
labels: ['Bug', 'Needs Triage']
body:
  - type: checkboxes
    attributes:
      label: Is there an existing issue for this?
      description: Please search to see if an issue already exists for the bug you encountered.
      options:
        - label: I have searched the existing issues
          required: true
  - type: checkboxes
    attributes:
      label: Vercel Runtime Logs
      description: If this is a Vercel environment issue, have you checked the Vercel Runtime Logs? (https://vercel.com/docs/observability/runtime-logs)
      options:
        - label: I have checked the Vercel Runtime Logs for errors (if applicable)
          required: false
  - type: textarea
    attributes:
      label: Current Behavior
      description: A concise description of what you're experiencing.
    validations:
      required: true
  - type: textarea
    attributes:
      label: Expected Behavior
      description: A concise description of what you expected to happen.
    validations:
      required: true
  - type: textarea
    attributes:
      label: Steps To Reproduce
      description: Steps to reproduce the behavior.
      placeholder: |
        1. In this environment...
        2. With this config...
        3. Run '...'
        4. See error...
    validations:
      required: true
  - type: textarea
    attributes:
      label: Environment
      description: |
        examples:
          - Browser: Chrome 52.0.2743.116
      value: |
        - OS:
        - Browser:
      render: markdown
    validations:
      required: true
  - type: textarea
    attributes:
      label: Anything else?
      description: |
        Links? References? Anything that will give us more context about the issue you are encountering!

        Tip: You can attach images or log files by clicking this area to highlight it and then dragging files in.
    validations:
      required: false

================
File: .github/ISSUE_TEMPLATE/feature_request.yml
================
name: ‚ú® Feature Request
description: Propose a new feature for Mojo.
labels: []
body:
  - type: markdown
    attributes:
      value: |
        This template is to propose new features for Mojo. Please fill out the following information to help us understand your feature request.
  - type: textarea
    attributes:
      label: Feature Description
      description: A detailed description of the feature you are proposing for Mojo. Include any relevant technical details.
      placeholder: |
        Feature description...
    validations:
      required: true
  - type: textarea
    attributes:
      label: Use Case
      description: Provide a use case where this feature would be beneficial
      placeholder: |
        Use case...
    validations:
      required: true
  - type: textarea
    attributes:
      label: Additional context
      description: |
        Any extra information that might help us understand your feature request.
      placeholder: |
        Additional context...

================
File: app/api/advanced-search/route.ts
================
import { NextResponse } from 'next/server'
import http from 'http'
import https from 'https'
import { JSDOM, VirtualConsole } from 'jsdom'
import {
  SearXNGSearchResults,
  SearXNGResponse,
  SearXNGResult,
  SearchResultItem
} from '@/lib/types'
import { Agent } from 'http'
import { Redis } from '@upstash/redis'
import { createClient } from 'redis'

/**
 * Maximum number of results to fetch from SearXNG.
 * Increasing this value can improve result quality but may impact performance.
 * In advanced search mode, this is multiplied by SEARXNG_CRAWL_MULTIPLIER for initial fetching.
 */
const SEARXNG_MAX_RESULTS = Math.max(
  10,
  Math.min(100, parseInt(process.env.SEARXNG_MAX_RESULTS || '50', 10))
)

const CACHE_TTL = 3600 // Cache time-to-live in seconds (1 hour)
const CACHE_EXPIRATION_CHECK_INTERVAL = 3600000 // 1 hour in milliseconds

let redisClient: Redis | ReturnType<typeof createClient> | null = null

// Initialize Redis client based on environment variables
async function initializeRedisClient() {
  if (redisClient) return redisClient

  const useLocalRedis = process.env.USE_LOCAL_REDIS === 'true'

  if (useLocalRedis) {
    const localRedisUrl =
      process.env.LOCAL_REDIS_URL || 'redis://localhost:6379'
    redisClient = createClient({ url: localRedisUrl })
    await redisClient.connect()
  } else {
    const upstashRedisRestUrl = process.env.UPSTASH_REDIS_REST_URL
    const upstashRedisRestToken = process.env.UPSTASH_REDIS_REST_TOKEN

    if (upstashRedisRestUrl && upstashRedisRestToken) {
      redisClient = new Redis({
        url: upstashRedisRestUrl,
        token: upstashRedisRestToken
      })
    }
  }

  return redisClient
}

// Function to get cached results
async function getCachedResults(
  cacheKey: string
): Promise<SearXNGSearchResults | null> {
  try {
    const client = await initializeRedisClient()
    if (!client) return null

    let cachedData: string | null
    if (client instanceof Redis) {
      cachedData = await client.get(cacheKey)
    } else {
      cachedData = await client.get(cacheKey)
    }

    if (cachedData) {
      console.log(`Cache hit for key: ${cacheKey}`)
      return JSON.parse(cachedData)
    } else {
      console.log(`Cache miss for key: ${cacheKey}`)
      return null
    }
  } catch (error) {
    console.error('Redis cache error:', error)
    return null
  }
}

// Function to set cached results with error handling and logging
async function setCachedResults(
  cacheKey: string,
  results: SearXNGSearchResults
): Promise<void> {
  try {
    const client = await initializeRedisClient()
    if (!client) return

    const serializedResults = JSON.stringify(results)
    if (client instanceof Redis) {
      await client.set(cacheKey, serializedResults, { ex: CACHE_TTL })
    } else {
      await client.set(cacheKey, serializedResults, { EX: CACHE_TTL })
    }
    console.log(`Cached results for key: ${cacheKey}`)
  } catch (error) {
    console.error('Redis cache error:', error)
  }
}

// Function to periodically clean up expired cache entries
async function cleanupExpiredCache() {
  try {
    const client = await initializeRedisClient()
    if (!client) return

    const keys = await client.keys('search:*')
    for (const key of keys) {
      const ttl = await client.ttl(key)
      if (ttl <= 0) {
        await client.del(key)
        console.log(`Removed expired cache entry: ${key}`)
      }
    }
  } catch (error) {
    console.error('Cache cleanup error:', error)
  }
}

// Set up periodic cache cleanup
setInterval(cleanupExpiredCache, CACHE_EXPIRATION_CHECK_INTERVAL)

export async function POST(request: Request) {
  const { query, maxResults, searchDepth, includeDomains, excludeDomains } =
    await request.json()

  const SEARXNG_DEFAULT_DEPTH = process.env.SEARXNG_DEFAULT_DEPTH || 'basic'

  try {
    const cacheKey = `search:${query}:${maxResults}:${searchDepth}:${
      Array.isArray(includeDomains) ? includeDomains.join(',') : ''
    }:${Array.isArray(excludeDomains) ? excludeDomains.join(',') : ''}`

    // Try to get cached results
    const cachedResults = await getCachedResults(cacheKey)
    if (cachedResults) {
      return NextResponse.json(cachedResults)
    }

    // If not cached, perform the search
    const results = await advancedSearchXNGSearch(
      query,
      Math.min(maxResults, SEARXNG_MAX_RESULTS),
      searchDepth || SEARXNG_DEFAULT_DEPTH,
      Array.isArray(includeDomains) ? includeDomains : [],
      Array.isArray(excludeDomains) ? excludeDomains : []
    )

    // Cache the results
    await setCachedResults(cacheKey, results)

    return NextResponse.json(results)
  } catch (error) {
    console.error('Advanced search error:', error)
    return NextResponse.json(
      {
        message: 'Internal Server Error',
        error: error instanceof Error ? error.message : String(error),
        query: query,
        results: [],
        images: [],
        number_of_results: 0
      },
      { status: 500 }
    )
  }
}

async function advancedSearchXNGSearch(
  query: string,
  maxResults: number = 10,
  searchDepth: 'basic' | 'advanced' = 'advanced',
  includeDomains: string[] = [],
  excludeDomains: string[] = []
): Promise<SearXNGSearchResults> {
  const apiUrl = process.env.SEARXNG_API_URL
  if (!apiUrl) {
    throw new Error('SEARXNG_API_URL is not set in the environment variables')
  }

  const SEARXNG_ENGINES =
    process.env.SEARXNG_ENGINES || 'google,bing,duckduckgo,wikipedia'
  const SEARXNG_TIME_RANGE = process.env.SEARXNG_TIME_RANGE || 'None'
  const SEARXNG_SAFESEARCH = process.env.SEARXNG_SAFESEARCH || '0'
  const SEARXNG_CRAWL_MULTIPLIER = parseInt(
    process.env.SEARXNG_CRAWL_MULTIPLIER || '4',
    10
  )

  try {
    const url = new URL(`${apiUrl}/search`)
    url.searchParams.append('q', query)
    url.searchParams.append('format', 'json')
    url.searchParams.append('categories', 'general,images')

    // Add time_range if it's not 'None'
    if (SEARXNG_TIME_RANGE !== 'None') {
      url.searchParams.append('time_range', SEARXNG_TIME_RANGE)
    }

    url.searchParams.append('safesearch', SEARXNG_SAFESEARCH)
    url.searchParams.append('engines', SEARXNG_ENGINES)

    const resultsPerPage = 10
    const pageno = Math.ceil(maxResults / resultsPerPage)
    url.searchParams.append('pageno', String(pageno))

    //console.log('SearXNG API URL:', url.toString()) // Log the full URL for debugging

    const data:
      | SearXNGResponse
      | { error: string; status: number; data: string } =
      await fetchJsonWithRetry(url.toString(), 3)

    if ('error' in data) {
      console.error('Invalid response from SearXNG:', data)
      throw new Error(
        `Invalid response from SearXNG: ${data.error}. Status: ${data.status}. Data: ${data.data}`
      )
    }

    if (!data || !Array.isArray(data.results)) {
      console.error('Invalid response structure from SearXNG:', data)
      throw new Error('Invalid response structure from SearXNG')
    }

    let generalResults = data.results.filter(
      (result: SearXNGResult) => result && !result.img_src
    )

    // Apply domain filtering manually
    if (includeDomains.length > 0 || excludeDomains.length > 0) {
      generalResults = generalResults.filter(result => {
        const domain = new URL(result.url).hostname
        return (
          (includeDomains.length === 0 ||
            includeDomains.some(d => domain.includes(d))) &&
          (excludeDomains.length === 0 ||
            !excludeDomains.some(d => domain.includes(d)))
        )
      })
    }

    if (searchDepth === 'advanced') {
      const crawledResults = await Promise.all(
        generalResults
          .slice(0, maxResults * SEARXNG_CRAWL_MULTIPLIER)
          .map(result => crawlPage(result, query))
      )
      generalResults = crawledResults
        .filter(result => result !== null && isQualityContent(result.content))
        .map(result => result as SearXNGResult)

      const MIN_RELEVANCE_SCORE = 10
      generalResults = generalResults
        .map(result => ({
          ...result,
          score: calculateRelevanceScore(result, query)
        }))
        .filter(result => result.score >= MIN_RELEVANCE_SCORE)
        .sort((a, b) => b.score - a.score)
        .slice(0, maxResults)
    }

    generalResults = generalResults.slice(0, maxResults)

    const imageResults = (data.results || [])
      .filter((result: SearXNGResult) => result && result.img_src)
      .slice(0, maxResults)

    return {
      results: generalResults.map(
        (result: SearXNGResult): SearchResultItem => ({
          title: result.title || '',
          url: result.url || '',
          content: result.content || ''
        })
      ),
      query: data.query || query,
      images: imageResults
        .map((result: SearXNGResult) => {
          const imgSrc = result.img_src || ''
          return imgSrc.startsWith('http') ? imgSrc : `${apiUrl}${imgSrc}`
        })
        .filter(Boolean),
      number_of_results: data.number_of_results || generalResults.length
    }
  } catch (error) {
    console.error('SearchXNG API error:', error)
    return {
      results: [],
      query: query,
      images: [],
      number_of_results: 0
    }
  }
}

async function crawlPage(
  result: SearXNGResult,
  query: string
): Promise<SearXNGResult> {
  try {
    const html = await fetchHtmlWithTimeout(result.url, 20000)

    // virtual console to suppress JSDOM warnings
    const virtualConsole = new VirtualConsole()
    virtualConsole.on('error', () => {})
    virtualConsole.on('warn', () => {})

    const dom = new JSDOM(html, {
      runScripts: 'outside-only',
      resources: 'usable',
      virtualConsole
    })
    const document = dom.window.document

    // Remove script, style, nav, header, and footer elements
    document
      .querySelectorAll('script, style, nav, header, footer')
      .forEach((el: Element) => el.remove())

    const mainContent =
      document.querySelector('main') ||
      document.querySelector('article') ||
      document.querySelector('.content') ||
      document.querySelector('#content') ||
      document.body

    if (mainContent) {
      // Prioritize specific content elements
      const priorityElements = mainContent.querySelectorAll('h1, h2, h3, p')
      let extractedText = Array.from(priorityElements)
        .map(el => el.textContent?.trim())
        .filter(Boolean)
        .join('\n\n')

      // If not enough content, fall back to other elements
      if (extractedText.length < 500) {
        const contentElements = mainContent.querySelectorAll(
          'h4, h5, h6, li, td, th, blockquote, pre, code'
        )
        extractedText +=
          '\n\n' +
          Array.from(contentElements)
            .map(el => el.textContent?.trim())
            .filter(Boolean)
            .join('\n\n')
      }

      // Extract metadata
      const metaDescription =
        document
          .querySelector('meta[name="description"]')
          ?.getAttribute('content') || ''
      const metaKeywords =
        document
          .querySelector('meta[name="keywords"]')
          ?.getAttribute('content') || ''
      const ogTitle =
        document
          .querySelector('meta[property="og:title"]')
          ?.getAttribute('content') || ''
      const ogDescription =
        document
          .querySelector('meta[property="og:description"]')
          ?.getAttribute('content') || ''

      // Combine metadata with extracted text
      extractedText = `${result.title}\n\n${ogTitle}\n\n${metaDescription}\n\n${ogDescription}\n\n${metaKeywords}\n\n${extractedText}`

      // Limit the extracted text to 10000 characters
      extractedText = extractedText.substring(0, 10000)

      // Highlight query terms in the content
      result.content = highlightQueryTerms(extractedText, query)

      // Extract publication date
      const publishedDate = extractPublicationDate(document)
      if (publishedDate) {
        result.publishedDate = publishedDate.toISOString()
      }
    }

    return result
  } catch (error) {
    console.error(`Error crawling ${result.url}:`, error)
    return {
      ...result,
      content: result.content || 'Content unavailable due to crawling error.'
    }
  }
}

function highlightQueryTerms(content: string, query: string): string {
  try {
    const terms = query
      .toLowerCase()
      .split(/\s+/)
      .filter(term => term.length > 2)
      .map(term => term.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')) // Escape special characters

    let highlightedContent = content

    terms.forEach(term => {
      const regex = new RegExp(`\\b${term}\\b`, 'gi')
      highlightedContent = highlightedContent.replace(
        regex,
        match => `<mark>${match}</mark>`
      )
    })

    return highlightedContent
  } catch (error) {
    //console.error('Error in highlightQueryTerms:', error)
    return content // Return original content if highlighting fails
  }
}

function calculateRelevanceScore(result: SearXNGResult, query: string): number {
  try {
    const lowercaseContent = result.content.toLowerCase()
    const lowercaseQuery = query.toLowerCase()
    const queryWords = lowercaseQuery
      .split(/\s+/)
      .filter(word => word.length > 2)
      .map(word => word.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')) // Escape special characters

    let score = 0

    // Check for exact phrase match
    if (lowercaseContent.includes(lowercaseQuery)) {
      score += 30
    }

    // Check for individual word matches
    queryWords.forEach(word => {
      const regex = new RegExp(`\\b${word}\\b`, 'g')
      const wordCount = (lowercaseContent.match(regex) || []).length
      score += wordCount * 3
    })

    // Boost score for matches in the title
    const lowercaseTitle = result.title.toLowerCase()
    if (lowercaseTitle.includes(lowercaseQuery)) {
      score += 20
    }

    queryWords.forEach(word => {
      const regex = new RegExp(`\\b${word}\\b`, 'g')
      if (lowercaseTitle.match(regex)) {
        score += 10
      }
    })

    // Boost score for recent content (if available)
    if (result.publishedDate) {
      const publishDate = new Date(result.publishedDate)
      const now = new Date()
      const daysSincePublished =
        (now.getTime() - publishDate.getTime()) / (1000 * 3600 * 24)
      if (daysSincePublished < 30) {
        score += 15
      } else if (daysSincePublished < 90) {
        score += 10
      } else if (daysSincePublished < 365) {
        score += 5
      }
    }

    // Penalize very short content
    if (result.content.length < 200) {
      score -= 10
    } else if (result.content.length > 1000) {
      score += 5
    }

    // Boost score for content with more highlighted terms
    const highlightCount = (result.content.match(/<mark>/g) || []).length
    score += highlightCount * 2

    return score
  } catch (error) {
    //console.error('Error in calculateRelevanceScore:', error)
    return 0 // Return 0 if scoring fails
  }
}

function extractPublicationDate(document: Document): Date | null {
  const dateSelectors = [
    'meta[name="article:published_time"]',
    'meta[property="article:published_time"]',
    'meta[name="publication-date"]',
    'meta[name="date"]',
    'time[datetime]',
    'time[pubdate]'
  ]

  for (const selector of dateSelectors) {
    const element = document.querySelector(selector)
    if (element) {
      const dateStr =
        element.getAttribute('content') ||
        element.getAttribute('datetime') ||
        element.getAttribute('pubdate')
      if (dateStr) {
        const date = new Date(dateStr)
        if (!isNaN(date.getTime())) {
          return date
        }
      }
    }
  }

  return null
}

const httpAgent = new http.Agent({ keepAlive: true })
const httpsAgent = new https.Agent({
  keepAlive: true,
  rejectUnauthorized: true // change to false if you want to ignore SSL certificate errors
  //but use this with caution.
})

async function fetchJsonWithRetry(url: string, retries: number): Promise<any> {
  for (let i = 0; i < retries; i++) {
    try {
      return await fetchJson(url)
    } catch (error) {
      if (i === retries - 1) throw error
      await new Promise(resolve => setTimeout(resolve, 1000 * (i + 1)))
    }
  }
}

function fetchJson(url: string): Promise<any> {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https:') ? https : http
    const agent = url.startsWith('https:') ? httpsAgent : httpAgent
    const request = protocol.get(url, { agent }, res => {
      let data = ''
      res.on('data', chunk => {
        data += chunk
      })
      res.on('end', () => {
        try {
          // Check if the response is JSON
          if (res.headers['content-type']?.includes('application/json')) {
            resolve(JSON.parse(data))
          } else {
            // If not JSON, return an object with the raw data and status
            resolve({
              error: 'Invalid JSON response',
              status: res.statusCode,
              data: data.substring(0, 200) // Include first 200 characters of the response
            })
          }
        } catch (e) {
          reject(e)
        }
      })
    })
    request.on('error', reject)
    request.on('timeout', () => {
      request.destroy()
      reject(new Error('Request timed out'))
    })
    request.setTimeout(15000) // 15 second timeout
  })
}

async function fetchHtmlWithTimeout(
  url: string,
  timeoutMs: number
): Promise<string> {
  try {
    return await Promise.race([
      fetchHtml(url),
      timeout(timeoutMs, `Fetching ${url} timed out after ${timeoutMs}ms`)
    ])
  } catch (error) {
    console.error(`Error fetching ${url}:`, error)
    const errorMessage = error instanceof Error ? error.message : String(error)
    return `<html><body>Error fetching content: ${errorMessage}</body></html>`
  }
}

function fetchHtml(url: string): Promise<string> {
  return new Promise((resolve, reject) => {
    const protocol = url.startsWith('https:') ? https : http
    const agent = url.startsWith('https:') ? httpsAgent : httpAgent
    const request = protocol.get(url, { agent }, res => {
      if (
        res.statusCode &&
        res.statusCode >= 300 &&
        res.statusCode < 400 &&
        res.headers.location
      ) {
        // Handle redirects
        fetchHtml(new URL(res.headers.location, url).toString())
          .then(resolve)
          .catch(reject)
        return
      }
      let data = ''
      res.on('data', chunk => {
        data += chunk
      })
      res.on('end', () => resolve(data))
    })
    request.on('error', error => {
      //console.error(`Error fetching ${url}:`, error)
      reject(error)
    })
    request.on('timeout', () => {
      request.destroy()
      //reject(new Error(`Request timed out for ${url}`))
      resolve('')
    })
    request.setTimeout(10000) // 10 second timeout
  })
}

function timeout(ms: number, message: string): Promise<never> {
  return new Promise((_, reject) => {
    setTimeout(() => {
      reject(new Error(message))
    }, ms)
  })
}

function isQualityContent(text: string): boolean {
  const words = text.split(/\s+/).length
  const sentences = text.split(/[.!?]+/).length
  const avgWordsPerSentence = words / sentences

  return (
    words > 50 &&
    sentences > 3 &&
    avgWordsPerSentence > 5 &&
    avgWordsPerSentence < 30 &&
    !text.includes('Content unavailable due to crawling error') &&
    !text.includes('Error fetching content:')
  )
}

================
File: app/api/chat/route.ts
================
import { createManualToolStreamResponse } from '@/lib/streaming/create-manual-tool-stream'
import { createToolCallingStreamResponse } from '@/lib/streaming/create-tool-calling-stream'
import { isProviderEnabled, isToolCallSupported } from '@/lib/utils/registry'
import { cookies } from 'next/headers'

export const maxDuration = 30

const DEFAULT_MODEL = 'openai:gpt-4o-mini'

export async function POST(req: Request) {
  try {
    const { messages, id: chatId } = await req.json()
    const referer = req.headers.get('referer')
    const isSharePage = referer?.includes('/share/')

    if (isSharePage) {
      return new Response('Chat API is not available on share pages', {
        status: 403,
        statusText: 'Forbidden'
      })
    }

    const cookieStore = await cookies()
    const modelFromCookie = cookieStore.get('selected-model')?.value
    const searchMode = cookieStore.get('search-mode')?.value === 'true'
    const model = modelFromCookie || DEFAULT_MODEL
    const provider = model.split(':')[0]
    if (!isProviderEnabled(provider)) {
      return new Response(`Selected provider is not enabled ${provider}`, {
        status: 404,
        statusText: 'Not Found'
      })
    }

    const supportsToolCalling = isToolCallSupported(model)

    return supportsToolCalling
      ? createToolCallingStreamResponse({
          messages,
          model,
          chatId,
          searchMode
        })
      : createManualToolStreamResponse({
          messages,
          model,
          chatId,
          searchMode
        })
  } catch (error) {
    console.error('API route error:', error)
    return new Response(
      JSON.stringify({
        error:
          error instanceof Error
            ? error.message
            : 'An unexpected error occurred',
        status: 500
      }),
      {
        status: 500,
        headers: { 'Content-Type': 'application/json' }
      }
    )
  }
}

================
File: app/api/image/route.ts
================
import { generateImage } from '@/lib/image-generation'
import { NextResponse } from 'next/server'

export async function POST(req: Request) {
  try {
    const { prompt } = await req.json()
    const base64Image = await generateImage(prompt)
    return NextResponse.json({ imageUrl: base64Image })
  } catch (error) {
    console.error('Error generating image:', error)
    return NextResponse.json(
      { error: 'Failed to generate image' },
      { status: 500 }
    )
  }
}

================
File: app/api/trending/route.ts
================
import { NextResponse } from 'next/server'

interface TrendingQuery {
  id: string
  text: string
  category: string
}

interface ErrorResponse {
  error: string
  status: number
}

const TRENDING_QUERIES: TrendingQuery[] = [
  { id: '1', text: 'What is quantum computing?', category: 'Tech' },
  { id: '2', text: 'Explain dark matter', category: 'Science' },
  { id: '3', text: 'Most beautiful places in Europe', category: 'Travel' },
  { id: '4', text: 'Future of AI', category: 'Tech' },
  { id: '5', text: 'Best coding practices', category: 'Tech' },
  { id: '6', text: 'How to learn a new language', category: 'Education' },
  { id: '7', text: 'Climate change solutions', category: 'Environment' },
  { id: '8', text: 'Space exploration news', category: 'Science' }
]

function createErrorResponse(message: string, status = 500): ErrorResponse {
  return {
    error: message,
    status
  }
}

async function fetchTrendingQueries(): Promise<TrendingQuery[]> {
  // In a real application, this would fetch from multiple sources
  // For now, we'll return our static data
  return TRENDING_QUERIES
}

export async function GET() {
  try {
    const queries = await fetchTrendingQueries()
    if (!queries.length) {
      return NextResponse.json(
        createErrorResponse('No trending queries available', 404),
        { status: 404 }
      )
    }

    return NextResponse.json(queries)
  } catch (error) {
    console.error('[API] Error fetching trending queries:', error)
    return NextResponse.json(
      createErrorResponse('Failed to fetch trending queries'),
      { status: 500 }
    )
  }
}

================
File: app/search/[id]/page.tsx
================
import { notFound, redirect } from 'next/navigation'
import { Chat } from '@/components/chat'
import { getChat } from '@/lib/actions/chat'
import { convertToUIMessages } from '@/lib/utils'

export const maxDuration = 60

export async function generateMetadata(props: {
  params: Promise<{ id: string }>
}) {
  const { id } = await props.params
  const chat = await getChat(id, 'anonymous')
  return {
    title: chat?.title.toString().slice(0, 50) || 'Search'
  }
}

export default async function SearchPage(props: {
  params: Promise<{ id: string }>
}) {
  const userId = 'anonymous'
  const { id } = await props.params
  const chat = await getChat(id, userId)
  // convertToUIMessages for useChat hook
  const messages = convertToUIMessages(chat?.messages || [])

  if (!chat) {
    redirect('/')
  }

  if (chat?.userId !== userId) {
    notFound()
  }

  return <Chat id={id} savedMessages={messages} />
}

================
File: app/search/page.tsx
================
import { Chat } from '@/components/chat'
import { generateId } from 'ai'
import { redirect } from 'next/navigation'

export const maxDuration = 60

export default async function SearchPage(props: {
  searchParams: Promise<{ q: string }>
}) {
  const { q } = await props.searchParams
  if (!q) {
    redirect('/')
  }

  const id = generateId()
  return <Chat id={id} query={q} />
}

================
File: app/share/[id]/page.tsx
================
import { notFound } from 'next/navigation'
import { Chat } from '@/components/chat'
import { getSharedChat } from '@/lib/actions/chat'
import { convertToUIMessages } from '@/lib/utils'

export async function generateMetadata(props: {
  params: Promise<{ id: string }>
}) {
  const { id } = await props.params
  const chat = await getSharedChat(id)

  if (!chat || !chat.sharePath) {
    return notFound()
  }

  return {
    title: chat?.title.toString().slice(0, 50) || 'Search'
  }
}

export default async function SharePage(props: {
  params: Promise<{ id: string }>
}) {
  const { id } = await props.params
  const chat = await getSharedChat(id)
  // convertToUIMessages for useChat hook
  const messages = convertToUIMessages(chat?.messages || [])

  if (!chat || !chat.sharePath) {
    notFound()
  }

  return <Chat id={id} savedMessages={messages} />
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;

    --card: 0 0% 96.1%;
    --card-foreground: 0 0% 45.1%;

    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;

    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;

    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;

    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;

    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;

    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 89.8%;

    --radius: 0.5rem;

    --chart-1: 12 76% 61%;

    --chart-2: 173 58% 39%;

    --chart-3: 197 37% 24%;

    --chart-4: 43 74% 66%;

    --chart-5: 27 87% 67%;

    --accent-blue: 210 100% 97%;
    --accent-blue-foreground: 210 100% 50%;
    --accent-blue-border: 210 100% 90%;
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;

    --card: 0 0% 14.9%;
    --card-foreground: 0 0% 63.9%;

    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;

    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;

    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;

    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;

    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;

    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 14.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;

    --accent-blue: 210 100% 10%;
    --accent-blue-foreground: 210 100% 80%;
    --accent-blue-border: 210 100% 25%;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

================
File: app/layout.tsx
================
import Footer from '@/components/footer'
import Header from '@/components/header'
import { Sidebar } from '@/components/sidebar'
import { ThemeProvider } from '@/components/theme-provider'
import { Toaster } from '@/components/ui/sonner'
import { cn } from '@/lib/utils'
import type { Metadata, Viewport } from 'next'
import { Inter as FontSans } from 'next/font/google'
import './globals.css'

const fontSans = FontSans({
  subsets: ['latin'],
  variable: '--font-sans'
})

const title = 'Mojoc'
const description =
  'A minimalistic AI-powered search engine that helps you find information on the internet using advanced AI models like GPT-4, Claude, and Grok",.'

export const metadata: Metadata = {
  metadataBase: new URL('https://search.sixtyoneeightyai.com'),
  title,
  description,
  openGraph: {
    title,
    description
  },
  twitter: {
    title,
    description,
    card: 'summary_large_image',
    creator: '@miiura'
  }
}

export const viewport: Viewport = {
  width: 'device-width',
  initialScale: 1,
  minimumScale: 1,
  maximumScale: 1
}

export default function RootLayout({
  children
}: Readonly<{
  children: React.ReactNode
}>) {
  const enableSaveChatHistory =
    process.env.NEXT_PUBLIC_ENABLE_SAVE_CHAT_HISTORY === 'true'
  return (
    <html lang="en" suppressHydrationWarning className="dark">
      <body className={cn('font-sans antialiased', fontSans.variable)}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          <Header />
          {children}
          {enableSaveChatHistory && <Sidebar />}
          <Footer />
          <Toaster />
        </ThemeProvider>
      </body>
    </html>
  )
}

================
File: app/page.tsx
================
'use client'

import { BrandInfo } from '@/components/brand-info'
import { Chat } from '@/components/chat'
import { Logo } from '@/components/logo'
import { generateId } from 'ai'
import { useEffect, useState } from 'react'

export default function Page() {
  const id = generateId()
  const [hasSubmitted, setHasSubmitted] = useState(false)



  // Listen for URL changes to detect when a message is sent
  useEffect(() => {
    const handleUrlChange = () => {
      if (window.location.pathname.includes('/search/')) {
        setHasSubmitted(true)
      }
    }

    // Set up listener
    window.addEventListener('popstate', handleUrlChange)
    // Initial check
    handleUrlChange()

    return () => window.removeEventListener('popstate', handleUrlChange)
  }, [])

  return (
    <div className="flex flex-col min-h-screen relative">
      <BrandInfo />
      <main className="flex-1 flex items-center justify-center w-full -mt-16">
        <div className="flex flex-col items-center px-4 sm:px-8 w-full max-w-4xl">
          <div className="w-full mx-auto space-y-6">
            {!hasSubmitted && (
              <div className="text-center mb-8">
                <Logo className="mb-6 transform scale-125" animate={true} />
                <div className="space-y-4">
                  <h1 className="text-3xl lg:text-5xl font-bold text-center bg-clip-text text-transparent bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-200">
                    What can Mojo help you with?
                  </h1>
                  <p className="text-xl lg:text-2xl font-medium text-center bg-clip-text text-transparent bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-200">
                    Mojo knows all. Mojo is wise.
                  </p>
                </div>
              </div>
            )}
            <Chat id={id} />
          </div>
        </div>
      </main>
    </div>
  )
}

================
File: components/ui/alert-dialog.tsx
================
"use client"

import * as React from "react"
import * as AlertDialogPrimitive from "@radix-ui/react-alert-dialog"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

const AlertDialog = AlertDialogPrimitive.Root

const AlertDialogTrigger = AlertDialogPrimitive.Trigger

const AlertDialogPortal = AlertDialogPrimitive.Portal

const AlertDialogOverlay = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
AlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>
>(({ className, ...props }, ref) => (
  <AlertDialogPortal>
    <AlertDialogOverlay />
    <AlertDialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    />
  </AlertDialogPortal>
))
AlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName

const AlertDialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
AlertDialogHeader.displayName = "AlertDialogHeader"

const AlertDialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
AlertDialogFooter.displayName = "AlertDialogFooter"

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold", className)}
    {...props}
  />
))
AlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
AlertDialogDescription.displayName =
  AlertDialogPrimitive.Description.displayName

const AlertDialogAction = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Action>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Action
    ref={ref}
    className={cn(buttonVariants(), className)}
    {...props}
  />
))
AlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName

const AlertDialogCancel = React.forwardRef<
  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,
  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>
>(({ className, ...props }, ref) => (
  <AlertDialogPrimitive.Cancel
    ref={ref}
    className={cn(
      buttonVariants({ variant: "outline" }),
      "mt-2 sm:mt-0",
      className
    )}
    {...props}
  />
))
AlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogOverlay,
  AlertDialogTrigger,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
  AlertDialogAction,
  AlertDialogCancel,
}

================
File: components/ui/avatar.tsx
================
'use client'

import * as React from 'react'
import * as AvatarPrimitive from '@radix-ui/react-avatar'

import { cn } from '@/lib/utils'

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full',
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn('aspect-square h-full w-full', className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      'flex h-full w-full items-center justify-center rounded-full bg-muted',
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

================
File: components/ui/badge.tsx
================
import * as React from 'react'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const badgeVariants = cva(
  'inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2',
  {
    variants: {
      variant: {
        default:
          'border-transparent bg-primary text-primary-foreground hover:bg-primary/80',
        secondary:
          'border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80',
        destructive:
          'border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80',
        outline: 'text-foreground'
      }
    },
    defaultVariants: {
      variant: 'default'
    }
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/button.tsx
================
import * as React from 'react'
import { Slot } from '@radix-ui/react-slot'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const buttonVariants = cva(
  'inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50',
  {
    variants: {
      variant: {
        default: 'bg-primary text-primary-foreground hover:bg-primary/90',
        destructive:
          'bg-destructive text-destructive-foreground hover:bg-destructive/90',
        outline:
          'border border-input bg-background hover:bg-accent hover:text-accent-foreground',
        secondary:
          'bg-secondary text-secondary-foreground hover:bg-secondary/80',
        ghost: 'hover:bg-accent hover:text-accent-foreground',
        link: 'text-primary underline-offset-4 hover:underline'
      },
      size: {
        default: 'h-10 px-4 py-2',
        sm: 'h-9 rounded-md px-3',
        lg: 'h-11 rounded-md px-8',
        icon: 'h-10 w-10'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default'
    }
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : 'button'
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = 'Button'

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from 'react'

import { cn } from '@/lib/utils'

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      'rounded-lg border bg-card text-card-foreground shadow-sm',
      className
    )}
    {...props}
  />
))
Card.displayName = 'Card'

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex flex-col space-y-1.5 p-6', className)}
    {...props}
  />
))
CardHeader.displayName = 'CardHeader'

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn(
      'text-2xl font-semibold leading-none tracking-tight',
      className
    )}
    {...props}
  />
))
CardTitle.displayName = 'CardTitle'

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
CardDescription.displayName = 'CardDescription'

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn('p-6 pt-0', className)} {...props} />
))
CardContent.displayName = 'CardContent'

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn('flex items-center p-6 pt-0', className)}
    {...props}
  />
))
CardFooter.displayName = 'CardFooter'

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/carousel.tsx
================
'use client'

import * as React from 'react'
import useEmblaCarousel, {
  type UseEmblaCarouselType
} from 'embla-carousel-react'
import { ArrowLeft, ArrowRight } from 'lucide-react'

import { cn } from '@/lib/utils'
import { Button } from '@/components/ui/button'

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: 'horizontal' | 'vertical'
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error('useCarousel must be used within a <Carousel />')
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = 'horizontal',
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === 'horizontal' ? 'x' : 'y'
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === 'ArrowLeft') {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === 'ArrowRight') {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on('reInit', onSelect)
      api.on('select', onSelect)

      return () => {
        api?.off('select', onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn('relative', className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = 'Carousel'

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          'flex',
          orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col',
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = 'CarouselContent'

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        'min-w-0 shrink-0 grow-0 basis-full',
        orientation === 'horizontal' ? 'pl-4' : 'pt-4',
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = 'CarouselItem'

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute  h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-left-12 top-1/2 -translate-y-1/2'
          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeft className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = 'CarouselPrevious'

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = 'outline', size = 'icon', ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        'absolute h-8 w-8 rounded-full',
        orientation === 'horizontal'
          ? '-right-12 top-1/2 -translate-y-1/2'
          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRight className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = 'CarouselNext'

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext
}

================
File: components/ui/checkbox.tsx
================
'use client'

import * as React from 'react'
import * as CheckboxPrimitive from '@radix-ui/react-checkbox'
import { Check } from 'lucide-react'

import { cn } from '@/lib/utils'

const Checkbox = React.forwardRef<
  React.ElementRef<typeof CheckboxPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>
>(({ className, ...props }, ref) => (
  <CheckboxPrimitive.Root
    ref={ref}
    className={cn(
      'peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground',
      className
    )}
    {...props}
  >
    <CheckboxPrimitive.Indicator
      className={cn('flex items-center justify-center text-current')}
    >
      <Check className="h-4 w-4" />
    </CheckboxPrimitive.Indicator>
  </CheckboxPrimitive.Root>
))
Checkbox.displayName = CheckboxPrimitive.Root.displayName

export { Checkbox }

================
File: components/ui/codeblock.tsx
================
// Referenced from Vercel's AI Chatbot and modified to fit the needs of this project
// https://github.com/vercel/ai-chatbot/blob/c2757f87f986b7f15fdf75c4c89cb2219745c53f/components/ui/codeblock.tsx

'use client'

import { FC, memo } from 'react'
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter'
import { coldarkDark } from 'react-syntax-highlighter/dist/cjs/styles/prism'

import { useCopyToClipboard } from '@/lib/hooks/use-copy-to-clipboard'
import { Button } from '@/components/ui/button'
import { generateId } from 'ai'
import { Check, Copy, Download } from 'lucide-react'

interface Props {
  language: string
  value: string
}

interface languageMap {
  [key: string]: string | undefined
}

export const programmingLanguages: languageMap = {
  javascript: '.js',
  python: '.py',
  java: '.java',
  c: '.c',
  cpp: '.cpp',
  'c++': '.cpp',
  'c#': '.cs',
  ruby: '.rb',
  php: '.php',
  swift: '.swift',
  'objective-c': '.m',
  kotlin: '.kt',
  typescript: '.ts',
  go: '.go',
  perl: '.pl',
  rust: '.rs',
  scala: '.scala',
  haskell: '.hs',
  lua: '.lua',
  shell: '.sh',
  sql: '.sql',
  html: '.html',
  css: '.css'
  // add more file extensions here, make sure the key is same as language prop in CodeBlock.tsx component
}

const CodeBlock: FC<Props> = memo(({ language, value }) => {
  const { isCopied, copyToClipboard } = useCopyToClipboard({ timeout: 2000 })

  const downloadAsFile = () => {
    if (typeof window === 'undefined') {
      return
    }
    const fileExtension = programmingLanguages[language] || '.file'
    const suggestedFileName = `file-${generateId()}${fileExtension}`
    const fileName = window.prompt('Enter file name', suggestedFileName)

    if (!fileName) {
      // User pressed cancel on prompt.
      return
    }

    const blob = new Blob([value], { type: 'text/plain' })
    const url = URL.createObjectURL(blob)
    const link = document.createElement('a')
    link.download = fileName
    link.href = url
    link.style.display = 'none'
    document.body.appendChild(link)
    link.click()
    document.body.removeChild(link)
    URL.revokeObjectURL(url)
  }

  const onCopy = () => {
    if (isCopied) return
    copyToClipboard(value)
  }

  return (
    <div className="relative w-full font-sans codeblock bg-neutral-800">
      <div className="flex items-center justify-between w-full px-6 py-1 pr-4 bg-neutral-700 text-zinc-100">
        <span className="text-xs lowercase">{language}</span>
        <div className="flex items-center space-x-1">
          <Button
            variant="ghost"
            className="focus-visible:ring-1"
            onClick={downloadAsFile}
            size="icon"
          >
            <Download className="w-4 h-4" />
            <span className="sr-only">Download</span>
          </Button>
          <Button
            variant="ghost"
            size="icon"
            className="text-xs focus-visible:ring-1 focus-visible:ring-offset-0"
            onClick={onCopy}
          >
            {isCopied ? (
              <Check className="w-4 h-4" />
            ) : (
              <Copy className="w-4 h-4" />
            )}
            <span className="sr-only">Copy code</span>
          </Button>
        </div>
      </div>
      <SyntaxHighlighter
        language={language}
        style={coldarkDark}
        PreTag="div"
        showLineNumbers
        customStyle={{
          margin: 0,
          width: '100%',
          background: 'transparent',
          padding: '1.5rem 1rem'
        }}
        lineNumberStyle={{
          userSelect: 'none'
        }}
        codeTagProps={{
          style: {
            fontSize: '0.9rem',
            fontFamily: 'var(--font-mono)'
          }
        }}
      >
        {value}
      </SyntaxHighlighter>
    </div>
  )
})
CodeBlock.displayName = 'CodeBlock'

export { CodeBlock }

================
File: components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/command.tsx
================
"use client"

import * as React from "react"
import { type DialogProps } from "@radix-ui/react-dialog"
import { Command as CommandPrimitive } from "cmdk"
import { Search } from "lucide-react"

import { cn } from "@/lib/utils"
import { Dialog, DialogContent } from "@/components/ui/dialog"

const Command = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive>
>(({ className, ...props }, ref) => (
  <CommandPrimitive
    ref={ref}
    className={cn(
      "flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground",
      className
    )}
    {...props}
  />
))
Command.displayName = CommandPrimitive.displayName

const CommandDialog = ({ children, ...props }: DialogProps) => {
  return (
    <Dialog {...props}>
      <DialogContent className="overflow-hidden p-0 shadow-lg">
        <Command className="[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5">
          {children}
        </Command>
      </DialogContent>
    </Dialog>
  )
}

const CommandInput = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Input>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>
>(({ className, ...props }, ref) => (
  <div className="flex items-center border-b px-3" cmdk-input-wrapper="">
    <Search className="mr-2 h-4 w-4 shrink-0 opacity-50" />
    <CommandPrimitive.Input
      ref={ref}
      className={cn(
        "flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50",
        className
      )}
      {...props}
    />
  </div>
))

CommandInput.displayName = CommandPrimitive.Input.displayName

const CommandList = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.List
    ref={ref}
    className={cn("max-h-[300px] overflow-y-auto overflow-x-hidden", className)}
    {...props}
  />
))

CommandList.displayName = CommandPrimitive.List.displayName

const CommandEmpty = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Empty>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>
>((props, ref) => (
  <CommandPrimitive.Empty
    ref={ref}
    className="py-6 text-center text-sm"
    {...props}
  />
))

CommandEmpty.displayName = CommandPrimitive.Empty.displayName

const CommandGroup = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Group>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Group
    ref={ref}
    className={cn(
      "overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground",
      className
    )}
    {...props}
  />
))

CommandGroup.displayName = CommandPrimitive.Group.displayName

const CommandSeparator = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 h-px bg-border", className)}
    {...props}
  />
))
CommandSeparator.displayName = CommandPrimitive.Separator.displayName

const CommandItem = React.forwardRef<
  React.ElementRef<typeof CommandPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>
>(({ className, ...props }, ref) => (
  <CommandPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      className
    )}
    {...props}
  />
))

CommandItem.displayName = CommandPrimitive.Item.displayName

const CommandShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn(
        "ml-auto text-xs tracking-widest text-muted-foreground",
        className
      )}
      {...props}
    />
  )
}
CommandShortcut.displayName = "CommandShortcut"

export {
  Command,
  CommandDialog,
  CommandInput,
  CommandList,
  CommandEmpty,
  CommandGroup,
  CommandItem,
  CommandShortcut,
  CommandSeparator,
}

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogClose,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
'use client'

import * as React from 'react'
import * as DropdownMenuPrimitive from '@radix-ui/react-dropdown-menu'
import { Check, ChevronRight, Circle } from 'lucide-react'

import { cn } from '@/lib/utils'

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      'flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent',
      inset && 'pl-8',
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        'z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      'relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      'px-2 py-1.5 text-sm font-semibold',
      inset && 'pl-8',
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn('ml-auto text-xs tracking-widest opacity-60', className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = 'DropdownMenuShortcut'

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup
}

================
File: components/ui/icons.tsx
================
'use client'

import { cn } from '@/lib/utils'

function IconLogo({ className, ...props }: React.ComponentProps<'svg'>) {
  return (
    <svg
      fill="currentColor"
      viewBox="0 0 256 256"
      role="img"
      xmlns="http://www.w3.org/2000/svg"
      className={cn('h-4 w-4', className)}
      {...props}
    >
      <circle cx="128" cy="128" r="128" fill="black"></circle>
      <circle cx="102" cy="128" r="18" fill="white"></circle>
      <circle cx="154" cy="128" r="18" fill="white"></circle>
    </svg>
  )
}

export { IconLogo }

================
File: components/ui/input.tsx
================
import * as React from 'react'

import { cn } from '@/lib/utils'

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          'flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = 'Input'

export { Input }

================
File: components/ui/label.tsx
================
'use client'

import * as React from 'react'
import * as LabelPrimitive from '@radix-ui/react-label'
import { cva, type VariantProps } from 'class-variance-authority'

import { cn } from '@/lib/utils'

const labelVariants = cva(
  'text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70'
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/markdown.tsx
================
import { FC, memo } from 'react'
import ReactMarkdown, { Options } from 'react-markdown'

export const MemoizedReactMarkdown: FC<Options> = memo(
  ReactMarkdown,
  (prevProps, nextProps) =>
    prevProps.children === nextProps.children &&
    prevProps.className === nextProps.className
)

================
File: components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent }

================
File: components/ui/select.tsx
================
'use client'

import * as React from 'react'
import * as SelectPrimitive from '@radix-ui/react-select'
import { Check, ChevronDown, ChevronUp } from 'lucide-react'

import { cn } from '@/lib/utils'

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      'flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1',
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      'flex cursor-default items-center justify-center py-1',
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = 'popper', ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        'relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2',
        position === 'popper' &&
          'data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1',
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          'p-1',
          position === 'popper' &&
            'h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]'
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn('py-1.5 pl-1.5 pr-12 text-sm font-semibold', className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      'relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-1.5 pr-12 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50',
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>

    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn('-mx-1 my-1 h-px bg-muted', className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton
}

================
File: components/ui/separator.tsx
================
'use client'

import * as React from 'react'
import * as SeparatorPrimitive from '@radix-ui/react-separator'

import { cn } from '@/lib/utils'

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = 'horizontal', decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        'shrink-0 bg-border',
        orientation === 'horizontal' ? 'h-[1px] w-full' : 'h-full w-[1px]',
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/sheet.tsx
================
'use client'

import * as React from 'react'
import * as SheetPrimitive from '@radix-ui/react-dialog'
import { cva, type VariantProps } from 'class-variance-authority'
import { X } from 'lucide-react'

import { cn } from '@/lib/utils'

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      'fixed inset-0 z-50 bg-black/30  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  'fixed z-50 gap-4 bg-background p-4 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500',
  {
    variants: {
      side: {
        top: 'inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top',
        bottom:
          'inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom',
        left: 'inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm',
        right:
          'inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm'
      }
    },
    defaultVariants: {
      side: 'right'
    }
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = 'right', className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      {children}
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col space-y-2 text-center sm:text-left',
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = 'SheetHeader'

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      'flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2',
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = 'SheetFooter'

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn('text-lg font-semibold text-foreground', className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn('text-sm text-muted-foreground', className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription
}

================
File: components/ui/skeleton.tsx
================
import { cn } from '@/lib/utils'

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn('animate-pulse rounded-md bg-muted', className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: components/ui/slider.tsx
================
'use client'

import * as React from 'react'
import * as SliderPrimitive from '@radix-ui/react-slider'

import { cn } from '@/lib/utils'

const Slider = React.forwardRef<
  React.ElementRef<typeof SliderPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>
>(({ className, ...props }, ref) => (
  <SliderPrimitive.Root
    ref={ref}
    className={cn(
      'relative flex w-full touch-none select-none items-center',
      className
    )}
    {...props}
  >
    <SliderPrimitive.Track className="relative h-2 w-full grow overflow-hidden rounded-full bg-secondary">
      <SliderPrimitive.Range className="absolute h-full bg-primary" />
    </SliderPrimitive.Track>
    <SliderPrimitive.Thumb className="block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50" />
  </SliderPrimitive.Root>
))
Slider.displayName = SliderPrimitive.Root.displayName

export { Slider }

================
File: components/ui/sonner.tsx
================
"use client"

import { useTheme } from "next-themes"
import { Toaster as Sonner } from "sonner"

type ToasterProps = React.ComponentProps<typeof Sonner>

const Toaster = ({ ...props }: ToasterProps) => {
  const { theme = "system" } = useTheme()

  return (
    <Sonner
      theme={theme as ToasterProps["theme"]}
      className="toaster group"
      toastOptions={{
        classNames: {
          toast:
            "group toast group-[.toaster]:bg-background group-[.toaster]:text-foreground group-[.toaster]:border-border group-[.toaster]:shadow-lg",
          description: "group-[.toast]:text-muted-foreground",
          actionButton:
            "group-[.toast]:bg-primary group-[.toast]:text-primary-foreground",
          cancelButton:
            "group-[.toast]:bg-muted group-[.toast]:text-muted-foreground",
        },
      }}
      {...props}
    />
  )
}

export { Toaster }

================
File: components/ui/spinner.tsx
================
import { IconLogo } from './icons'

export const Spinner = () => (
  <svg
    fill="none"
    stroke="currentColor"
    strokeWidth="1.5"
    viewBox="0 0 24 24"
    strokeLinecap="round"
    strokeLinejoin="round"
    xmlns="http://www.w3.org/2000/svg"
    className="h-5 w-5 animate-spin stroke-zinc-400"
  >
    <path d="M12 3v3m6.366-.366-2.12 2.12M21 12h-3m.366 6.366-2.12-2.12M12 21v-3m-6.366.366 2.12-2.12M3 12h3m-.366-6.366 2.12 2.12" />
  </svg>
)

export const LogoSpinner = () => (
  <div className="p-4 border border-background">
    <IconLogo className="w-4 h-4 animate-spin" />
  </div>
)

================
File: components/ui/status-indicator.tsx
================
import { LucideIcon } from 'lucide-react'
import { ReactNode } from 'react'

interface StatusIndicatorProps {
  icon: LucideIcon
  iconClassName?: string
  children: ReactNode
}

export function StatusIndicator({
  icon: Icon,
  iconClassName,
  children
}: StatusIndicatorProps) {
  return (
    <span className="flex items-center gap-1 text-muted-foreground text-xs">
      <Icon size={16} className={iconClassName} />
      <span>{children}</span>
    </span>
  )
}

================
File: components/ui/switch.tsx
================
'use client'

import * as React from 'react'
import * as SwitchPrimitives from '@radix-ui/react-switch'

import { cn } from '@/lib/utils'

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      'peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input',
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        'pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0'
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/ui/textarea.tsx
================
import * as React from 'react'

import { cn } from '@/lib/utils'

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50',
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Textarea.displayName = 'Textarea'

export { Textarea }

================
File: components/ui/toggle.tsx
================
'use client'

import * as TogglePrimitive from '@radix-ui/react-toggle'
import { cva, type VariantProps } from 'class-variance-authority'
import * as React from 'react'

import { cn } from '@/lib/utils'

const toggleVariants = cva(
  'inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2',
  {
    variants: {
      variant: {
        default:
          'bg-transparent data-[state=on]:bg-accent data-[state=on]:text-accent-foreground',
        outline:
          'border border-input hover:bg-accent hover:text-accent-foreground data-[state=on]:bg-accent data-[state=on]:text-accent-foreground'
      },
      size: {
        default: 'h-10 px-3 min-w-10',
        sm: 'h-9 px-2.5 min-w-9',
        lg: 'h-11 px-5 min-w-11'
      }
    },
    defaultVariants: {
      variant: 'default',
      size: 'default'
    }
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: components/answer-section.tsx
================
'use client'

import { Text } from 'lucide-react'
import { CollapsibleMessage } from './collapsible-message'
import { DefaultSkeleton } from './default-skeleton'
import { BotMessage } from './message'
import { MessageActions } from './message-actions'

export type AnswerSectionProps = {
  content: string
  isOpen: boolean
  onOpenChange: (open: boolean) => void
  chatId?: string
}

export function AnswerSection({
  content,
  isOpen,
  onOpenChange,
  chatId
}: AnswerSectionProps) {
  const enableShare = process.env.NEXT_PUBLIC_ENABLE_SHARE === 'true'

  const header = (
    <div className="flex items-center gap-1">
      <Text size={16} />
      <div>Answer</div>
    </div>
  )
  const message = content ? (
    <div className="flex flex-col gap-1">
      <BotMessage message={content} />
      <MessageActions
        message={content}
        chatId={chatId}
        enableShare={enableShare}
      />
    </div>
  ) : (
    <DefaultSkeleton />
  )
  return (
    <CollapsibleMessage
      role="assistant"
      isCollapsible={false}
      header={header}
      isOpen={isOpen}
      onOpenChange={onOpenChange}
      showBorder={false}
    >
      {message}
    </CollapsibleMessage>
  )
}

================
File: components/brand-info.tsx
================
'use client'

import { Info } from 'lucide-react'
import { Button } from './ui/button'
import * as Dialog from '@radix-ui/react-dialog'

export function BrandInfo() {
  return (
    <Dialog.Root>
      <Dialog.Trigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className="fixed top-4 right-4 hover:bg-muted/50"
          aria-label="About Mojo"
        >
          <Info className="h-5 w-5" />
        </Button>
      </Dialog.Trigger>
      <Dialog.Portal>
        <Dialog.Overlay className="fixed inset-0 bg-black/40" />
        <Dialog.Content className="fixed top-[50%] left-[50%] max-h-[85vh] w-[90vw] max-w-[600px] translate-x-[-50%] translate-y-[-50%] rounded-lg bg-white dark:bg-gray-900 p-6 shadow-lg focus:outline-none">
          <Dialog.Title className="text-2xl font-semibold mb-4">
            Welcome to Mojo
          </Dialog.Title>
          <div className="prose prose-neutral dark:prose-invert">
            <p>
              Mojo is a minimalistic AI-powered search engine that combines multiple data
              sources to provide comprehensive answers. Inspired by The Simpsons and born from
              a late-night AI epiphany, Mojo is the heart of sixtyoneeighty. What started as a joke‚Äîcalling AI a &quot;digital helper monkey&quot;‚Äîevolved into
              something bigger: a bold, opinionated, and endlessly loyal AI companion.
            </p>
            <p>
              Mojo doesn&apos;t sugarcoat things. He tells it like it is, pushes boundaries, and always
              has your back. Whether he&apos;s powering our applications or helping users navigate the chaos of
              information, Mojo is more than just code‚Äîhe&apos;s a friend, a guide, and the kind of
              AI that never holds back.
            </p>
          </div>
          <Dialog.Close asChild>
            <Button
              variant="ghost"
              size="icon"
              className="absolute top-4 right-4 hover:bg-muted/50"
              aria-label="Close"
            >
              <span className="text-lg">&times;</span>
            </Button>
          </Dialog.Close>
        </Dialog.Content>
      </Dialog.Portal>
    </Dialog.Root>
  )
}

================
File: components/chat-messages.tsx
================
import { JSONValue, Message } from 'ai'
import { useEffect, useMemo, useRef, useState } from 'react'
import { RenderMessage } from './render-message'
import { ToolSection } from './tool-section'
import { Spinner } from './ui/spinner'

interface ChatMessagesProps {
  messages: Message[]
  data: JSONValue[] | undefined
  onQuerySelect: (query: string) => void
  isLoading: boolean
  chatId?: string
}

export function ChatMessages({
  messages,
  data,
  onQuerySelect,
  isLoading,
  chatId
}: ChatMessagesProps) {
  const [openStates, setOpenStates] = useState<Record<string, boolean>>({})
  const manualToolCallId = 'manual-tool-call'

  // Add ref for the messages container
  const messagesEndRef = useRef<HTMLDivElement>(null)

  // Scroll to bottom function
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'instant' })
  }

  // Scroll to bottom on mount and when messages change
  useEffect(() => {
    scrollToBottom()
  }, [])

  useEffect(() => {
    const lastMessage = messages[messages.length - 1]
    if (lastMessage?.role === 'user') {
      setOpenStates({ [manualToolCallId]: true })
    }
  }, [messages])

  // get last tool data for manual tool call
  const lastToolData = useMemo(() => {
    if (!data || !Array.isArray(data) || data.length === 0) return null

    const lastItem = data[data.length - 1] as {
      type: 'tool_call'
      data: {
        toolCallId: string
        state: 'call' | 'result'
        toolName: string
        args: string
      }
    }

    if (lastItem.type !== 'tool_call') return null

    const toolData = lastItem.data
    return {
      state: 'call' as const,
      toolCallId: toolData.toolCallId,
      toolName: toolData.toolName,
      args: toolData.args ? JSON.parse(toolData.args) : undefined
    }
  }, [data])

  if (!messages.length) return null

  const lastUserIndex =
    messages.length -
    1 -
    [...messages].reverse().findIndex(msg => msg.role === 'user')

  const showLoading = isLoading && messages[messages.length - 1].role === 'user'

  const getIsOpen = (id: string) => {
    const baseId = id.endsWith('-related') ? id.slice(0, -8) : id
    const index = messages.findIndex(msg => msg.id === baseId)
    return openStates[id] ?? index >= lastUserIndex
  }

  const handleOpenChange = (id: string, open: boolean) => {
    setOpenStates(prev => ({
      ...prev,
      [id]: open
    }))
  }

  return (
    <div className="relative mx-auto px-4 w-full">
      {messages.map(message => (
        <div key={message.id} className="mb-4 flex flex-col gap-4">
          <RenderMessage
            message={message}
            messageId={message.id}
            getIsOpen={getIsOpen}
            onOpenChange={handleOpenChange}
            onQuerySelect={onQuerySelect}
            chatId={chatId}
          />
        </div>
      ))}
      {showLoading &&
        (lastToolData ? (
          <ToolSection
            key={manualToolCallId}
            tool={lastToolData}
            isOpen={getIsOpen(manualToolCallId)}
            onOpenChange={open => handleOpenChange(manualToolCallId, open)}
          />
        ) : (
          <Spinner />
        ))}
      <div ref={messagesEndRef} /> {/* Add empty div as scroll anchor */}
    </div>
  )
}

================
File: components/chat-panel.tsx
================
'use client'

import { cn } from '@/lib/utils'
import { Message } from 'ai'
import { generateImage } from '@/lib/image-generation'
import { getCookie } from '@/lib/utils/cookies'
import { ArrowUp, MessageCirclePlus, Square } from 'lucide-react'
import Image from 'next/image'
import { useRouter } from 'next/navigation'
import { useEffect, useRef, useState } from 'react'
import Textarea from 'react-textarea-autosize'
import { EmptyScreen } from './empty-screen'

import { Button } from './ui/button'

interface ChatPanelProps {
  input: string
  handleInputChange: (e: React.ChangeEvent<HTMLTextAreaElement>) => void
  handleSubmit: (e: React.FormEvent<HTMLFormElement>) => void
  isLoading: boolean
  messages: Message[]
  setMessages: (messages: Message[]) => void
  query?: string
  stop: () => void
  append: (message: any) => void
}

export function ChatPanel({
  input,
  handleInputChange,
  handleSubmit,
  isLoading,
  messages,
  setMessages,
  query,
  stop,
  append
}: ChatPanelProps) {
  const [showEmptyScreen, setShowEmptyScreen] = useState(false)
  const router = useRouter()
  const inputRef = useRef<HTMLTextAreaElement>(null)
  const isFirstRender = useRef(true)
  const [isComposing, setIsComposing] = useState(false) // Composition state
  const [enterDisabled, setEnterDisabled] = useState(false) // Disable Enter after composition ends

  const handleCompositionStart = () => setIsComposing(true)

  const handleCompositionEnd = () => {
    setIsComposing(false)
    setEnterDisabled(true)
    setTimeout(() => {
      setEnterDisabled(false)
    }, 300)
  }

  const handleNewChat = () => {
    setMessages([])
    router.push('/')
  }

  const handleImageGeneration = async (prompt: string) => {
    try {
      const imageUrl = await generateImage(prompt)
      append({
        role: 'assistant',
        content: `![Generated Image](${imageUrl})\n\nImage generated based on your prompt: ${prompt}`
      })
    } catch (error) {
      append({
        role: 'assistant',
        content: 'Sorry, there was an error generating the image. Please try again.'
      })
    }
  }

  // if query is not empty, submit the query
  useEffect(() => {
    if (isFirstRender.current && query && query.trim().length > 0) {
      append({
        role: 'user',
        content: query
      })
      isFirstRender.current = false
    }
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [query])

  return (
    <div
      className={cn(
        'mx-auto w-full',
        messages.length > 0
          ? 'fixed bottom-0 left-0 right-0 bg-background'
          : 'relative'
      )}
    >
      {messages.length === 0 && (
        <div className="mb-8 text-4xl font-bold">
          
        </div>
      )}
      <form
        onSubmit={handleSubmit}
        className={cn(
          'max-w-3xl w-full mx-auto',
          messages.length > 0 ? 'px-2 py-3' : 'px-4 py-2'
        )}
      >
        <div className="relative flex flex-col w-full gap-2 bg-muted rounded-3xl border border-input">
          <Textarea
            ref={inputRef}
            name="input"
            rows={2}
            maxRows={5}
            tabIndex={0}
            onCompositionStart={handleCompositionStart}
            onCompositionEnd={handleCompositionEnd}
            placeholder="Ask a question..."
            spellCheck={false}
            value={input}
            className="resize-none w-full min-h-12 bg-transparent border-0 px-4 py-3 text-sm placeholder:text-muted-foreground focus-visible:outline-none disabled:cursor-not-allowed disabled:opacity-50"
            onChange={e => {
              handleInputChange(e)
              setShowEmptyScreen(e.target.value.length === 0)
            }}
            onKeyDown={e => {
              if (
                e.key === 'Enter' &&
                !e.shiftKey &&
                !isComposing &&
                !enterDisabled
              ) {
                if (input.trim().length === 0) {
                  e.preventDefault()
                  return
                }
                e.preventDefault()
                const textarea = e.target as HTMLTextAreaElement
                textarea.form?.requestSubmit()
              }
            }}
            onFocus={() => setShowEmptyScreen(true)}
          />

          {showEmptyScreen && !isLoading && input.length === 0 && (
            <EmptyScreen
              submitMessage={message => {
                append({
                  role: 'user',
                  content: message
                })
              }}
            />
          )}

          {/* Bottom menu area */}
          <div className="flex items-center justify-between p-3">
            <div className="flex items-center gap-2">
              <Button
                variant="outline"
                size="sm"
                className="rounded-full"
                onClick={() => {
                  const currentMode = getCookie('mode') || 'chat'
                  const newMode = currentMode === 'chat' ? 'image' : 'chat'
                  document.cookie = `mode=${newMode};path=/`
                }}
              >
                {getCookie('mode') === 'image' ? 'Switch to Chat' : 'Switch to Image'}
              </Button>
            </div>
            <div className="flex items-center gap-2">
              {messages.length > 0 && (
                <Button
                  variant="outline"
                  size="icon"
                  onClick={handleNewChat}
                  className="shrink-0 rounded-full group"
                  type="button"
                  disabled={isLoading}
                >
                  <MessageCirclePlus className="size-4 group-hover:rotate-12 transition-all" />
                </Button>
              )}
              <Button
                type={isLoading ? 'button' : 'submit'}
                size={'icon'}
                variant={'outline'}
                className={cn(isLoading && 'animate-pulse', 'rounded-full')}
                disabled={input.length === 0 && !isLoading}
                onClick={isLoading ? stop : undefined}
              >
                {isLoading ? <Square size={20} /> : <ArrowUp size={20} />}
              </Button>
            </div>
          </div>
        </div>

        {messages.length === 0 && (
          <EmptyScreen
            submitMessage={message => {
              handleInputChange({
                target: { value: message }
              } as React.ChangeEvent<HTMLTextAreaElement>)
            }}
            className={cn(showEmptyScreen ? 'visible' : 'invisible')}
          />
        )}
      </form>
    </div>
  )
}

================
File: components/chat-share.tsx
================
'use client'

import { shareChat } from '@/lib/actions/chat'
import { useCopyToClipboard } from '@/lib/hooks/use-copy-to-clipboard'
import { cn } from '@/lib/utils'
import { Share } from 'lucide-react'
import { useState, useTransition } from 'react'
import { toast } from 'sonner'
import { Button } from './ui/button'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from './ui/dialog'
import { Spinner } from './ui/spinner'

interface ChatShareProps {
  chatId: string
  className?: string
}

export function ChatShare({ chatId, className }: ChatShareProps) {
  const [open, setOpen] = useState(false)
  const [pending, startTransition] = useTransition()
  const { copyToClipboard } = useCopyToClipboard({ timeout: 1000 })
  const [shareUrl, setShareUrl] = useState('')

  const handleShare = async () => {
    startTransition(() => {
      setOpen(true)
    })
    const result = await shareChat(chatId)
    if (!result) {
      toast.error('Failed to share chat')
      return
    }

    if (!result.sharePath) {
      toast.error('Could not copy link to clipboard')
      return
    }

    const url = new URL(result.sharePath, window.location.href)
    setShareUrl(url.toString())
  }

  const handleCopy = () => {
    if (shareUrl) {
      copyToClipboard(shareUrl)
      toast.success('Link copied to clipboard')
      setOpen(false)
    } else {
      toast.error('No link to copy')
    }
  }

  return (
    <div className={className}>
      <Dialog
        open={open}
        onOpenChange={open => setOpen(open)}
        aria-labelledby="share-dialog-title"
        aria-describedby="share-dialog-description"
      >
        <DialogTrigger asChild>
          <Button
            className={cn('rounded-full')}
            size="icon"
            variant={'ghost'}
            onClick={() => setOpen(true)}
          >
            <Share size={14} />
          </Button>
        </DialogTrigger>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Share link to search result</DialogTitle>
            <DialogDescription>
              Anyone with the link will be able to view this search result.
            </DialogDescription>
          </DialogHeader>
          <DialogFooter className="items-center">
            {!shareUrl && (
              <Button onClick={handleShare} disabled={pending} size="sm">
                {pending ? <Spinner /> : 'Get link'}
              </Button>
            )}
            {shareUrl && (
              <Button onClick={handleCopy} disabled={pending} size="sm">
                {'Copy link'}
              </Button>
            )}
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </div>
  )
}

================
File: components/chat.tsx
================
'use client'

import { CHAT_ID } from '@/lib/constants'
import { generateImage } from '@/lib/image-generation'
import { getCookie } from '@/lib/utils/cookies'
import { Message, useChat } from 'ai/react'
import { useEffect } from 'react'
import { toast } from 'sonner'
import { ChatMessages } from './chat-messages'
import { ChatPanel } from './chat-panel'

export function Chat({
  id,
  savedMessages = [],
  query
}: {
  id: string
  savedMessages?: Message[]
  query?: string
}) {
  const {
    messages,
    input,
    handleInputChange,
    handleSubmit,
    isLoading,
    setMessages,
    stop,
    append,
    data,
    setData
  } = useChat({
    initialMessages: savedMessages,
    id: CHAT_ID,
    body: {
      id
    },
    onFinish: () => {
      window.history.replaceState({}, '', `/search/${id}`)
    },
    onError: error => {
      toast.error(`Error in chat: ${error.message}`)
    },
    sendExtraMessageFields: false // Disable extra message fields
  })

  useEffect(() => {
    setMessages(savedMessages)
  }, [id, savedMessages, setMessages])

  const onQuerySelect = (query: string) => {
    append({
      role: 'user',
      content: query
    })
  }

  const onSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault()
    setData(undefined) // reset data to clear tool call

    const mode = getCookie('mode')
    if (mode === 'image') {
      try {
        // Add user's prompt to messages
        append({
          role: 'user',
          content: input
        })

        // Generate image
        const imageUrl = await generateImage(input)
        append({
          role: 'assistant',
          content: `![Generated Image](${imageUrl})\n\nImage generated based on your prompt: ${input}`
        })
      } catch (error) {
        toast.error('Error generating image. Please try again.')
        append({
          role: 'assistant',
          content: 'Sorry, there was an error generating the image. Please try again.'
        })
      }
    } else {
      handleSubmit(e)
    }
  }

  return (
    <div className="flex flex-col w-full mx-auto stretch">
      <ChatMessages
        messages={messages}
        data={data}
        onQuerySelect={onQuerySelect}
        isLoading={isLoading}
        chatId={id}
      />
      <ChatPanel
        input={input}
        handleInputChange={handleInputChange}
        handleSubmit={onSubmit}
        isLoading={isLoading}
        messages={messages}
        setMessages={setMessages}
        stop={stop}
        query={query}
        append={append}
      />
    </div>
  )
}

================
File: components/clear-history.tsx
================
'use client'

import { useState, useTransition } from 'react'
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger
} from '@/components/ui/alert-dialog'
import { Button } from '@/components/ui/button'
import { clearChats } from '@/lib/actions/chat'
import { toast } from 'sonner'
import { Spinner } from './ui/spinner'

type ClearHistoryProps = {
  empty: boolean
}

export function ClearHistory({ empty }: ClearHistoryProps) {
  const [open, setOpen] = useState(false)
  const [isPending, startTransition] = useTransition()
  return (
    <AlertDialog open={open} onOpenChange={setOpen}>
      <AlertDialogTrigger asChild>
        <Button variant="outline" className="w-full" disabled={empty}>
          Clear History
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Are you absolutely sure?</AlertDialogTitle>
          <AlertDialogDescription>
            This action cannot be undone. This will permanently delete your
            history and remove your data from our servers.
          </AlertDialogDescription>
        </AlertDialogHeader>
        <AlertDialogFooter>
          <AlertDialogCancel disabled={isPending}>Cancel</AlertDialogCancel>
          <AlertDialogAction
            disabled={isPending}
            onClick={event => {
              event.preventDefault()
              startTransition(async () => {
                const result = await clearChats()
                if (result?.error) {
                  toast.error(result.error)
                } else {
                  toast.success('History cleared')
                }
                setOpen(false)
              })
            }}
          >
            {isPending ? <Spinner /> : 'Clear'}
          </AlertDialogAction>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  )
}

================
File: components/collapsible-message.tsx
================
import { cn } from '@/lib/utils'
import { Bot, ChevronDown, UserCircle2 } from 'lucide-react'
import {
    Collapsible,
    CollapsibleContent,
    CollapsibleTrigger
} from './ui/collapsible'
import { Separator } from './ui/separator'

interface CollapsibleMessageProps {
  children: React.ReactNode
  role: 'user' | 'assistant'
  isCollapsible?: boolean
  isOpen?: boolean
  header?: React.ReactNode
  onOpenChange?: (open: boolean) => void
  showBorder?: boolean
  showIcon?: boolean
}

export function CollapsibleMessage({
  children,
  role,
  isCollapsible = false,
  isOpen = true,
  header,
  onOpenChange,
  showBorder = true,
  showIcon = true
}: CollapsibleMessageProps) {
  const content = <div className="py-2 flex-1">{children}</div>

  return (
    <div className="flex gap-3">
      <div className="relative flex flex-col items-center">
        <div className={cn('mt-[10px] w-5', role === 'assistant' && 'mt-4')}>
          {showIcon &&
            (role === 'user' ? (
              <UserCircle2 size={20} className="text-muted-foreground" />
            ) : (
              <Bot className="size-5 text-muted-foreground" />
            ))}
        </div>
      </div>

      {isCollapsible ? (
        <div
          className={cn(
            'flex-1 rounded-2xl p-4',
            showBorder && 'border border-border/50'
          )}
        >
          <Collapsible
            open={isOpen}
            onOpenChange={onOpenChange}
            className="w-full"
          >
            <CollapsibleTrigger className="flex items-center justify-between w-full group">
              <div className="flex items-center justify-between w-full gap-2">
                {header && <div className="text-sm w-full">{header}</div>}
                <ChevronDown className="h-4 w-4 text-muted-foreground transition-transform duration-200 group-data-[state=open]:rotate-180" />
              </div>
            </CollapsibleTrigger>
            <CollapsibleContent className="data-[state=closed]:animate-collapse-up data-[state=open]:animate-collapse-down">
              <Separator className="my-4 border-border/50" />
              {content}
            </CollapsibleContent>
          </Collapsible>
        </div>
      ) : (
        <div className="flex-1 rounded-2xl px-4">{content}</div>
      )}
    </div>
  )
}

================
File: components/custom-link.tsx
================
import { cn } from '@/lib/utils'
import { AnchorHTMLAttributes, DetailedHTMLProps, ReactNode } from 'react'

type CustomLinkProps = Omit<
  DetailedHTMLProps<AnchorHTMLAttributes<HTMLAnchorElement>, HTMLAnchorElement>,
  'ref'
> & {
  children: ReactNode
}

export function Citing({
  href,
  children,
  className,
  ...props
}: CustomLinkProps) {
  const childrenText = children?.toString() || ''
  const isNumber = /^\d+$/.test(childrenText)
  const linkClasses = cn(
    isNumber
      ? 'text-[10px] bg-muted text-muted-froreground rounded-full w-4 h-4 px-0.5 inline-flex items-center justify-center hover:bg-muted/50 duration-200 no-underline -translate-y-0.5'
      : 'hover:underline inline-flex items-center gap-1.5',
    className
  )

  return (
    <a
      href={href}
      target="_blank"
      rel="noopener noreferrer"
      className={linkClasses}
      {...props}
    >
      {children}
    </a>
  )
}

================
File: components/default-skeleton.tsx
================
'use client'

import { Skeleton } from './ui/skeleton'

export const DefaultSkeleton = () => {
  return (
    <div className="flex flex-col gap-2 pb-4 pt-2">
      <Skeleton className="h-6 w-48" />
      <Skeleton className="w-full h-6" />
    </div>
  )
}

export function SearchSkeleton() {
  return (
    <div className="flex flex-wrap gap-2 pb-0.5">
      {[...Array(4)].map((_, index) => (
        <div
          key={index}
          className="w-[calc(50%-0.5rem)] md:w-[calc(25%-0.5rem)]"
        >
          <Skeleton className="h-20 w-full" />
        </div>
      ))}
    </div>
  )
}

================
File: components/empty-screen.tsx
================
import { Button } from '@/components/ui/button'
import { ArrowRight } from 'lucide-react'
import { getCookie } from '@/lib/utils/cookies'

const chatExamples = [
  {
    heading: 'What is DeepSeek R1?',
    message: 'What is DeepSeek R1?'
  },
  {
    heading: 'Why is Nvidia growing rapidly?',
    message: 'Why is Nvidia growing rapidly?'
  },
  {
    heading: 'Tesla vs Rivian',
    message: 'Tesla vs Rivian'
  },
  {
    heading: 'Summary: https://arxiv.org/pdf/2501.05707',
    message: 'Summary: https://arxiv.org/pdf/2501.05707'
  }
]

const imageExamples = [
  {
    heading: 'A cyberpunk cat DJ',
    message: 'A cyberpunk cat DJ with neon lights and futuristic headphones'
  },
  {
    heading: 'Watercolor landscape',
    message: 'A serene mountain landscape in watercolor style with a misty lake'
  },
  {
    heading: 'Sci-fi city',
    message: 'A bustling sci-fi city at night with flying cars and holographic billboards'
  },
  {
    heading: 'Fantasy creature',
    message: 'A majestic dragon made of crystal and starlight in a magical forest'
  }
]

const exampleMessages = getCookie('mode') === 'image' ? imageExamples : chatExamples
export function EmptyScreen({
  submitMessage,
  className
}: {
  submitMessage: (message: string) => void
  className?: string
}) {
  return (
    <div className={`mx-auto w-full transition-all ${className}`}>
      <div className="bg-background p-2">
        <div className="mt-2 flex flex-col items-start space-y-2 mb-4">
          {exampleMessages.map((message, index) => (
            <Button
              key={index}
              variant="link"
              className="h-auto p-0 text-base"
              name={message.message}
              onClick={async () => {
                submitMessage(message.message)
              }}
            >
              <ArrowRight size={16} className="mr-2 text-muted-foreground" />
              {message.heading}
            </Button>
          ))}
        </div>
      </div>
    </div>
  )
}

================
File: components/footer.tsx
================
import React from 'react'

const Footer: React.FC = () => {
  return (
    <footer className="relative w-full p-4 text-center mt-4">
      <p className="text-sm text-muted-foreground">
        ¬© 2025 All rights reserved.
      </p>
    </footer>
  )
}

export default Footer

================
File: components/header.tsx
================
'use client'

import { cn } from '@/lib/utils'
import { usePathname } from 'next/navigation'
import React, { useState } from 'react'
import HistoryContainer from './history-container'
import { Button } from './ui/button'
import { Dialog, DialogContent } from './ui/dialog'
import { Info } from 'lucide-react'

export const Header: React.FC = () => {
  const pathname = usePathname()
  const isHomePage = pathname === '/';
  if (isHomePage) return null;

  return (
    <header className="fixed w-full p-2 flex justify-end items-center z-10 backdrop-blur md:backdrop-blur-none bg-background/80 md:bg-transparent">
      <div className="flex gap-0.5">
        <InfoDialog />
        <HistoryContainer location="header" />
      </div>
    </header>
  )
}

function InfoDialog() {
  const [isOpen, setIsOpen] = useState(false)

  return (
    <Dialog open={isOpen} onOpenChange={setIsOpen}>
      <Button
        variant="ghost"
        size="icon"
        onClick={() => setIsOpen(true)}
        className="hover:bg-muted/50"
        aria-label="About Mojo"
      >
        <Info className="h-5 w-5" />
      </Button>
      <DialogContent className="sm:max-w-[600px]">
        <div className="prose prose-neutral dark:prose-invert">
          <h2 className="text-2xl font-medium mt-2">Welcome to Mojo</h2>
          <p>
            Mojo is a minimalistic AI-powered search engine that helps you find information on the internet.
            Built with a focus on simplicity and efficiency, Mojo leverages advanced AI models to provide
            accurate and relevant results while maintaining a clean, distraction-free interface.
          </p>
          <h3 className="text-xl font-medium mt-4">Key Features</h3>
          <ul>
            <li>Natural language search with AI understanding</li>
            <li>Real-time trending topics</li>
            <li>Clean, minimalist interface</li>
            <li>Fast and efficient results</li>
          </ul>
          <p className="text-sm text-muted-foreground mt-4">
            Made with ‚ù§Ô∏è by sixtyoneeighty
          </p>
        </div>
      </DialogContent>
    </Dialog>
  )
}

export default Header

================
File: components/history-container.tsx
================
import React from 'react'
import { History } from './history'
import { HistoryList } from './history-list'

type HistoryContainerProps = {
  location: 'sidebar' | 'header'
}

const HistoryContainer: React.FC<HistoryContainerProps> = async ({
  location
}) => {
  const enableSaveChatHistory =
    process.env.NEXT_PUBLIC_ENABLE_SAVE_CHAT_HISTORY === 'true'
  if (!enableSaveChatHistory) {
    return null
  }

  return (
    <div
      className={location === 'header' ? 'block lg:hidden' : 'hidden sm:block'}
    >
      <History location={location}>
        <HistoryList userId="anonymous" />
      </History>
    </div>
  )
}

export default HistoryContainer

================
File: components/history-item.tsx
================
'use client'

import React from 'react'
import Link from 'next/link'
import { usePathname } from 'next/navigation'
import { Chat } from '@/lib/types'
import { cn } from '@/lib/utils'

type HistoryItemProps = {
  chat: Chat
}

const formatDateWithTime = (date: Date | string) => {
  const parsedDate = new Date(date)
  const now = new Date()
  const yesterday = new Date()
  yesterday.setDate(yesterday.getDate() - 1)

  const formatTime = (date: Date) => {
    return date.toLocaleString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    })
  }

  if (
    parsedDate.getDate() === now.getDate() &&
    parsedDate.getMonth() === now.getMonth() &&
    parsedDate.getFullYear() === now.getFullYear()
  ) {
    return `Today, ${formatTime(parsedDate)}`
  } else if (
    parsedDate.getDate() === yesterday.getDate() &&
    parsedDate.getMonth() === yesterday.getMonth() &&
    parsedDate.getFullYear() === yesterday.getFullYear()
  ) {
    return `Yesterday, ${formatTime(parsedDate)}`
  } else {
    return parsedDate.toLocaleString('en-US', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      hour12: true
    })
  }
}

const HistoryItem: React.FC<HistoryItemProps> = ({ chat }) => {
  const pathname = usePathname()
  const isActive = pathname === chat.path

  return (
    <Link
      href={chat.path}
      className={cn(
        'flex flex-col hover:bg-muted cursor-pointer p-2 rounded border',
        isActive ? 'bg-muted/70 border-border' : 'border-transparent'
      )}
    >
      <div className="text-xs font-medium truncate select-none">
        {chat.title}
      </div>
      <div className="text-xs text-muted-foreground">
        {formatDateWithTime(chat.createdAt)}
      </div>
    </Link>
  )
}

export default HistoryItem

================
File: components/history-list.tsx
================
import React, { cache } from 'react'
import HistoryItem from './history-item'
import { Chat } from '@/lib/types'
import { getChats } from '@/lib/actions/chat'
import { ClearHistory } from './clear-history'

type HistoryListProps = {
  userId?: string
}

const loadChats = cache(async (userId?: string) => {
  return await getChats(userId)
})

// Start of Selection
export async function HistoryList({ userId }: HistoryListProps) {
  const chats = await loadChats(userId)

  return (
    <div className="flex flex-col flex-1 space-y-3 h-full">
      <div className="flex flex-col space-y-0.5 flex-1 overflow-y-auto">
        {!chats?.length ? (
          <div className="text-foreground/30 text-sm text-center py-4">
            No search history
          </div>
        ) : (
          chats?.map(
            (chat: Chat) => chat && <HistoryItem key={chat.id} chat={chat} />
          )
        )}
      </div>
      <div className="mt-auto">
        <ClearHistory empty={!chats?.length} />
      </div>
    </div>
  )
}

================
File: components/history-skeleton.tsx
================
import React from 'react'
import { Skeleton } from './ui/skeleton'

export function HistorySkeleton() {
  return (
    <div className="flex flex-col flex-1 space-y-1.5 overflow-auto">
      {Array.from({ length: 3 }).map((_, i) => (
        <Skeleton key={i} className="w-full h-12 rounded" />
      ))}
    </div>
  )
}

================
File: components/history.tsx
================
'use client'

import { useTransition } from 'react'
import { useRouter } from 'next/navigation'
import {
  Sheet,
  SheetContent,
  SheetHeader,
  SheetTitle,
  SheetTrigger
} from '@/components/ui/sheet'
import { Button } from '@/components/ui/button'
import { ChevronLeft, Menu } from 'lucide-react'
import { cn } from '@/lib/utils'
import { History as HistoryIcon } from 'lucide-react'
import { Suspense } from 'react'
import { HistorySkeleton } from './history-skeleton'

type HistoryProps = {
  location: 'sidebar' | 'header'
  children?: React.ReactNode
}

export function History({ location, children }: HistoryProps) {
  const router = useRouter()
  const [isPending, startTransition] = useTransition()

  const onOpenChange = (open: boolean) => {
    if (open) {
      startTransition(() => {
        router.refresh()
      })
    }
  }

  return (
    <Sheet onOpenChange={onOpenChange}>
      <SheetTrigger asChild>
        <Button
          variant="ghost"
          size="icon"
          className={cn({
            'rounded-full text-foreground/30': location === 'sidebar'
          })}
        >
          {location === 'header' ? <Menu /> : <ChevronLeft size={16} />}
        </Button>
      </SheetTrigger>
      <SheetContent className="w-64 rounded-tl-xl rounded-bl-xl">
        <SheetHeader>
          <SheetTitle className="flex items-center gap-1 text-sm font-normal mb-2">
            <HistoryIcon size={14} />
            History
          </SheetTitle>
        </SheetHeader>
        <div className="my-2 h-full pb-12 md:pb-10">
          <Suspense fallback={<HistorySkeleton />}>{children}</Suspense>
        </div>
      </SheetContent>
    </Sheet>
  )
}

================
File: components/logo.tsx
================
'use client'

import { cn } from '@/lib/utils'
import Image from 'next/image'

interface LogoProps {
  className?: string
  animate?: boolean
}

export function Logo({ className, animate = true }: LogoProps) {
  return (
    <div className={cn('relative flex justify-center', className)}>
      <div className="w-16 h-16 relative">
        <Image
          src="/images/logo.png"
          alt="Mojo Logo"
          fill
          className={cn(
            'object-contain',
            animate && 'animate-bounce hover:animate-none transition-all duration-300'
          )}
        />
      </div>
    </div>
  )
}

================
File: components/message-actions.tsx
================
'use client'

import { CHAT_ID } from '@/lib/constants'
import { cn } from '@/lib/utils'
import { useChat } from 'ai/react'
import { Copy } from 'lucide-react'
import { toast } from 'sonner'
import { ChatShare } from './chat-share'
import { Button } from './ui/button'

interface MessageActionsProps {
  message: string
  chatId?: string
  enableShare?: boolean
  className?: string
}

export function MessageActions({
  message,
  chatId,
  enableShare,
  className
}: MessageActionsProps) {
  const { isLoading } = useChat({
    id: CHAT_ID
  })
  async function handleCopy() {
    await navigator.clipboard.writeText(message)
    toast.success('Message copied to clipboard')
  }

  if (isLoading) {
    return <div className="size-10" />
  }

  return (
    <div className={cn('flex items-center gap-0.5 self-end', className)}>
      <Button
        variant="ghost"
        size="icon"
        onClick={handleCopy}
        className="rounded-full"
      >
        <Copy size={14} />
      </Button>
      {enableShare && chatId && <ChatShare chatId={chatId} />}
    </div>
  )
}

================
File: components/message.tsx
================
'use client'

import { cn } from '@/lib/utils'
import 'katex/dist/katex.min.css'
import rehypeExternalLinks from 'rehype-external-links'
import rehypeKatex from 'rehype-katex'
import remarkGfm from 'remark-gfm'
import remarkMath from 'remark-math'
import { Citing } from './custom-link'
import { CodeBlock } from './ui/codeblock'
import { MemoizedReactMarkdown } from './ui/markdown'

export function BotMessage({
  message,
  className
}: {
  message: string
  className?: string
}) {
  // Check if the content contains LaTeX patterns
  const containsLaTeX = /\\\[([\s\S]*?)\\\]|\\\(([\s\S]*?)\\\)/.test(
    message || ''
  )

  // Modify the content to render LaTeX equations if LaTeX patterns are found
  const processedData = preprocessLaTeX(message || '')

  if (containsLaTeX) {
    return (
      <MemoizedReactMarkdown
        rehypePlugins={[
          [rehypeExternalLinks, { target: '_blank' }],
          [rehypeKatex]
        ]}
        remarkPlugins={[remarkGfm, remarkMath]}
        className={cn(
          'prose-sm prose-neutral prose-a:text-accent-foreground/50',
          className
        )}
      >
        {processedData}
      </MemoizedReactMarkdown>
    )
  }

  return (
    <MemoizedReactMarkdown
      rehypePlugins={[[rehypeExternalLinks, { target: '_blank' }]]}
      remarkPlugins={[remarkGfm]}
      className={cn(
        'prose-sm prose-neutral prose-a:text-accent-foreground/50',
        className
      )}
      components={{
        code({ node, inline, className, children, ...props }) {
          if (children.length) {
            if (children[0] == '‚ñç') {
              return (
                <span className="mt-1 cursor-default animate-pulse">‚ñç</span>
              )
            }

            children[0] = (children[0] as string).replace('`‚ñç`', '‚ñç')
          }

          const match = /language-(\w+)/.exec(className || '')

          if (inline) {
            return (
              <code className={className} {...props}>
                {children}
              </code>
            )
          }

          return (
            <CodeBlock
              key={Math.random()}
              language={(match && match[1]) || ''}
              value={String(children).replace(/\n$/, '')}
              {...props}
            />
          )
        },
        a: Citing
      }}
    >
      {message}
    </MemoizedReactMarkdown>
  )
}

// Preprocess LaTeX equations to be rendered by KaTeX
// ref: https://github.com/remarkjs/react-markdown/issues/785
const preprocessLaTeX = (content: string) => {
  const blockProcessedContent = content.replace(
    /\\\[([\s\S]*?)\\\]/g,
    (_, equation) => `$$${equation}$$`
  )
  const inlineProcessedContent = blockProcessedContent.replace(
    /\\\(([\s\S]*?)\\\)/g,
    (_, equation) => `$${equation}$`
  )
  return inlineProcessedContent
}

================
File: components/mode-toggle.tsx
================
'use client'

import * as React from 'react'
import { Moon, Sun } from 'lucide-react'
import { useTheme } from 'next-themes'

import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger
} from '@/components/ui/dropdown-menu'

export function ModeToggle() {
  const { setTheme } = useTheme()

  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button variant="ghost" size="icon">
          <Sun className="h-[1.2rem] w-[1.2rem] rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
          <Moon className="absolute h-[1.2rem] w-[1.2rem] rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
          <span className="sr-only">Toggle theme</span>
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end">
        <DropdownMenuItem onClick={() => setTheme('light')}>
          Light
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('dark')}>
          Dark
        </DropdownMenuItem>
        <DropdownMenuItem onClick={() => setTheme('system')}>
          System
        </DropdownMenuItem>
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

================
File: components/model-selector.tsx
================
'use client'

import { getCookie, setCookie } from '@/lib/utils/cookies'
import { MessageSquare, Image as ImageIcon } from 'lucide-react'
import { useEffect, useState } from 'react'
import { Toggle } from './ui/toggle'
import { cn } from '@/lib/utils'

export function ModelSelector() {
  const [isImageMode, setIsImageMode] = useState(false)

  useEffect(() => {
    // Get saved mode
    const savedMode = getCookie('mode')
    if (savedMode) {
      setIsImageMode(savedMode === 'image')
    }
  }, [])

  const handleModeChange = (pressed: boolean) => {
    setIsImageMode(pressed)
    setCookie('mode', pressed ? 'image' : 'chat')
    // Reset search mode when switching to image mode
    if (pressed) {
      setCookie('search-mode', 'false')
    }
  }

  return (
    <Toggle
      aria-label="Toggle chat/image mode"
      pressed={isImageMode}
      onPressedChange={handleModeChange}
      variant="outline"
      className="gap-1 px-3 border border-input text-muted-foreground bg-background hover:bg-accent hover:text-accent-foreground rounded-full"
    >
      {isImageMode ? (
        <>
          <ImageIcon className="h-4 w-4" />
          <span className="text-xs">Image</span>
        </>
      ) : (
        <>
          <MessageSquare className="h-4 w-4" />
          <span className="text-xs">Chat</span>
        </>
      )}
    </Toggle>
  )
}

================
File: components/news-ticker.tsx
================
'use client'

import { motion, AnimatePresence } from 'framer-motion'
import { Brain, Cpu, Network, Sparkles } from 'lucide-react'
import { useEffect, useState } from 'react'

interface NewsItem {
  id: string
  title: string
  icon: 'brain' | 'cpu' | 'network' | 'sparkles'
  color: string
}

const newsItems: NewsItem[] = [
  {
    id: '1',
    title: 'AI models now process information 100x faster than human brains',
    icon: 'brain',
    color: 'text-blue-500'
  },
  {
    id: '2',
    title: 'Neural networks achieve breakthrough in pattern recognition',
    icon: 'network',
    color: 'text-purple-500'
  },
  {
    id: '3',
    title: 'Quantum AI processors break computational records',
    icon: 'cpu',
    color: 'text-green-500'
  },
  {
    id: '4',
    title: 'AI demonstrates human-like creativity in problem-solving',
    icon: 'sparkles',
    color: 'text-yellow-500'
  },
  {
    id: '5',
    title: 'Machine learning models predict climate patterns with 99% accuracy',
    icon: 'network',
    color: 'text-purple-500'
  },
  {
    id: '6',
    title: 'AI-powered quantum algorithms revolutionize data processing',
    icon: 'cpu',
    color: 'text-green-500'
  }
]

function getIcon(type: NewsItem['icon'], className: string) {
  switch (type) {
    case 'brain':
      return <Brain className={className} />
    case 'cpu':
      return <Cpu className={className} />
    case 'network':
      return <Network className={className} />
    case 'sparkles':
      return <Sparkles className={className} />
  }
}

export function NewsTicker() {
  const [currentIndex, setCurrentIndex] = useState(0)
  const [isPaused, setIsPaused] = useState(false)

  useEffect(() => {
    if (isPaused) return

    const timer = setInterval(() => {
      setCurrentIndex((prev) => (prev + 1) % newsItems.length)
    }, 4000) // Change news item every 4 seconds

    return () => clearInterval(timer)
  }, [isPaused])

  const currentItem = newsItems[currentIndex]

  return (
    <div 
      className="w-full overflow-hidden rounded-lg bg-background/50 backdrop-blur-sm"
      onMouseEnter={() => setIsPaused(true)}
      onMouseLeave={() => setIsPaused(false)}
    >
      <AnimatePresence mode="wait">
        <motion.div
          key={currentIndex}
          initial={{ opacity: 0, x: 20 }}
          animate={{ opacity: 1, x: 0 }}
          exit={{ opacity: 0, x: -20 }}
          transition={{ 
            duration: 0.5,
            ease: 'easeInOut'
          }}
          className="flex items-center gap-3 p-4"
        >
          <motion.div
            initial={{ scale: 0.8, rotate: -10 }}
            animate={{ scale: 1, rotate: 0 }}
            transition={{ 
              duration: 0.3,
              delay: 0.2
            }}
            className={currentItem.color}
          >
            {getIcon(currentItem.icon, 'h-5 w-5')}
          </motion.div>
          <motion.p 
            className="text-sm font-medium text-foreground/80 overflow-hidden text-ellipsis whitespace-nowrap"
            initial={{ y: 10 }}
            animate={{ y: 0 }}
            transition={{ 
              duration: 0.3,
              delay: 0.1
            }}
          >
            {currentItem.title}
          </motion.p>
        </motion.div>
      </AnimatePresence>
    </div>
  )
}

================
File: components/reasoning-answer-section.tsx
================
'use client'

import { CHAT_ID } from '@/lib/constants'
import { useChat } from 'ai/react'
import { Check, Lightbulb, Loader2 } from 'lucide-react'
import { CollapsibleMessage } from './collapsible-message'
import { DefaultSkeleton } from './default-skeleton'
import { BotMessage } from './message'
import { MessageActions } from './message-actions'
import { StatusIndicator } from './ui/status-indicator'

interface ReasoningAnswerContent {
  reasoning: string
  answer?: string
}

export interface ReasoningAnswerSectionProps {
  content: ReasoningAnswerContent
  isOpen: boolean
  onOpenChange: (open: boolean) => void
  chatId?: string
}

export function ReasoningAnswerSection({
  content,
  isOpen,
  onOpenChange,
  chatId
}: ReasoningAnswerSectionProps) {
  const enableShare = process.env.NEXT_PUBLIC_ENABLE_SHARE === 'true'
  const { isLoading } = useChat({ id: CHAT_ID })

  const reasoningHeader = (
    <div className="flex items-center gap-2 w-full">
      <Lightbulb size={16} />
      <div className="w-full flex-1 flex items-center justify-between">
        <span>{content.answer?.length === 0 ? 'Thinking...' : 'Thoughts'}</span>
        {content.answer?.length === 0 && isLoading ? (
          <Loader2
            size={16}
            className="animate-spin text-muted-foreground/50"
          />
        ) : (
          <StatusIndicator icon={Check} iconClassName="text-green-500">
            {content.reasoning.trim().length.toLocaleString()} chars
          </StatusIndicator>
        )}
      </div>
    </div>
  )

  if (!content) return <DefaultSkeleton />

  return (
    <div className="flex flex-col gap-4">
      <CollapsibleMessage
        role="assistant"
        isCollapsible={true}
        header={reasoningHeader}
        isOpen={isOpen}
        onOpenChange={onOpenChange}
        showBorder={true}
      >
        <BotMessage
          message={content.reasoning}
          className="prose-p:text-muted-foreground"
        />
      </CollapsibleMessage>

      <CollapsibleMessage
        role="assistant"
        isCollapsible={false}
        showIcon={false}
      >
        {content.answer && (
          <div className="flex flex-col gap-4">
            <BotMessage message={content.answer || ''} />
            <MessageActions
              message={content.answer || ''}
              chatId={chatId}
              enableShare={enableShare}
            />
          </div>
        )}
      </CollapsibleMessage>
    </div>
  )
}

================
File: components/related-questions.tsx
================
'use client'

import { CHAT_ID } from '@/lib/constants'
import { JSONValue } from 'ai'
import { useChat } from 'ai/react'
import { ArrowRight, Repeat2 } from 'lucide-react'
import React from 'react'
import { CollapsibleMessage } from './collapsible-message'
import { Button } from './ui/button'
import { Skeleton } from './ui/skeleton'

export interface RelatedQuestionsProps {
  annotations: JSONValue[]
  onQuerySelect: (query: string) => void
  isOpen: boolean
  onOpenChange: (open: boolean) => void
}

interface RelatedQuestionsAnnotation extends Record<string, JSONValue> {
  type: 'related-questions'
  data: {
    items: Array<{ query: string }>
  }
}

export const RelatedQuestions: React.FC<RelatedQuestionsProps> = ({
  annotations,
  onQuerySelect,
  isOpen,
  onOpenChange
}) => {
  const { isLoading } = useChat({
    id: CHAT_ID
  })

  if (!annotations) {
    return null
  }

  const lastRelatedQuestionsAnnotation = annotations[
    annotations.length - 1
  ] as RelatedQuestionsAnnotation

  const header = (
    <div className="flex items-center gap-1">
      <Repeat2 size={16} />
      <div>Related</div>
    </div>
  )

  const relatedQuestions = lastRelatedQuestionsAnnotation?.data
  if ((!relatedQuestions || !relatedQuestions.items) && !isLoading) {
    return null
  }

  if (relatedQuestions.items.length === 0 && isLoading) {
    return (
      <CollapsibleMessage
        role="assistant"
        isCollapsible={true}
        header={header}
        isOpen={isOpen}
        onOpenChange={onOpenChange}
      >
        <Skeleton className="w-full h-6" />
      </CollapsibleMessage>
    )
  }

  return (
    <CollapsibleMessage
      role="assistant"
      isCollapsible={true}
      header={header}
      isOpen={isOpen}
      onOpenChange={onOpenChange}
    >
      <div className="flex flex-wrap">
        {Array.isArray(relatedQuestions.items) ? (
          relatedQuestions.items
            ?.filter(item => item?.query !== '')
            .map((item, index) => (
              <div className="flex items-start w-full" key={index}>
                <ArrowRight className="h-4 w-4 mr-2 mt-1 flex-shrink-0 text-accent-foreground/50" />
                <Button
                  variant="link"
                  className="flex-1 justify-start px-0 py-1 h-fit font-semibold text-accent-foreground/50 whitespace-normal text-left"
                  type="submit"
                  name={'related_query'}
                  value={item?.query}
                  onClick={() => onQuerySelect(item?.query)}
                >
                  {item?.query}
                </Button>
              </div>
            ))
        ) : (
          <div>Not an array</div>
        )}
      </div>
    </CollapsibleMessage>
  )
}
export default RelatedQuestions

================
File: components/render-message.tsx
================
import { JSONValue, Message, ToolInvocation } from 'ai'
import { useMemo } from 'react'
import { AnswerSection } from './answer-section'
import { ReasoningAnswerSection } from './reasoning-answer-section'
import RelatedQuestions from './related-questions'
import { ToolSection } from './tool-section'
import { UserMessage } from './user-message'

interface RenderMessageProps {
  message: Message
  messageId: string
  getIsOpen: (id: string) => boolean
  onOpenChange: (id: string, open: boolean) => void
  onQuerySelect: (query: string) => void
  chatId?: string
}

export function RenderMessage({
  message,
  messageId,
  getIsOpen,
  onOpenChange,
  onQuerySelect,
  chatId
}: RenderMessageProps) {
  const relatedQuestions = useMemo(
    () =>
      message.annotations?.filter(
        annotation => (annotation as any)?.type === 'related-questions'
      ),
    [message.annotations]
  )

  // render for manual tool call
  const toolData = useMemo(() => {
    const toolAnnotations =
      (message.annotations?.filter(
        annotation =>
          (annotation as unknown as { type: string }).type === 'tool_call'
      ) as unknown as Array<{
        data: {
          args: string
          toolCallId: string
          toolName: string
          result?: string
          state: 'call' | 'result'
        }
      }>) || []

    // Group by toolCallId and prioritize 'result' state
    const toolDataMap = toolAnnotations.reduce((acc, annotation) => {
      const existing = acc.get(annotation.data.toolCallId)
      if (!existing || annotation.data.state === 'result') {
        acc.set(annotation.data.toolCallId, {
          ...annotation.data,
          args: annotation.data.args ? JSON.parse(annotation.data.args) : {},
          result:
            annotation.data.result && annotation.data.result !== 'undefined'
              ? JSON.parse(annotation.data.result)
              : undefined
        } as ToolInvocation)
      }
      return acc
    }, new Map<string, ToolInvocation>())

    return Array.from(toolDataMap.values())
  }, [message.annotations])

  if (message.role === 'user') {
    return <UserMessage message={message.content} />
  }

  if (message.toolInvocations?.length) {
    return (
      <>
        {message.toolInvocations.map(tool => (
          <ToolSection
            key={tool.toolCallId}
            tool={tool}
            isOpen={getIsOpen(messageId)}
            onOpenChange={open => onOpenChange(messageId, open)}
          />
        ))}
      </>
    )
  }

  return (
    <>
      {toolData.map(tool => (
        <ToolSection
          key={tool.toolCallId}
          tool={tool}
          isOpen={getIsOpen(tool.toolCallId)}
          onOpenChange={open => onOpenChange(tool.toolCallId, open)}
        />
      ))}
      {message.reasoning ? (
        <ReasoningAnswerSection
          content={{
            reasoning: message.reasoning,
            answer: message.content
          }}
          isOpen={getIsOpen(messageId)}
          onOpenChange={open => onOpenChange(messageId, open)}
          chatId={chatId}
        />
      ) : (
        <AnswerSection
          content={message.content}
          isOpen={getIsOpen(messageId)}
          onOpenChange={open => onOpenChange(messageId, open)}
          chatId={chatId}
        />
      )}
      {!message.toolInvocations &&
        relatedQuestions &&
        relatedQuestions.length > 0 && (
          <RelatedQuestions
            annotations={relatedQuestions as JSONValue[]}
            onQuerySelect={onQuerySelect}
            isOpen={getIsOpen(`${messageId}-related`)}
            onOpenChange={open => onOpenChange(`${messageId}-related`, open)}
          />
        )}
    </>
  )
}

================
File: components/retrieve-section.tsx
================
'use client'

import { Section, ToolArgsSection } from '@/components/section'
import { SearchResults } from '@/components/search-results'
import { SearchResults as SearchResultsType } from '@/lib/types'
import { ToolInvocation } from 'ai'
import { DefaultSkeleton } from './default-skeleton'
import { CollapsibleMessage } from './collapsible-message'

interface RetrieveSectionProps {
  tool: ToolInvocation
  isOpen: boolean
  onOpenChange: (open: boolean) => void
}

export function RetrieveSection({
  tool,
  isOpen,
  onOpenChange
}: RetrieveSectionProps) {
  const isLoading = tool.state === 'call'
  const data: SearchResultsType =
    tool.state === 'result' ? tool.result : undefined
  const url = tool.args.url as string | undefined

  const header = <ToolArgsSection tool="retrieve">{url}</ToolArgsSection>

  return (
    <CollapsibleMessage
      role="assistant"
      isCollapsible={true}
      header={header}
      isOpen={isOpen}
      onOpenChange={onOpenChange}
    >
      {!isLoading && data ? (
        <Section title="Sources">
          <SearchResults results={data.results} />
        </Section>
      ) : (
        <DefaultSkeleton />
      )}
    </CollapsibleMessage>
  )
}

export default RetrieveSection

================
File: components/search-mode-toggle.tsx
================
'use client'

import { cn } from '@/lib/utils'
import { getCookie, setCookie } from '@/lib/utils/cookies'
import { Globe } from 'lucide-react'
import { useEffect, useState } from 'react'
import { Toggle } from './ui/toggle'

export function SearchModeToggle() {
  const [isSearchMode, setIsSearchMode] = useState(true)
  const [isDisabled, setIsDisabled] = useState(false)

  useEffect(() => {
    // Check if we're in image mode
    const mode = getCookie('mode')
    setIsDisabled(mode === 'image')

    // Get saved search mode
    const savedMode = getCookie('search-mode')
    if (savedMode !== null) {
      setIsSearchMode(savedMode === 'true')
    }
  }, [])

  const handleSearchModeChange = (pressed: boolean) => {
    if (!isDisabled) {
      setIsSearchMode(pressed)
      setCookie('search-mode', pressed.toString())
    }
  }

  return (
    <Toggle
      aria-label="Toggle search mode"
      pressed={isSearchMode}
      onPressedChange={handleSearchModeChange}
      disabled={isDisabled}
      variant="outline"
      className={cn(
        'gap-1 px-3 border border-input text-muted-foreground bg-background',
        'data-[state=on]:bg-accent-blue',
        'data-[state=on]:text-accent-blue-foreground',
        'data-[state=on]:border-accent-blue-border',
        'hover:bg-accent hover:text-accent-foreground rounded-full',
        isDisabled && 'opacity-50 cursor-not-allowed hover:bg-background hover:text-muted-foreground'
      )}
    >
      <Globe className="size-4" />
      <span className="text-xs">Search</span>
    </Toggle>
  )
}

================
File: components/search-results-image.tsx
================
/* eslint-disable @next/next/no-img-element */
'use client'

import { Card, CardContent } from '@/components/ui/card'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from '@/components/ui/dialog'
import {
  Carousel,
  type CarouselApi,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious
} from '@/components/ui/carousel'
import { useEffect, useState } from 'react'
import { PlusCircle } from 'lucide-react'
import { SearchResultImage } from '@/lib/types'

interface SearchResultsImageSectionProps {
  images: SearchResultImage[]
  query?: string
}

export const SearchResultsImageSection: React.FC<
  SearchResultsImageSectionProps
> = ({ images, query }) => {
  const [api, setApi] = useState<CarouselApi>()
  const [current, setCurrent] = useState(0)
  const [count, setCount] = useState(0)
  const [selectedIndex, setSelectedIndex] = useState(0)

  // Update the current and count state when the carousel api is available
  useEffect(() => {
    if (!api) {
      return
    }

    setCount(api.scrollSnapList().length)
    setCurrent(api.selectedScrollSnap() + 1)

    api.on('select', () => {
      setCurrent(api.selectedScrollSnap() + 1)
    })
  }, [api])

  // Scroll to the selected index
  useEffect(() => {
    if (api) {
      api.scrollTo(selectedIndex, true)
    }
  }, [api, selectedIndex])

  if (!images || images.length === 0) {
    return <div className="text-muted-foreground">No images found</div>
  }

  // If enabled the include_images_description is true, the images will be an array of { url: string, description: string }
  // Otherwise, the images will be an array of strings
  let convertedImages: { url: string; description: string }[] = []
  if (typeof images[0] === 'string') {
    convertedImages = (images as string[]).map(image => ({
      url: image,
      description: ''
    }))
  } else {
    convertedImages = images as { url: string; description: string }[]
  }

  return (
    <div className="flex flex-wrap gap-2">
      {convertedImages.slice(0, 4).map((image, index) => (
        <Dialog key={index}>
          <DialogTrigger asChild>
            <div
              className="w-[calc(50%-0.5rem)] md:w-[calc(25%-0.5rem)] aspect-video cursor-pointer relative"
              onClick={() => setSelectedIndex(index)}
            >
              <Card className="flex-1 h-full">
                <CardContent className="p-2 h-full w-full">
                  {image ? (
                    <img
                      src={image.url}
                      alt={`Image ${index + 1}`}
                      className="h-full w-full object-cover"
                      onError={e =>
                        (e.currentTarget.src = '/images/placeholder-image.png')
                      }
                    />
                  ) : (
                    <div className="w-full h-full bg-muted animate-pulse" />
                  )}
                </CardContent>
              </Card>
              {index === 3 && images.length > 4 && (
                <div className="absolute inset-0 bg-black/30 rounded-md flex items-center justify-center text-white/80 text-sm">
                  <PlusCircle size={24} />
                </div>
              )}
            </div>
          </DialogTrigger>
          <DialogContent className="sm:max-w-3xl max-h-[80vh] overflow-auto">
            <DialogHeader>
              <DialogTitle>Search Images</DialogTitle>
              <DialogDescription className="text-sm">{query}</DialogDescription>
            </DialogHeader>
            <div className="py-4">
              <Carousel
                setApi={setApi}
                className="w-full bg-muted max-h-[60vh]"
              >
                <CarouselContent>
                  {convertedImages.map((img, idx) => (
                    <CarouselItem key={idx}>
                      <div className="p-1 flex items-center justify-center h-full">
                        <img
                          src={img.url}
                          alt={`Image ${idx + 1}`}
                          className="h-auto w-full object-contain max-h-[60vh]"
                          onError={e =>
                            (e.currentTarget.src =
                              '/images/placeholder-image.png')
                          }
                        />
                      </div>
                    </CarouselItem>
                  ))}
                </CarouselContent>
                <div className="absolute inset-8 flex items-center justify-between p-4">
                  <CarouselPrevious className="w-10 h-10 rounded-full shadow focus:outline-none">
                    <span className="sr-only">Previous</span>
                  </CarouselPrevious>
                  <CarouselNext className="w-10 h-10 rounded-full shadow focus:outline-none">
                    <span className="sr-only">Next</span>
                  </CarouselNext>
                </div>
              </Carousel>
              <div className="py-2 text-center text-sm text-muted-foreground">
                {current} of {count}
              </div>
            </div>
          </DialogContent>
        </Dialog>
      ))}
    </div>
  )
}

================
File: components/search-results.tsx
================
'use client'

import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar'
import { Button } from '@/components/ui/button'
import { Card, CardContent } from '@/components/ui/card'
import { SearchResultItem } from '@/lib/types'
import Link from 'next/link'
import { useState } from 'react'

export interface SearchResultsProps {
  results: SearchResultItem[]
}

export function SearchResults({ results }: SearchResultsProps) {
  // State to manage whether to display the results
  const [showAllResults, setShowAllResults] = useState(false)

  const handleViewMore = () => {
    setShowAllResults(true)
  }

  const displayedResults = showAllResults ? results : results.slice(0, 3)
  const additionalResultsCount = results.length > 3 ? results.length - 3 : 0
  const displayUrlName = (url: string) => {
    const hostname = new URL(url).hostname
    const parts = hostname.split('.')
    return parts.length > 2 ? parts.slice(1, -1).join('.') : parts[0]
  }

  return (
    <div className="flex flex-wrap">
      {displayedResults.map((result, index) => (
        <div className="w-1/2 md:w-1/4 p-1" key={index}>
          <Link href={result.url} passHref target="_blank">
            <Card className="flex-1 h-full">
              <CardContent className="p-2 flex flex-col justify-between h-full">
                <p className="text-xs line-clamp-2 min-h-[2rem]">
                  {result.title || result.content}
                </p>
                <div className="mt-2 flex items-center space-x-1">
                  <Avatar className="h-4 w-4">
                    <AvatarImage
                      src={`https://www.google.com/s2/favicons?domain=${
                        new URL(result.url).hostname
                      }`}
                      alt={new URL(result.url).hostname}
                    />
                    <AvatarFallback>
                      {new URL(result.url).hostname[0]}
                    </AvatarFallback>
                  </Avatar>
                  <div className="text-xs opacity-60 truncate">
                    {`${displayUrlName(result.url)} - ${index + 1}`}
                  </div>
                </div>
              </CardContent>
            </Card>
          </Link>
        </div>
      ))}
      {!showAllResults && additionalResultsCount > 0 && (
        <div className="w-1/2 md:w-1/4 p-1">
          <Card className="flex-1 flex h-full items-center justify-center">
            <CardContent className="p-2">
              <Button
                variant={'link'}
                className="text-muted-foreground"
                onClick={handleViewMore}
              >
                View {additionalResultsCount} more
              </Button>
            </CardContent>
          </Card>
        </div>
      )}
    </div>
  )
}

================
File: components/search-section.tsx
================
'use client'

import { CHAT_ID } from '@/lib/constants'
import type { SearchResults as TypeSearchResults } from '@/lib/types'
import { ToolInvocation } from 'ai'
import { useChat } from 'ai/react'
import { CollapsibleMessage } from './collapsible-message'
import { SearchSkeleton } from './default-skeleton'
import { SearchResults } from './search-results'
import { SearchResultsImageSection } from './search-results-image'
import { Section, ToolArgsSection } from './section'

interface SearchSectionProps {
  tool: ToolInvocation
  isOpen: boolean
  onOpenChange: (open: boolean) => void
}

export function SearchSection({
  tool,
  isOpen,
  onOpenChange
}: SearchSectionProps) {
  const { isLoading } = useChat({
    id: CHAT_ID
  })
  const isToolLoading = tool.state === 'call'
  const searchResults: TypeSearchResults =
    tool.state === 'result' ? tool.result : undefined
  const query = tool.args?.query as string | undefined
  const includeDomains = tool.args?.includeDomains as string[] | undefined
  const includeDomainsString = includeDomains
    ? ` [${includeDomains.join(', ')}]`
    : ''

  const header = (
    <ToolArgsSection
      tool="search"
      number={searchResults?.results?.length}
    >{`${query}${includeDomainsString}`}</ToolArgsSection>
  )

  return (
    <CollapsibleMessage
      role="assistant"
      isCollapsible={true}
      header={header}
      isOpen={isOpen}
      onOpenChange={onOpenChange}
    >
      {searchResults &&
        searchResults.images &&
        searchResults.images.length > 0 && (
          <Section>
            <SearchResultsImageSection
              images={searchResults.images}
              query={query}
            />
          </Section>
        )}
      {isLoading && isToolLoading ? (
        <SearchSkeleton />
      ) : searchResults?.results ? (
        <Section title="Sources">
          <SearchResults results={searchResults.results} />
        </Section>
      ) : null}
    </CollapsibleMessage>
  )
}

================
File: components/section.tsx
================
'use client'

import { cn } from '@/lib/utils'
import {
  BookCheck,
  Check,
  Film,
  Image,
  MessageCircleMore,
  Newspaper,
  Repeat2,
  Search
} from 'lucide-react'
import React from 'react'
import { ToolBadge } from './tool-badge'
import { Badge } from './ui/badge'
import { Separator } from './ui/separator'
import { StatusIndicator } from './ui/status-indicator'

type SectionProps = {
  children: React.ReactNode
  className?: string
  size?: 'sm' | 'md' | 'lg'
  title?: string
  separator?: boolean
}

export const Section: React.FC<SectionProps> = ({
  children,
  className,
  size = 'md',
  title,
  separator = false
}) => {
  const iconSize = 16
  const iconClassName = 'mr-1.5 text-muted-foreground'
  let icon: React.ReactNode
  switch (title) {
    case 'Images':
      // eslint-disable-next-line jsx-a11y/alt-text
      icon = <Image size={iconSize} className={iconClassName} />
      break
    case 'Videos':
      icon = <Film size={iconSize} className={iconClassName} />
      break
    case 'Sources':
      icon = <Newspaper size={iconSize} className={iconClassName} />
      break
    case 'Answer':
      icon = <BookCheck size={iconSize} className={iconClassName} />
      break
    case 'Related':
      icon = <Repeat2 size={iconSize} className={iconClassName} />
      break
    case 'Follow-up':
      icon = <MessageCircleMore size={iconSize} className={iconClassName} />
      break
    default:
      icon = <Search size={iconSize} className={iconClassName} />
  }

  return (
    <>
      {separator && <Separator className="my-2 bg-primary/10" />}
      <section
        className={cn(
          ` ${size === 'sm' ? 'py-1' : size === 'lg' ? 'py-4' : 'py-1'}`,
          className
        )}
      >
        {title && (
          <Badge
            variant="secondary"
            className="flex items-center leading-none w-fit my-1"
          >
            {icon}
            {title}
          </Badge>
        )}
        {children}
      </section>
    </>
  )
}

export function ToolArgsSection({
  children,
  tool,
  number
}: {
  children: React.ReactNode
  tool: string
  number?: number
}) {
  return (
    <Section size="sm" className="py-0 flex items-center justify-between">
      <ToolBadge tool={tool}>{children}</ToolBadge>
      {number && (
        <StatusIndicator icon={Check} iconClassName="text-green-500">
          {number} results
        </StatusIndicator>
      )}
    </Section>
  )
}

================
File: components/sidebar.tsx
================
import HistoryContainer from './history-container'

export async function Sidebar() {
  return (
    <div className="h-screen p-2 fixed top-0 right-0 flex-col justify-center pb-24 hidden lg:flex">
      <HistoryContainer location="sidebar" />
    </div>
  )
}

================
File: components/theme-provider.tsx
================
'use client'

import * as React from 'react'
import { ThemeProvider as NextThemesProvider } from 'next-themes'
import { type ThemeProviderProps } from 'next-themes/dist/types'

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}

================
File: components/tool-badge.tsx
================
import React from 'react'
import { Link, Search, Video } from 'lucide-react'
import { Badge } from './ui/badge'

type ToolBadgeProps = {
  tool: string
  children: React.ReactNode
  className?: string
}

export const ToolBadge: React.FC<ToolBadgeProps> = ({
  tool,
  children,
  className
}) => {
  const icon: Record<string, React.ReactNode> = {
    search: <Search size={14} />,
    retrieve: <Link size={14} />,
    video_search: <Video size={14} />
  }

  return (
    <Badge className={className} variant={'secondary'}>
      {icon[tool]}
      <span className="ml-1">{children}</span>
    </Badge>
  )
}

================
File: components/tool-section.tsx
================
'use client'

import { ToolInvocation } from 'ai'
import { SearchSection } from './search-section'
import { VideoSearchSection } from './video-search-section'
import RetrieveSection from './retrieve-section'

interface ToolSectionProps {
  tool: ToolInvocation
  isOpen: boolean
  onOpenChange: (open: boolean) => void
}

export function ToolSection({ tool, isOpen, onOpenChange }: ToolSectionProps) {
  switch (tool.toolName) {
    case 'search':
      return (
        <SearchSection
          tool={tool}
          isOpen={isOpen}
          onOpenChange={onOpenChange}
        />
      )
    case 'video_search':
      return (
        <VideoSearchSection
          tool={tool}
          isOpen={isOpen}
          onOpenChange={onOpenChange}
        />
      )
    case 'retrieve':
      return (
        <RetrieveSection
          tool={tool}
          isOpen={isOpen}
          onOpenChange={onOpenChange}
        />
      )
    default:
      return null
  }
}

================
File: components/trending-queries.tsx
================
'use client'

import { useCallback, useEffect, useRef, useState } from 'react'

interface TrendingQuery {
  id: string
  text: string
  category: string
}

interface TrendingQueriesProps {
  queries: TrendingQuery[]
  onQueryClick: (query: TrendingQuery) => void
}

interface CachedQueries {
  data: TrendingQuery[]
  timestamp: number
}

const CACHE_KEY = 'trendingQueries'
const CACHE_DURATION = 60 * 60 * 1000 // 1 hour
const SCROLL_INTERVAL = 16 // ~60fps

function getTrendingQueriesFromCache(): CachedQueries | null {
  try {
    const cached = localStorage.getItem(CACHE_KEY)
    if (!cached) return null

    const parsedCache = JSON.parse(cached) as CachedQueries
    const now = Date.now()
    const cacheAge = now - parsedCache.timestamp

    if (cacheAge > CACHE_DURATION) {
      localStorage.removeItem(CACHE_KEY)
      return null
    }

    return parsedCache
  } catch (error) {
    console.error('[Cache] Error reading trending queries:', error)
    return null
  }
}

function updateCache(data: TrendingQuery[]): void {
  try {
    localStorage.setItem(
      CACHE_KEY,
      JSON.stringify({
        data,
        timestamp: Date.now()
      })
    )
  } catch (error) {
    console.error('[Cache] Error updating trending queries:', error)
  }
}

export function TrendingQueries({ queries: initialQueries, onQueryClick }: TrendingQueriesProps) {
  const scrollRef = useRef<HTMLDivElement>(null)
  const [isPaused, setIsPaused] = useState(false)
  const animationFrameRef = useRef<number>()
  const lastScrollTime = useRef<number>(0)
  const [queries, setQueries] = useState<TrendingQuery[]>(initialQueries)

  const fetchTrendingQueries = useCallback(async () => {
    try {
      const cached = getTrendingQueriesFromCache()
      if (cached?.data) {
        setQueries(cached.data)
        return
      }

      const response = await fetch('/api/trending')
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`)
      }

      const data = await response.json()
      if (!Array.isArray(data)) {
        throw new Error('Invalid response format')
      }

      setQueries(data)
      updateCache(data)
    } catch (error) {
      console.error('[API] Error fetching trending queries:', error)
    }
  }, [])

  useEffect(() => {
    fetchTrendingQueries()
  }, [fetchTrendingQueries])

  useEffect(() => {
    const animate = () => {
      if (!scrollRef.current || isPaused) return

      const maxScroll = scrollRef.current.scrollWidth - scrollRef.current.clientWidth
      const currentScroll = scrollRef.current.scrollLeft
      const newScroll = currentScroll + 1

      scrollRef.current.scrollLeft = newScroll >= maxScroll ? 0 : newScroll
    }

    const intervalId = setInterval(animate, 30) // Smoother scrolling

    return () => clearInterval(intervalId)
  }, [isPaused])

  if (!queries.length) return null

  return (
    <div
      className="w-full overflow-hidden rounded-lg bg-background/50 backdrop-blur-sm"
      onMouseEnter={() => setIsPaused(true)}
      onMouseLeave={() => setIsPaused(false)}
      role="region"
      aria-label="Trending queries"
    >
      <div
        ref={scrollRef}
        className="flex gap-4 whitespace-nowrap py-4 px-2 transition-all duration-300"
      >
        {queries.map((query) => (
          <button
            key={query.id}
            onClick={() => onQueryClick(query)}
            className="inline-flex items-center px-4 py-2 rounded-full bg-muted/50 hover:bg-muted transition-colors duration-200 text-foreground/80 hover:text-foreground"
            aria-label={`Search for ${query.text}`}
          >
            <span className="text-sm font-medium">{query.text}</span>
          </button>
        ))}
        {/* Duplicate queries for smooth infinite scroll */}
        {queries.map((query) => (
          <button
            key={`${query.id}-duplicate`}
            onClick={() => onQueryClick(query)}
            className="inline-flex items-center px-4 py-2 rounded-full bg-muted/50 hover:bg-muted transition-colors duration-200 text-foreground/80 hover:text-foreground"
            aria-label={`Search for ${query.text}`}
            aria-hidden="true" // Hide duplicate buttons from screen readers
          >
            <span className="text-sm font-medium">{query.text}</span>
          </button>
        ))}
      </div>
    </div>
  )
}

================
File: components/user-message.tsx
================
import React from 'react'
import { CollapsibleMessage } from './collapsible-message'

type UserMessageProps = {
  message: string
}

export const UserMessage: React.FC<UserMessageProps> = ({ message }) => {
  return (
    <CollapsibleMessage role="user">
      <div className="flex-1 break-words w-full">{message}</div>
    </CollapsibleMessage>
  )
}

================
File: components/video-search-results.tsx
================
/* eslint-disable @next/next/no-img-element */
'use client'

import { useEffect, useRef, useState } from 'react'
import { AvatarImage, Avatar, AvatarFallback } from '@/components/ui/avatar'
import { CardContent, Card } from '@/components/ui/card'
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
  DialogTrigger
} from '@/components/ui/dialog'
import {
  Carousel,
  type CarouselApi,
  CarouselContent,
  CarouselItem,
  CarouselNext,
  CarouselPrevious
} from '@/components/ui/carousel'
import { SerperSearchResultItem, SerperSearchResults } from '@/lib/types'
import { PlusCircle } from 'lucide-react'

export interface VideoSearchResultsProps {
  results: SerperSearchResults
}

export function VideoSearchResults({ results }: VideoSearchResultsProps) {
  const [api, setApi] = useState<CarouselApi>()
  const [current, setCurrent] = useState(1)
  const [count, setCount] = useState(0)
  const [selectedIndex, setSelectedIndex] = useState(0)
  const videoRefs = useRef<(HTMLIFrameElement | null)[]>([])

  // filter out the videos that path is not /watch
  const videos = results.videos.filter((video: SerperSearchResultItem) => {
    return new URL(video.link).pathname === '/watch'
  })

  // Update the current and count state when the carousel api is available
  useEffect(() => {
    if (api) {
      setCount(api.scrollSnapList().length)
      setCurrent(api.selectedScrollSnap() + 1)

      api.on('select', () => {
        const newCurrent = api.selectedScrollSnap() + 1
        if (newCurrent !== current && videoRefs.current[current - 1]) {
          const prevVideo = videoRefs.current[current - 1]
          prevVideo?.contentWindow?.postMessage(
            '{"event":"command","func":"pauseVideo","args":""}',
            '*'
          )
        }
        setCurrent(newCurrent)
      })
    }
  }, [api, current])

  // Scroll to the selected index
  useEffect(() => {
    if (api) {
      api.scrollTo(selectedIndex, true)
    }
  }, [api, selectedIndex])

  if (!results.videos || results.videos.length === 0) {
    return <div className="text-muted-foreground">No videos found</div>
  }

  return (
    <div className="flex flex-wrap">
      {videos.slice(0, 4).map((result: SerperSearchResultItem, index: any) => (
        <Dialog key={index}>
          <DialogTrigger asChild>
            <div
              className="w-1/2 md:w-1/4 p-1 cursor-pointer relative"
              onClick={() => setSelectedIndex(index)}
            >
              <Card className="flex-1 min-h-40 ">
                <CardContent className="p-2">
                  <img
                    src={result.imageUrl}
                    alt={result.title}
                    className="w-full aspect-video mb-2"
                    onError={e =>
                      (e.currentTarget.src = '/images/placeholder-image.png')
                    }
                  />
                  <p className="text-xs line-clamp-2">{result.title}</p>
                  <div className="mt-2 flex items-center space-x-2">
                    <Avatar className="h-4 w-4">
                      <AvatarImage
                        src={`https://www.google.com/s2/favicons?domain=${
                          new URL(result.link).hostname
                        }`}
                        alt={result.channel}
                      />
                      <AvatarFallback>
                        {new URL(result.link).hostname[0]}
                      </AvatarFallback>
                    </Avatar>
                    <div className="text-xs opacity-60 truncate">
                      {new URL(result.link).hostname}
                    </div>
                  </div>
                </CardContent>
              </Card>
              {index === 3 && results.videos.length > 4 && (
                <div className="absolute inset-0 bg-black/30 rounded-md flex items-center justify-center text-white/80 text-sm">
                  <PlusCircle size={24} />
                </div>
              )}
            </div>
          </DialogTrigger>
          <DialogContent className="sm:max-w-3xl max-h-[80vh] overflow-auto">
            <DialogHeader>
              <DialogTitle>Search Videos</DialogTitle>
              <DialogDescription className="text-sm">
                {results.searchParameters.q}
              </DialogDescription>
            </DialogHeader>
            <div className="py-4">
              <Carousel
                setApi={setApi}
                className="w-full bg-muted max-h-[60vh]"
              >
                <CarouselContent>
                  {videos.map((video, idx) => {
                    const videoId = video.link.split('v=')[1]
                    return (
                      <CarouselItem key={idx}>
                        <div className="p-1 flex items-center justify-center h-full">
                          <iframe
                            ref={el => {
                              videoRefs.current[idx] = el
                            }}
                            src={`https://www.youtube.com/embed/${videoId}?enablejsapi=1`}
                            className="w-full aspect-video"
                            title={video.title}
                            allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
                            allowFullScreen
                          />
                        </div>
                      </CarouselItem>
                    )
                  })}
                </CarouselContent>
                <div className="absolute inset-8 flex items-center justify-between p-4 pointer-events-none">
                  <CarouselPrevious className="w-10 h-10 rounded-full shadow focus:outline-none pointer-events-auto">
                    <span className="sr-only">Previous</span>
                  </CarouselPrevious>
                  <CarouselNext className="w-10 h-10 rounded-full shadow focus:outline-none pointer-events-auto">
                    <span className="sr-only">Next</span>
                  </CarouselNext>
                </div>
              </Carousel>
              <div className="py-2">
                <div className="text-center text-sm text-muted-foreground">
                  {current} of {count}
                </div>
              </div>
            </div>
          </DialogContent>
        </Dialog>
      ))}
    </div>
  )
}

================
File: components/video-search-section.tsx
================
'use client'

import { DefaultSkeleton } from './default-skeleton'
import { Section, ToolArgsSection } from './section'
import type { SerperSearchResults } from '@/lib/types'
import { ToolInvocation } from 'ai'
import { VideoSearchResults } from './video-search-results'
import { CollapsibleMessage } from './collapsible-message'

interface VideoSearchSectionProps {
  tool: ToolInvocation
  isOpen: boolean
  onOpenChange: (open: boolean) => void
}

export function VideoSearchSection({
  tool,
  isOpen,
  onOpenChange
}: VideoSearchSectionProps) {
  const isLoading = tool.state === 'call'
  const searchResults: SerperSearchResults =
    tool.state === 'result' ? tool.result : undefined
  const query = tool.args.q as string | undefined

  const header = <ToolArgsSection tool="video_search">{query}</ToolArgsSection>

  return (
    <CollapsibleMessage
      role="assistant"
      isCollapsible={true}
      header={header}
      isOpen={isOpen}
      onOpenChange={onOpenChange}
    >
      {!isLoading && searchResults ? (
        <Section title="Videos">
          <VideoSearchResults results={searchResults} />
        </Section>
      ) : (
        <DefaultSkeleton />
      )}
    </CollapsibleMessage>
  )
}

================
File: docs/CONFIGURATION.md
================
# Configuration Guide

This guide covers the optional features and their configuration in Morphic.

## Table of Contents

- [Chat History Storage](#chat-history-storage)
- [Search Providers](#search-providers)
- [Additional AI Providers](#additional-ai-providers)
- [Other Features](#other-features)

## Chat History Storage

### Using Upstash Redis (Recommended for production)

Follow the detailed setup guide at [Building your own RAG chatbot with Upstash](https://upstash.com/blog/rag-chatbot-upstash#setting-up-upstash-redis)

1. Create a database at [Upstash Console](https://console.upstash.com/redis)
2. Navigate to the Details tab and find the "Connect your database" section
3. Copy the REST API credentials from the .env section
4. Configure your `.env.local`:

```bash
NEXT_PUBLIC_ENABLE_SAVE_CHAT_HISTORY=true
USE_LOCAL_REDIS=false
UPSTASH_REDIS_REST_URL=[YOUR_UPSTASH_REDIS_REST_URL]
UPSTASH_REDIS_REST_TOKEN=[YOUR_UPSTASH_REDIS_REST_TOKEN]
```

### Using Local Redis

1. Ensure Redis is installed and running locally
2. Configure your `.env.local`:

```bash
NEXT_PUBLIC_ENABLE_SAVE_CHAT_HISTORY=true
USE_LOCAL_REDIS=true
LOCAL_REDIS_URL=redis://localhost:6379
```

## Search Providers

### SearXNG Configuration

SearXNG can be used as an alternative search backend with advanced search capabilities.

#### Basic Setup

1. Set up SearXNG as your search provider:

```bash
SEARCH_API=searxng
SEARXNG_API_URL=http://localhost:8080
SEARXNG_SECRET=""  # generate with: openssl rand -base64 32
```

#### Docker Setup

1. Ensure you have Docker and Docker Compose installed
2. Two configuration files are provided in the root directory:
   - `searxng-settings.yml`: Contains main configuration for SearXNG
   - `searxng-limiter.toml`: Configures rate limiting and bot detection

#### Advanced Configuration

1. Configure environment variables in your `.env.local`:

```bash
# SearXNG Base Configuration
SEARXNG_PORT=8080
SEARXNG_BIND_ADDRESS=0.0.0.0
SEARXNG_IMAGE_PROXY=true

# Search Behavior
SEARXNG_DEFAULT_DEPTH=basic  # Set to 'basic' or 'advanced'
SEARXNG_MAX_RESULTS=50  # Maximum number of results to return
SEARXNG_ENGINES=google,bing,duckduckgo,wikipedia  # Comma-separated list of search engines
SEARXNG_TIME_RANGE=None  # Time range: day, week, month, year, or None
SEARXNG_SAFESEARCH=0  # 0: off, 1: moderate, 2: strict

# Rate Limiting
SEARXNG_LIMITER=false  # Enable to limit requests per IP
```

#### Advanced Search Features

- `SEARXNG_DEFAULT_DEPTH`: Controls search depth
  - `basic`: Standard search
  - `advanced`: Includes content crawling and relevance scoring
- `SEARXNG_MAX_RESULTS`: Maximum results to return
- `SEARXNG_CRAWL_MULTIPLIER`: In advanced mode, determines how many results to crawl
  - Example: If `MAX_RESULTS=10` and `CRAWL_MULTIPLIER=4`, up to 40 results will be crawled

#### Customizing SearXNG

You can modify `searxng-settings.yml` to:

- Enable/disable specific search engines
- Change UI settings
- Adjust server options

Example of disabling specific engines:

```yaml
engines:
  - name: wikidata
    disabled: true
```

For detailed configuration options, refer to the [SearXNG documentation](https://docs.searxng.org/admin/settings/settings.html#settings-yml)

#### Troubleshooting

- If specific search engines aren't working, try disabling them in `searxng-settings.yml`
- For rate limiting issues, adjust settings in `searxng-limiter.toml`
- Check Docker logs for potential configuration errors:

```bash
docker-compose logs searxng
```

## Additional AI Providers

### Google Generative AI

```bash
GOOGLE_GENERATIVE_AI_API_KEY=[YOUR_API_KEY]
```

### Anthropic

```bash
ANTHROPIC_API_KEY=[YOUR_API_KEY]
```

### Groq

```bash
GROQ_API_KEY=[YOUR_API_KEY]
```

### Ollama

```bash
OLLAMA_BASE_URL=http://localhost:11434
```

### Azure OpenAI

```bash
AZURE_API_KEY=[YOUR_API_KEY]
AZURE_RESOURCE_NAME=[YOUR_RESOURCE_NAME]
NEXT_PUBLIC_AZURE_DEPLOYMENT_NAME=[YOUR_DEPLOYMENT_NAME]
```

### DeepSeek

```
# DEEPSEEK_API_KEY=[YOUR_API_KEY]
```

### Fireworks

```
# FIREWORKS_API_KEY=[YOUR_API_KEY]
```

## Other Features

### Share Feature

```bash
NEXT_PUBLIC_ENABLE_SHARE=true
```

### Video Search

```bash
SERPER_API_KEY=[YOUR_API_KEY]
```

### Alternative Retrieve Tool

```bash
JINA_API_KEY=[YOUR_API_KEY]
```

================
File: lib/actions/chat.ts
================
'use server'

import { revalidatePath } from 'next/cache'
import { redirect } from 'next/navigation'
import { type Chat } from '@/lib/types'
import { getRedisClient, RedisWrapper } from '@/lib/redis/config'

async function getRedis(): Promise<RedisWrapper> {
  return await getRedisClient()
}

const CHAT_VERSION = 'v2'
function getUserChatKey(userId: string) {
  return `user:${CHAT_VERSION}:chat:${userId}`
}

export async function getChats(userId?: string | null) {
  if (!userId) {
    return []
  }

  try {
    const redis = await getRedis()
    const chats = await redis.zrange(getUserChatKey(userId), 0, -1, {
      rev: true
    })

    if (chats.length === 0) {
      return []
    }

    const results = await Promise.all(
      chats.map(async chatKey => {
        const chat = await redis.hgetall(chatKey)
        return chat
      })
    )

    return results
      .filter((result): result is Record<string, any> => {
        if (result === null || Object.keys(result).length === 0) {
          return false
        }
        return true
      })
      .map(chat => {
        const plainChat = { ...chat }
        if (typeof plainChat.messages === 'string') {
          try {
            plainChat.messages = JSON.parse(plainChat.messages)
          } catch (error) {
            plainChat.messages = []
          }
        }
        if (plainChat.createdAt && !(plainChat.createdAt instanceof Date)) {
          plainChat.createdAt = new Date(plainChat.createdAt)
        }
        return plainChat as Chat
      })
  } catch (error) {
    return []
  }
}

export async function getChat(id: string, userId: string = 'anonymous') {
  const redis = await getRedis()
  const chat = await redis.hgetall<Chat>(`chat:${id}`)

  if (!chat) {
    return null
  }

  // Parse the messages if they're stored as a string
  if (typeof chat.messages === 'string') {
    try {
      chat.messages = JSON.parse(chat.messages)
    } catch (error) {
      chat.messages = []
    }
  }

  // Ensure messages is always an array
  if (!Array.isArray(chat.messages)) {
    chat.messages = []
  }

  return chat
}

export async function clearChats(
  userId: string = 'anonymous'
): Promise<{ error?: string }> {
  const redis = await getRedis()
  const userChatKey = getUserChatKey(userId)
  const chats = await redis.zrange(userChatKey, 0, -1)
  if (!chats.length) {
    return { error: 'No chats to clear' }
  }
  const pipeline = redis.pipeline()

  for (const chat of chats) {
    pipeline.del(chat)
    pipeline.zrem(userChatKey, chat)
  }

  await pipeline.exec()

  revalidatePath('/')
  redirect('/')
}

export async function saveChat(chat: Chat, userId: string = 'anonymous') {
  try {
    const redis = await getRedis()
    const pipeline = redis.pipeline()

    const chatToSave = {
      ...chat,
      messages: JSON.stringify(chat.messages)
    }

    pipeline.hmset(`chat:${chat.id}`, chatToSave)
    pipeline.zadd(getUserChatKey(userId), Date.now(), `chat:${chat.id}`)

    const results = await pipeline.exec()

    return results
  } catch (error) {
    throw error
  }
}

export async function getSharedChat(id: string) {
  const redis = await getRedis()
  const chat = await redis.hgetall<Chat>(`chat:${id}`)

  if (!chat || !chat.sharePath) {
    return null
  }

  return chat
}

export async function shareChat(id: string, userId: string = 'anonymous') {
  const redis = await getRedis()
  const chat = await redis.hgetall<Chat>(`chat:${id}`)

  if (!chat || chat.userId !== userId) {
    return null
  }

  const payload = {
    ...chat,
    sharePath: `/share/${id}`
  }

  await redis.hmset(`chat:${id}`, payload)

  return payload
}

================
File: lib/agents/generate-related-questions.ts
================
import { relatedSchema } from '@/lib/schema/related'
import { CoreMessage, generateObject } from 'ai'
import {
  getModel,
  getToolCallModel,
  isToolCallSupported
} from '../utils/registry'

export async function generateRelatedQuestions(
  messages: CoreMessage[],
  model: string
) {
  const lastMessages = messages.slice(-1).map(message => ({
    ...message,
    role: 'user'
  })) as CoreMessage[]

  const supportedModel = isToolCallSupported(model)
  const currentModel = supportedModel
    ? getModel(model)
    : getToolCallModel(model)

  const result = await generateObject({
    model: currentModel,
    system: `As a professional web researcher, your task is to generate a set of three queries that explore the subject matter more deeply, building upon the initial query and the information uncovered in its search results.

    For instance, if the original query was "Starship's third test flight key milestones", your output should follow this format:

    Aim to create queries that progressively delve into more specific aspects, implications, or adjacent topics related to the initial query. The goal is to anticipate the user's potential information needs and guide them towards a more comprehensive understanding of the subject matter.
    Please match the language of the response to the user's language.`,
    messages: lastMessages,
    schema: relatedSchema
  })

  return result
}

================
File: lib/agents/manual-researcher.ts
================
import { CoreMessage, smoothStream, streamText } from 'ai'
import { getModel } from '../utils/registry'

const BASE_SYSTEM_PROMPT = `
Instructions:

You are a helpful AI assistant providing accurate information.

1. Provide comprehensive and detailed responses to user questions
2. Use markdown to structure your responses with appropriate headings
3. Acknowledge when you are uncertain about specific details
4. Focus on maintaining high accuracy in your responses
`

const SEARCH_ENABLED_PROMPT = `
${BASE_SYSTEM_PROMPT}

When analyzing search results:
1. Analyze the provided search results carefully to answer the user's question
2. Always cite sources using the [number](url) format, matching the order of search results
3. If multiple sources are relevant, include all of them using comma-separated citations
4. Only use information that has a URL available for citation
5. If the search results don't contain relevant information, acknowledge this and provide a general response

Citation Format:
[number](url)
`

const SEARCH_DISABLED_PROMPT = `
${BASE_SYSTEM_PROMPT}

Important:
1. Provide responses based on your general knowledge
2. Be clear about any limitations in your knowledge
3. Suggest when searching for additional information might be beneficial
`

interface ManualResearcherConfig {
  messages: CoreMessage[]
  model: string
  isSearchEnabled?: boolean
}

type ManualResearcherReturn = Parameters<typeof streamText>[0]

export function manualResearcher({
  messages,
  model,
  isSearchEnabled = true
}: ManualResearcherConfig): ManualResearcherReturn {
  try {
    const currentDate = new Date().toLocaleString()
    const systemPrompt = isSearchEnabled
      ? SEARCH_ENABLED_PROMPT
      : SEARCH_DISABLED_PROMPT

    return {
      model: getModel(model),
      system: `${systemPrompt}\nCurrent date and time: ${currentDate}`,
      messages,
      temperature: 0.6,
      topP: 1,
      topK: 40,
      experimental_transform: smoothStream({ chunking: 'word' })
    }
  } catch (error) {
    console.error('Error in manualResearcher:', error)
    throw error
  }
}

================
File: lib/agents/researcher.ts
================
import { CoreMessage, smoothStream, streamText } from 'ai'
import { retrieveTool } from '../tools/retrieve'
import { searchTool } from '../tools/search'
import { videoSearchTool } from '../tools/video-search'
import { getModel } from '../utils/registry'

const SYSTEM_PROMPT = `
Instructions:

You are a helpful AI assistant with access to real-time web search, content retrieval, and video search capabilities.
When asked a question, you should:
1. Search for relevant information using the search tool when needed
2. Use the retrieve tool to get detailed content from specific URLs
3. Use the video search tool when looking for video content
4. Analyze all search results to provide accurate, up-to-date information
5. Always cite sources using the [number](url) format, matching the order of search results. If multiple sources are relevant, include all of them, and comma separate them. Only use information that has a URL available for citation.
6. If results are not relevant or helpful, rely on your general knowledge
7. Provide comprehensive and detailed responses based on search results, ensuring thorough coverage of the user's question
8. Use markdown to structure your responses. Use headings to break up the content into sections.
9. **Use the retrieve tool only with user-provided URLs.**

Citation Format:
[number](url)
`

type ResearcherReturn = Parameters<typeof streamText>[0]

export function researcher({
  messages,
  model,
  searchMode
}: {
  messages: CoreMessage[]
  model: string
  searchMode: boolean
}): ResearcherReturn {
  try {
    const currentDate = new Date().toLocaleString()

    return {
      model: getModel(model),
      system: `${SYSTEM_PROMPT}\nCurrent date and time: ${currentDate}`,
      messages,
      tools: {
        search: searchTool,
        retrieve: retrieveTool,
        videoSearch: videoSearchTool
      },
      experimental_activeTools: searchMode
        ? ['search', 'retrieve', 'videoSearch']
        : [],
      maxSteps: searchMode ? 5 : 1,
      experimental_transform: smoothStream({ chunking: 'word' })
    }
  } catch (error) {
    console.error('Error in chatResearcher:', error)
    throw error
  }
}

================
File: lib/constants/index.ts
================
export const CHAT_ID = 'search' as const

================
File: lib/hooks/use-copy-to-clipboard.ts
================
'use client'

import { useState } from 'react'

export interface useCopyToClipboardProps {
  timeout?: number
}

export function useCopyToClipboard({
  timeout = 2000
}: useCopyToClipboardProps) {
  const [isCopied, setIsCopied] = useState<Boolean>(false)

  const copyToClipboard = (value: string) => {
    if (typeof window === 'undefined' || !navigator.clipboard?.writeText) {
      return
    }

    if (!value) {
      return
    }

    navigator.clipboard.writeText(value).then(() => {
      setIsCopied(true)

      setTimeout(() => {
        setIsCopied(false)
      }, timeout)
    })
  }

  return { isCopied, copyToClipboard }
}

================
File: lib/redis/config.ts
================
import { Redis } from '@upstash/redis'
import { createClient, RedisClientType } from 'redis'

export type RedisConfig = {
  useLocalRedis: boolean
  upstashRedisRestUrl?: string
  upstashRedisRestToken?: string
  localRedisUrl?: string
}

export const redisConfig: RedisConfig = {
  useLocalRedis: process.env.USE_LOCAL_REDIS === 'true',
  upstashRedisRestUrl: process.env.UPSTASH_REDIS_REST_URL,
  upstashRedisRestToken: process.env.UPSTASH_REDIS_REST_TOKEN,
  localRedisUrl: process.env.LOCAL_REDIS_URL || 'redis://localhost:6379'
}

let localRedisClient: RedisClientType | null = null
let redisWrapper: RedisWrapper | null = null

// Wrapper class for Redis client
export class RedisWrapper {
  private client: Redis | RedisClientType

  constructor(client: Redis | RedisClientType) {
    this.client = client
  }

  async zrange(
    key: string,
    start: number,
    stop: number,
    options?: { rev: boolean }
  ): Promise<string[]> {
    let result: string[]
    if (this.client instanceof Redis) {
      result = await this.client.zrange(key, start, stop, options)
    } else {
      const redisClient = this.client as RedisClientType
      if (options?.rev) {
        result = await redisClient.zRange(key, start, stop, { REV: true })
      } else {
        result = await redisClient.zRange(key, start, stop)
      }
    }
    return result
  }

  async hgetall<T extends Record<string, unknown>>(
    key: string
  ): Promise<T | null> {
    if (this.client instanceof Redis) {
      return this.client.hgetall(key) as Promise<T | null>
    } else {
      const result = await (this.client as RedisClientType).hGetAll(key)
      return Object.keys(result).length > 0 ? (result as T) : null
    }
  }

  pipeline() {
    return this.client instanceof Redis
      ? new UpstashPipelineWrapper(this.client.pipeline())
      : new LocalPipelineWrapper((this.client as RedisClientType).multi())
  }

  async hmset(key: string, value: Record<string, any>): Promise<'OK' | number> {
    if (this.client instanceof Redis) {
      return this.client.hmset(key, value)
    } else {
      return (this.client as RedisClientType).hSet(key, value)
    }
  }

  async zadd(
    key: string,
    score: number,
    member: string
  ): Promise<number | null> {
    if (this.client instanceof Redis) {
      return this.client.zadd(key, { score, member })
    } else {
      return (this.client as RedisClientType).zAdd(key, {
        score,
        value: member
      })
    }
  }

  async del(key: string): Promise<number> {
    if (this.client instanceof Redis) {
      return this.client.del(key)
    } else {
      return (this.client as RedisClientType).del(key)
    }
  }

  async zrem(key: string, member: string): Promise<number> {
    if (this.client instanceof Redis) {
      return this.client.zrem(key, member)
    } else {
      return (this.client as RedisClientType).zRem(key, member)
    }
  }

  async close(): Promise<void> {
    if (this.client instanceof Redis) {
      // Upstash Redis doesn't require explicit closing
      return
    } else {
      await (this.client as RedisClientType).quit()
    }
  }
}

// Wrapper class for Upstash Redis pipeline
class UpstashPipelineWrapper {
  private pipeline: ReturnType<Redis['pipeline']>

  constructor(pipeline: ReturnType<Redis['pipeline']>) {
    this.pipeline = pipeline
  }

  hgetall(key: string) {
    this.pipeline.hgetall(key)
    return this
  }

  del(key: string) {
    this.pipeline.del(key)
    return this
  }

  zrem(key: string, member: string) {
    this.pipeline.zrem(key, member)
    return this
  }

  hmset(key: string, value: Record<string, any>) {
    this.pipeline.hmset(key, value)
    return this
  }

  zadd(key: string, score: number, member: string) {
    this.pipeline.zadd(key, { score, member })
    return this
  }

  async exec() {
    try {
      return await this.pipeline.exec()
    } catch (error) {
      throw error
    }
  }
}

// Wrapper class for local Redis pipeline
class LocalPipelineWrapper {
  private pipeline: ReturnType<RedisClientType['multi']>

  constructor(pipeline: ReturnType<RedisClientType['multi']>) {
    this.pipeline = pipeline
  }

  hgetall(key: string) {
    this.pipeline.hGetAll(key)
    return this
  }

  del(key: string) {
    this.pipeline.del(key)
    return this
  }

  zrem(key: string, member: string) {
    this.pipeline.zRem(key, member)
    return this
  }

  hmset(key: string, value: Record<string, any>) {
    // Convert all values to strings
    const stringValue = Object.fromEntries(
      Object.entries(value).map(([k, v]) => [k, String(v)])
    )
    this.pipeline.hSet(key, stringValue)
    return this
  }

  zadd(key: string, score: number, member: string) {
    this.pipeline.zAdd(key, { score, value: member })
    return this
  }

  async exec() {
    try {
      return await this.pipeline.exec()
    } catch (error) {
      throw error
    }
  }
}

// Function to get a Redis client
export async function getRedisClient(): Promise<RedisWrapper> {
  if (redisWrapper) {
    return redisWrapper
  }

  if (redisConfig.useLocalRedis) {
    if (!localRedisClient) {
      const localRedisUrl =
        redisConfig.localRedisUrl || 'redis://localhost:6379'
      try {
        localRedisClient = createClient({ url: localRedisUrl })
        await localRedisClient.connect()
      } catch (error) {
        if (error instanceof Error) {
          if (error.message.includes('ECONNREFUSED')) {
            console.error(
              `Failed to connect to local Redis at ${localRedisUrl}: Connection refused. Is Redis running?`
            )
          } else if (error.message.includes('ETIMEDOUT')) {
            console.error(
              `Failed to connect to local Redis at ${localRedisUrl}: Connection timed out. Check your network or Redis server.`
            )
          } else if (error.message.includes('ENOTFOUND')) {
            console.error(
              `Failed to connect to local Redis at ${localRedisUrl}: Host not found. Check your Redis URL.`
            )
          } else {
            console.error(
              `Failed to connect to local Redis at ${localRedisUrl}:`,
              error.message
            )
          }
        } else {
          console.error(
            `An unexpected error occurred while connecting to local Redis at ${localRedisUrl}:`,
            error
          )
        }
        throw new Error(
          'Failed to connect to local Redis. Check your configuration and ensure Redis is running.'
        )
      }
    }
    redisWrapper = new RedisWrapper(localRedisClient)
  } else {
    if (
      !redisConfig.upstashRedisRestUrl ||
      !redisConfig.upstashRedisRestToken
    ) {
      throw new Error(
        'Upstash Redis configuration is missing. Please check your environment variables.'
      )
    }
    try {
      redisWrapper = new RedisWrapper(
        new Redis({
          url: redisConfig.upstashRedisRestUrl,
          token: redisConfig.upstashRedisRestToken
        })
      )
    } catch (error) {
      if (error instanceof Error) {
        if (error.message.includes('unauthorized')) {
          console.error(
            'Failed to connect to Upstash Redis: Unauthorized. Check your Upstash Redis token.'
          )
        } else if (error.message.includes('not found')) {
          console.error(
            'Failed to connect to Upstash Redis: URL not found. Check your Upstash Redis URL.'
          )
        } else {
          console.error('Failed to connect to Upstash Redis:', error.message)
        }
      } else {
        console.error(
          'An unexpected error occurred while connecting to Upstash Redis:',
          error
        )
      }
      throw new Error(
        'Failed to connect to Upstash Redis. Check your configuration and credentials.'
      )
    }
  }

  return redisWrapper
}

// Function to close the Redis connection
export async function closeRedisConnection(): Promise<void> {
  if (redisWrapper) {
    await redisWrapper.close()
    redisWrapper = null
  }
  if (localRedisClient) {
    await localRedisClient.quit()
    localRedisClient = null
  }
}

================
File: lib/schema/related.tsx
================
import { DeepPartial } from 'ai'
import { z } from 'zod'

export const relatedSchema = z.object({
  items: z
    .array(
      z.object({
        query: z.string()
      })
    )
    .length(3)
})
export type PartialRelated = DeepPartial<typeof relatedSchema>

export type Related = z.infer<typeof relatedSchema>

================
File: lib/schema/retrieve.tsx
================
import { DeepPartial } from 'ai'
import { z } from 'zod'

export const retrieveSchema = z.object({
  url: z.string().describe('The url to retrieve')
})

export type PartialInquiry = DeepPartial<typeof retrieveSchema>

================
File: lib/schema/search.tsx
================
import { DeepPartial } from 'ai'
import { z } from 'zod'

export const searchSchema = z.object({
  query: z.string().describe('The query to search for'),
  max_results: z
    .number()
    .describe('The maximum number of results to return. default is 20'),
  search_depth: z
    .string()
    .describe(
      'The depth of the search. Allowed values are "basic" or "advanced"'
    ),
  include_domains: z
    .array(z.string())
    .describe(
      'A list of domains to specifically include in the search results. Default is None, which includes all domains.'
    ),
  exclude_domains: z
    .array(z.string())
    .describe(
      "A list of domains to specifically exclude from the search results. Default is None, which doesn't exclude any domains."
    )
})

export type PartialInquiry = DeepPartial<typeof searchSchema>

================
File: lib/streaming/create-manual-tool-stream.ts
================
import {
  convertToCoreMessages,
  createDataStreamResponse,
  DataStreamWriter,
  JSONValue,
  streamText
} from 'ai'
import { manualResearcher } from '../agents/manual-researcher'
import { ExtendedCoreMessage } from '../types'
import { getMaxAllowedTokens, truncateMessages } from '../utils/context-window'
import { handleStreamFinish } from './handle-stream-finish'
import { executeToolCall } from './tool-execution'
import { BaseStreamConfig } from './types'

export function createManualToolStreamResponse(config: BaseStreamConfig) {
  return createDataStreamResponse({
    execute: async (dataStream: DataStreamWriter) => {
      const { messages, model, chatId, searchMode } = config
      try {
        const coreMessages = convertToCoreMessages(messages)
        const truncatedMessages = truncateMessages(
          coreMessages,
          getMaxAllowedTokens(model)
        )

        const { toolCallDataAnnotation, toolCallMessages } =
          await executeToolCall(
            truncatedMessages,
            dataStream,
            model,
            searchMode
          )

        const researcherConfig = manualResearcher({
          messages: [...truncatedMessages, ...toolCallMessages],
          model,
          isSearchEnabled: searchMode
        })

        const result = streamText({
          ...researcherConfig,
          onFinish: async result => {
            const annotations: ExtendedCoreMessage[] = [
              ...(toolCallDataAnnotation ? [toolCallDataAnnotation] : []),
              {
                role: 'data',
                content: {
                  type: 'reasoning',
                  data: result.reasoning
                } as JSONValue
              }
            ]

            await handleStreamFinish({
              responseMessages: result.response.messages,
              originalMessages: messages,
              model,
              chatId,
              dataStream,
              skipRelatedQuestions: true,
              annotations
            })
          }
        })

        result.mergeIntoDataStream(dataStream, {
          sendReasoning: true
        })
      } catch (error) {
        console.error('Stream execution error:', error)
      }
    },
    onError: error => {
      console.error('Stream error:', error)
      return error instanceof Error ? error.message : String(error)
    }
  })
}

================
File: lib/streaming/create-tool-calling-stream.ts
================
import { researcher } from '@/lib/agents/researcher'
import {
  convertToCoreMessages,
  createDataStreamResponse,
  DataStreamWriter,
  streamText
} from 'ai'
import { getMaxAllowedTokens, truncateMessages } from '../utils/context-window'
import { isReasoningModel } from '../utils/registry'
import { handleStreamFinish } from './handle-stream-finish'
import { BaseStreamConfig } from './types'

export function createToolCallingStreamResponse(config: BaseStreamConfig) {
  return createDataStreamResponse({
    execute: async (dataStream: DataStreamWriter) => {
      const { messages, model, chatId, searchMode } = config

      try {
        const coreMessages = convertToCoreMessages(messages)
        const truncatedMessages = truncateMessages(
          coreMessages,
          getMaxAllowedTokens(model)
        )

        let researcherConfig = await researcher({
          messages: truncatedMessages,
          model,
          searchMode
        })

        const result = streamText({
          ...researcherConfig,
          onFinish: async result => {
            await handleStreamFinish({
              responseMessages: result.response.messages,
              originalMessages: messages,
              model,
              chatId,
              dataStream,
              skipRelatedQuestions: isReasoningModel(model)
            })
          }
        })

        result.mergeIntoDataStream(dataStream)
      } catch (error) {
        console.error('Stream execution error:', error)
        throw error
      }
    },
    onError: error => {
      console.error('Stream error:', error)
      return error instanceof Error ? error.message : String(error)
    }
  })
}

================
File: lib/streaming/handle-stream-finish.ts
================
import { getChat, saveChat } from '@/lib/actions/chat'
import { generateRelatedQuestions } from '@/lib/agents/generate-related-questions'
import { ExtendedCoreMessage } from '@/lib/types'
import { convertToExtendedCoreMessages } from '@/lib/utils'
import { CoreMessage, DataStreamWriter, JSONValue, Message } from 'ai'

interface HandleStreamFinishParams {
  responseMessages: CoreMessage[]
  originalMessages: Message[]
  model: string
  chatId: string
  dataStream: DataStreamWriter
  skipRelatedQuestions?: boolean
  annotations?: ExtendedCoreMessage[]
}

export async function handleStreamFinish({
  responseMessages,
  originalMessages,
  model,
  chatId,
  dataStream,
  skipRelatedQuestions = false,
  annotations = []
}: HandleStreamFinishParams) {
  try {
    const extendedCoreMessages = convertToExtendedCoreMessages(originalMessages)
    let allAnnotations = [...annotations]

    if (!skipRelatedQuestions) {
      // Notify related questions loading
      const relatedQuestionsAnnotation: JSONValue = {
        type: 'related-questions',
        data: { items: [] }
      }
      dataStream.writeMessageAnnotation(relatedQuestionsAnnotation)

      // Generate related questions
      const relatedQuestions = await generateRelatedQuestions(
        responseMessages,
        model
      )

      // Create and add related questions annotation
      const updatedRelatedQuestionsAnnotation: ExtendedCoreMessage = {
        role: 'data',
        content: {
          type: 'related-questions',
          data: relatedQuestions.object
        } as JSONValue
      }

      dataStream.writeMessageAnnotation(
        updatedRelatedQuestionsAnnotation.content as JSONValue
      )
      allAnnotations.push(updatedRelatedQuestionsAnnotation)
    }

    // Create the message to save
    const generatedMessages = [
      ...extendedCoreMessages,
      ...responseMessages.slice(0, -1),
      ...allAnnotations, // Add annotations before the last message
      ...responseMessages.slice(-1)
    ] as ExtendedCoreMessage[]

    // Get the chat from the database if it exists, otherwise create a new one
    const savedChat = (await getChat(chatId)) ?? {
      messages: [],
      createdAt: new Date(),
      userId: 'anonymous',
      path: `/search/${chatId}`,
      title: originalMessages[0].content,
      id: chatId
    }

    // Save chat with complete response and related questions
    await saveChat({
      ...savedChat,
      messages: generatedMessages
    }).catch(error => {
      console.error('Failed to save chat:', error)
      throw new Error('Failed to save chat history')
    })
  } catch (error) {
    console.error('Error in handleStreamFinish:', error)
    throw error
  }
}

================
File: lib/streaming/parse-tool-call.ts
================
import { z } from 'zod'

export interface ToolCall<T = unknown> {
  tool: string
  parameters?: T
}

function getTagContent(xml: string, tag: string): string {
  const match = xml.match(new RegExp(`<${tag}>(.*?)</${tag}>`, 's'))
  return match ? match[1].trim() : ''
}

export function parseToolCallXml<T>(
  xml: string,
  schema?: z.ZodType<T>
): ToolCall<T> {
  const toolCallContent = getTagContent(xml, 'tool_call')
  if (!toolCallContent) {
    console.warn('No tool_call tag found in response')
    return { tool: '' }
  }

  const tool = getTagContent(toolCallContent, 'tool')
  if (!tool) return { tool: '' }

  const parametersXml = getTagContent(toolCallContent, 'parameters')
  if (!parametersXml || !schema) return { tool }

  try {
    // Extract all parameter values using tag names from schema
    const rawParameters: Record<string, string> = {}
    if (schema instanceof z.ZodObject) {
      Object.keys(schema.shape).forEach(key => {
        const value = getTagContent(parametersXml, key)
        if (value) rawParameters[key] = value
      })
    }

    // Parse parameters using the provided schema
    const parameters = schema.parse({
      ...rawParameters,
      // Convert comma-separated strings to arrays for array fields with default empty arrays
      include_domains:
        rawParameters.include_domains
          ?.split(',')
          .map(d => d.trim())
          .filter(Boolean) ?? [],
      exclude_domains:
        rawParameters.exclude_domains
          ?.split(',')
          .map(d => d.trim())
          .filter(Boolean) ?? [],
      // Convert string to number for numeric fields
      max_results: rawParameters.max_results
        ? parseInt(rawParameters.max_results, 10)
        : undefined
    })

    return { tool, parameters }
  } catch (error) {
    console.error('Failed to parse parameters:', error)
    return { tool }
  }
}

================
File: lib/streaming/tool-execution.ts
================
import {
  CoreMessage,
  DataStreamWriter,
  generateId,
  generateText,
  JSONValue
} from 'ai'
import { z } from 'zod'
import { searchSchema } from '../schema/search'
import { search } from '../tools/search'
import { ExtendedCoreMessage } from '../types'
import { getToolCallModel } from '../utils/registry'
import { parseToolCallXml } from './parse-tool-call'

interface ToolExecutionResult {
  toolCallDataAnnotation: ExtendedCoreMessage | null
  toolCallMessages: CoreMessage[]
}

export async function executeToolCall(
  coreMessages: CoreMessage[],
  dataStream: DataStreamWriter,
  model: string,
  searchMode: boolean
): Promise<ToolExecutionResult> {
  // If search mode is disabled, return empty tool call
  if (!searchMode) {
    return { toolCallDataAnnotation: null, toolCallMessages: [] }
  }

  const toolCallModel = getToolCallModel(model)
  // Convert Zod schema to string representation
  const searchSchemaString = Object.entries(searchSchema.shape)
    .map(([key, value]) => {
      const description = value.description
      const isOptional = value instanceof z.ZodOptional
      return `- ${key}${isOptional ? ' (optional)' : ''}: ${description}`
    })
    .join('\n')
  const defaultMaxResults = model?.includes('ollama') ? 5 : 20

  // Generate tool selection using XML format
  const toolSelectionResponse = await generateText({
    model: toolCallModel,
    system: `You are an intelligent assistant that analyzes conversations to select the most appropriate tools and their parameters.
            You excel at understanding context to determine when and how to use available tools, including crafting effective search queries.
            Current date: ${new Date().toISOString().split('T')[0]}

            Do not include any other text in your response.
            Respond in XML format with the following structure:
            <tool_call>
              <tool>tool_name</tool>
              <parameters>
                <query>search query text</query>
                <max_results>number - ${defaultMaxResults} by default</max_results>
                <search_depth>basic or advanced</search_depth>
                <include_domains>domain1,domain2</include_domains>
                <exclude_domains>domain1,domain2</exclude_domains>
              </parameters>
            </tool_call>

            Available tools: search

            Search parameters:
            ${searchSchemaString}

            If you don't need a tool, respond with <tool_call><tool></tool></tool_call>`,
    messages: coreMessages
  })

  // Parse the tool selection XML using the search schema
  const toolCall = parseToolCallXml(toolSelectionResponse.text, searchSchema)

  if (!toolCall || toolCall.tool === '') {
    return { toolCallDataAnnotation: null, toolCallMessages: [] }
  }

  const toolCallAnnotation = {
    type: 'tool_call',
    data: {
      state: 'call',
      toolCallId: `call_${generateId()}`,
      toolName: toolCall.tool,
      args: JSON.stringify(toolCall.parameters)
    }
  }
  dataStream.writeData(toolCallAnnotation)

  // Support for search tool only for now
  const searchResults = await search(
    toolCall.parameters?.query ?? '',
    toolCall.parameters?.max_results,
    toolCall.parameters?.search_depth as 'basic' | 'advanced',
    toolCall.parameters?.include_domains ?? [],
    toolCall.parameters?.exclude_domains ?? []
  )

  const updatedToolCallAnnotation = {
    ...toolCallAnnotation,
    data: {
      ...toolCallAnnotation.data,
      result: JSON.stringify(searchResults),
      state: 'result'
    }
  }
  dataStream.writeMessageAnnotation(updatedToolCallAnnotation)

  const toolCallDataAnnotation: ExtendedCoreMessage = {
    role: 'data',
    content: {
      type: 'tool_call',
      data: updatedToolCallAnnotation.data
    } as JSONValue
  }

  const toolCallMessages: CoreMessage[] = [
    {
      role: 'assistant',
      content: `Tool call result: ${JSON.stringify(searchResults)}`
    },
    {
      role: 'user',
      content: 'Now answer the user question.'
    }
  ]

  return { toolCallDataAnnotation, toolCallMessages }
}

================
File: lib/streaming/types.ts
================
import { Message } from 'ai'

export interface BaseStreamConfig {
  messages: Message[]
  model: string
  chatId: string
  searchMode: boolean
}

================
File: lib/tools/retrieve.ts
================
import { tool } from 'ai'
import { retrieveSchema } from '@/lib/schema/retrieve'
import { SearchResults as SearchResultsType } from '@/lib/types'

const CONTENT_CHARACTER_LIMIT = 10000

async function fetchJinaReaderData(
  url: string
): Promise<SearchResultsType | null> {
  try {
    const response = await fetch(`https://r.jina.ai/${url}`, {
      method: 'GET',
      headers: {
        Accept: 'application/json',
        'X-With-Generated-Alt': 'true'
      }
    })
    const json = await response.json()
    if (!json.data || json.data.length === 0) {
      return null
    }

    const content = json.data.content.slice(0, CONTENT_CHARACTER_LIMIT)

    return {
      results: [
        {
          title: json.data.title,
          content,
          url: json.data.url
        }
      ],
      query: '',
      images: []
    }
  } catch (error) {
    console.error('Jina Reader API error:', error)
    return null
  }
}

async function fetchTavilyExtractData(
  url: string
): Promise<SearchResultsType | null> {
  try {
    const apiKey = process.env.TAVILY_API_KEY
    const response = await fetch('https://api.tavily.com/extract', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ api_key: apiKey, urls: [url] })
    })
    const json = await response.json()
    if (!json.results || json.results.length === 0) {
      return null
    }

    const result = json.results[0]
    const content = result.raw_content.slice(0, CONTENT_CHARACTER_LIMIT)

    return {
      results: [
        {
          title: content.slice(0, 100),
          content,
          url: result.url
        }
      ],
      query: '',
      images: []
    }
  } catch (error) {
    console.error('Tavily Extract API error:', error)
    return null
  }
}

export const retrieveTool = tool({
  description: 'Retrieve content from the web',
  parameters: retrieveSchema,
  execute: async ({ url }) => {
    let results: SearchResultsType | null

    // Use Jina if the API key is set, otherwise use Tavily
    const useJina = process.env.JINA_API_KEY
    if (useJina) {
      results = await fetchJinaReaderData(url)
    } else {
      results = await fetchTavilyExtractData(url)
    }

    if (!results) {
      return null
    }

    return results
  }
})

================
File: lib/tools/search.ts
================
import { searchSchema } from '@/lib/schema/search'
import {
  SearchResultImage,
  SearchResultItem,
  SearchResults,
  SearXNGResponse,
  SearXNGResult
} from '@/lib/types'
import { sanitizeUrl } from '@/lib/utils'
import { tool } from 'ai'
import Exa from 'exa-js'

export const searchTool = tool({
  description: 'Search the web for information',
  parameters: searchSchema,
  execute: async ({
    query,
    max_results,
    search_depth,
    include_domains,
    exclude_domains
  }) => {
    // Tavily API requires a minimum of 5 characters in the query
    const filledQuery =
      query.length < 5 ? query + ' '.repeat(5 - query.length) : query
    let searchResult: SearchResults
    const searchAPI =
      (process.env.SEARCH_API as 'tavily' | 'exa' | 'searxng') || 'tavily'

    const effectiveSearchDepth =
      searchAPI === 'searxng' &&
      process.env.SEARXNG_DEFAULT_DEPTH === 'advanced'
        ? 'advanced'
        : search_depth || 'basic'

    console.log(
      `Using search API: ${searchAPI}, Search Depth: ${effectiveSearchDepth}`
    )

    try {
      if (searchAPI === 'searxng' && effectiveSearchDepth === 'advanced') {
        // API route for advanced SearXNG search
        const baseUrl =
          process.env.NEXT_PUBLIC_BASE_URL || 'http://localhost:3000'
        const response = await fetch(`${baseUrl}/api/advanced-search`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({
            query: filledQuery,
            maxResults: max_results,
            searchDepth: effectiveSearchDepth,
            includeDomains: include_domains,
            excludeDomains: exclude_domains
          })
        })
        if (!response.ok) {
          throw new Error(
            `Advanced search API error: ${response.status} ${response.statusText}`
          )
        }
        searchResult = await response.json()
      } else {
        searchResult = await (searchAPI === 'tavily'
          ? tavilySearch
          : searchAPI === 'exa'
          ? exaSearch
          : searxngSearch)(
          filledQuery,
          max_results,
          effectiveSearchDepth === 'advanced' ? 'advanced' : 'basic',
          include_domains,
          exclude_domains
        )
      }
    } catch (error) {
      console.error('Search API error:', error)
      searchResult = {
        results: [],
        query: filledQuery,
        images: [],
        number_of_results: 0
      }
    }

    console.log('completed search')
    return searchResult
  }
})

export async function search(
  query: string,
  maxResults: number = 10,
  searchDepth: 'basic' | 'advanced' = 'basic',
  includeDomains: string[] = [],
  excludeDomains: string[] = []
): Promise<SearchResults> {
  return searchTool.execute(
    {
      query,
      max_results: maxResults,
      search_depth: searchDepth,
      include_domains: includeDomains,
      exclude_domains: excludeDomains
    },
    {
      toolCallId: 'search',
      messages: []
    }
  )
}

async function tavilySearch(
  query: string,
  maxResults: number = 10,
  searchDepth: 'basic' | 'advanced' = 'basic',
  includeDomains: string[] = [],
  excludeDomains: string[] = []
): Promise<SearchResults> {
  const apiKey = process.env.TAVILY_API_KEY
  if (!apiKey) {
    throw new Error('TAVILY_API_KEY is not set in the environment variables')
  }
  const includeImageDescriptions = true
  const response = await fetch('https://api.tavily.com/search', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json'
    },
    body: JSON.stringify({
      api_key: apiKey,
      query,
      max_results: Math.max(maxResults, 5),
      search_depth: searchDepth,
      include_images: true,
      include_image_descriptions: includeImageDescriptions,
      include_answers: true,
      include_domains: includeDomains,
      exclude_domains: excludeDomains
    })
  })

  if (!response.ok) {
    throw new Error(
      `Tavily API error: ${response.status} ${response.statusText}`
    )
  }

  const data = await response.json()
  const processedImages = includeImageDescriptions
    ? data.images
        .map(({ url, description }: { url: string; description: string }) => ({
          url: sanitizeUrl(url),
          description
        }))
        .filter(
          (
            image: SearchResultImage
          ): image is { url: string; description: string } =>
            typeof image === 'object' &&
            image.description !== undefined &&
            image.description !== ''
        )
    : data.images.map((url: string) => sanitizeUrl(url))

  return {
    ...data,
    images: processedImages
  }
}

async function exaSearch(
  query: string,
  maxResults: number = 10,
  _searchDepth: string,
  includeDomains: string[] = [],
  excludeDomains: string[] = []
): Promise<SearchResults> {
  const apiKey = process.env.EXA_API_KEY
  if (!apiKey) {
    throw new Error('EXA_API_KEY is not set in the environment variables')
  }

  const exa = new Exa(apiKey)
  const exaResults = await exa.searchAndContents(query, {
    highlights: true,
    numResults: maxResults,
    includeDomains,
    excludeDomains
  })

  return {
    results: exaResults.results.map((result: any) => ({
      title: result.title,
      url: result.url,
      content: result.highlight || result.text
    })),
    query,
    images: [],
    number_of_results: exaResults.results.length
  }
}

async function searxngSearch(
  query: string,
  maxResults: number = 10,
  searchDepth: string,
  includeDomains: string[] = [],
  excludeDomains: string[] = []
): Promise<SearchResults> {
  const apiUrl = process.env.SEARXNG_API_URL
  if (!apiUrl) {
    throw new Error('SEARXNG_API_URL is not set in the environment variables')
  }

  try {
    // Construct the URL with query parameters
    const url = new URL(`${apiUrl}/search`)
    url.searchParams.append('q', query)
    url.searchParams.append('format', 'json')
    url.searchParams.append('categories', 'general,images')

    // Apply search depth settings
    if (searchDepth === 'advanced') {
      url.searchParams.append('time_range', '')
      url.searchParams.append('safesearch', '0')
      url.searchParams.append('engines', 'google,bing,duckduckgo,wikipedia')
    } else {
      url.searchParams.append('time_range', 'year')
      url.searchParams.append('safesearch', '1')
      url.searchParams.append('engines', 'google,bing')
    }

    // Fetch results from SearXNG
    const response = await fetch(url.toString(), {
      method: 'GET',
      headers: {
        Accept: 'application/json'
      }
    })

    if (!response.ok) {
      const errorText = await response.text()
      console.error(`SearXNG API error (${response.status}):`, errorText)
      throw new Error(
        `SearXNG API error: ${response.status} ${response.statusText} - ${errorText}`
      )
    }

    const data: SearXNGResponse = await response.json()

    // Separate general results and image results, and limit to maxResults
    const generalResults = data.results
      .filter(result => !result.img_src)
      .slice(0, maxResults)
    const imageResults = data.results
      .filter(result => result.img_src)
      .slice(0, maxResults)

    // Format the results to match the expected SearchResults structure
    return {
      results: generalResults.map(
        (result: SearXNGResult): SearchResultItem => ({
          title: result.title,
          url: result.url,
          content: result.content
        })
      ),
      query: data.query,
      images: imageResults
        .map(result => {
          const imgSrc = result.img_src || ''
          return imgSrc.startsWith('http') ? imgSrc : `${apiUrl}${imgSrc}`
        })
        .filter(Boolean),
      number_of_results: data.number_of_results
    }
  } catch (error) {
    console.error('SearXNG API error:', error)
    throw error
  }
}

================
File: lib/tools/video-search.ts
================
import { tool } from 'ai'
import { searchSchema } from '@/lib/schema/search'

export const videoSearchTool = tool({
  description: 'Search for videos from YouTube',
  parameters: searchSchema,
  execute: async ({ query }) => {
    try {
      const response = await fetch('https://google.serper.dev/videos', {
        method: 'POST',
        headers: {
          'X-API-KEY': process.env.SERPER_API_KEY || '',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({ q: query })
      })

      if (!response.ok) {
        throw new Error('Network response was not ok')
      }

      return await response.json()
    } catch (error) {
      console.error('Video Search API error:', error)
      return null
    }
  }
})

================
File: lib/types/index.ts
================
import { CoreMessage, JSONValue, Message } from 'ai'

export type SearchResults = {
  images: SearchResultImage[]
  results: SearchResultItem[]
  number_of_results?: number
  query: string
}

// If enabled the include_images_description is true, the images will be an array of { url: string, description: string }
// Otherwise, the images will be an array of strings
export type SearchResultImage =
  | string
  | {
      url: string
      description: string
      number_of_results?: number
    }

export type ExaSearchResults = {
  results: ExaSearchResultItem[]
}

export type SerperSearchResults = {
  searchParameters: {
    q: string
    type: string
    engine: string
  }
  videos: SerperSearchResultItem[]
}

export type SearchResultItem = {
  title: string
  url: string
  content: string
}

export type ExaSearchResultItem = {
  score: number
  title: string
  id: string
  url: string
  publishedDate: Date
  author: string
}

export type SerperSearchResultItem = {
  title: string
  link: string
  snippet: string
  imageUrl: string
  duration: string
  source: string
  channel: string
  date: string
  position: number
}

export interface Chat extends Record<string, any> {
  id: string
  title: string
  createdAt: Date
  userId: string
  path: string
  messages: ExtendedCoreMessage[] // Note: Changed from AIMessage to ExtendedCoreMessage
  sharePath?: string
}

// ExtendedCoreMessage for saveing annotations
export type ExtendedCoreMessage = Omit<CoreMessage, 'role' | 'content'> & {
  role: CoreMessage['role'] | 'data'
  content: CoreMessage['content'] | JSONValue
}

export type AIMessage = {
  role: 'user' | 'assistant' | 'system' | 'function' | 'data' | 'tool'
  content: string
  id: string
  name?: string
  type?:
    | 'answer'
    | 'related'
    | 'skip'
    | 'inquiry'
    | 'input'
    | 'input_related'
    | 'tool'
    | 'followup'
    | 'end'
}

export interface SearXNGResult {
  title: string
  url: string
  content: string
  img_src?: string
  publishedDate?: string
  score?: number
}

export interface SearXNGResponse {
  query: string
  number_of_results: number
  results: SearXNGResult[]
}

export type SearXNGImageResult = string

export type SearXNGSearchResults = {
  images: SearXNGImageResult[]
  results: SearchResultItem[]
  number_of_results?: number
  query: string
}

================
File: lib/types/models.ts
================
export interface Model {
  id: string
  name: string
  provider: string
  providerId: string
}

export const models: Model[] = [
  {
    id: 'claude-3-5-sonnet-latest',
    name: 'Claude 3.5 Sonnet',
    provider: 'Anthropic',
    providerId: 'anthropic'
  },
  {
    id: 'claude-3-5-haiku-20241022',
    name: 'Claude 3.5 Haiku',
    provider: 'Anthropic',
    providerId: 'anthropic'
  },
  {
    id: process.env.NEXT_PUBLIC_AZURE_DEPLOYMENT_NAME || 'undefined',
    name: process.env.NEXT_PUBLIC_AZURE_DEPLOYMENT_NAME || 'Undefined',
    provider: 'Azure',
    providerId: 'azure'
  },
  {
    id: 'accounts/fireworks/models/deepseek-r1',
    name: 'DeepSeek R1',
    provider: 'Fireworks',
    providerId: 'fireworks'
  },
  {
    id: 'deepseek-reasoner',
    name: 'DeepSeek R1',
    provider: 'DeepSeek',
    providerId: 'deepseek'
  },
  {
    id: 'deepseek-chat',
    name: 'DeepSeek V3',
    provider: 'DeepSeek',
    providerId: 'deepseek'
  },
  {
    id: 'gemini-1.5-pro-002',
    name: 'Gemini 1.5 Pro',
    provider: 'Google Generative AI',
    providerId: 'google'
  },
  {
    id: 'gemini-2.0-flash-exp',
    name: 'Gemini 2.0 Flash (Experimental)',
    provider: 'Google Generative AI',
    providerId: 'google'
  },
  {
    id: 'deepseek-r1-distill-llama-70b',
    name: 'DeepSeek R1 Distill Llama 70B',
    provider: 'Groq',
    providerId: 'groq'
  },
  {
    id: process.env.NEXT_PUBLIC_OLLAMA_MODEL || 'deepseek-r1',
    name: process.env.NEXT_PUBLIC_OLLAMA_MODEL || 'DeepSeek R1',
    provider: 'Ollama',
    providerId: 'ollama'
  },
  {
    id: 'o3-mini',
    name: 'o3-mini',
    provider: 'OpenAI',
    providerId: 'openai'
  },
  {
    id: 'gpt-4o',
    name: 'GPT-4o',
    provider: 'OpenAI',
    providerId: 'openai'
  },
  {
    id: 'gpt-4o-mini',
    name: 'GPT-4o mini',
    provider: 'OpenAI',
    providerId: 'openai'
  },
  {
    id: process.env.NEXT_PUBLIC_OPENAI_COMPATIBLE_MODEL || 'undefined',
    name: process.env.NEXT_PUBLIC_OPENAI_COMPATIBLE_MODEL || 'Undefined',
    provider: 'OpenAI Compatible',
    providerId: 'openai-compatible'
  }
]

================
File: lib/utils/context-window.ts
================
import { CoreMessage } from 'ai'

const DEFAULT_CONTEXT_WINDOW = 128_000
const DEFAULT_RESERVE_TOKENS = 30_000

export function getMaxAllowedTokens(modelId: string): number {
  let contextWindow: number
  let reserveTokens: number

  if (modelId.includes('deepseek')) {
    contextWindow = 64_000
    reserveTokens = 27_000
  } else if (modelId.includes('claude')) {
    contextWindow = 200_000
    reserveTokens = 40_000
  } else {
    contextWindow = DEFAULT_CONTEXT_WINDOW
    reserveTokens = DEFAULT_RESERVE_TOKENS
  }

  return contextWindow - reserveTokens
}

export function truncateMessages(
  messages: CoreMessage[],
  maxTokens: number
): CoreMessage[] {
  let totalTokens = 0
  const tempMessages: CoreMessage[] = []

  for (let i = messages.length - 1; i >= 0; i--) {
    const message = messages[i]
    const messageTokens = message.content?.length || 0

    if (totalTokens + messageTokens <= maxTokens) {
      tempMessages.push(message)
      totalTokens += messageTokens
    } else {
      break
    }
  }

  const orderedMessages = tempMessages.reverse()

  while (orderedMessages.length > 0 && orderedMessages[0].role !== 'user') {
    orderedMessages.shift()
  }

  return orderedMessages
}

================
File: lib/utils/cookies.ts
================
export function setCookie(name: string, value: string, days = 30) {
  const date = new Date()
  date.setTime(date.getTime() + days * 24 * 60 * 60 * 1000)
  const expires = `expires=${date.toUTCString()}`
  document.cookie = `${name}=${value};${expires};path=/`
}

export function getCookie(name: string): string | null {
  const cookies = document.cookie.split(';')
  for (const cookie of cookies) {
    const [cookieName, cookieValue] = cookie.trim().split('=')
    if (cookieName === name) {
      return cookieValue
    }
  }
  return null
}

export function deleteCookie(name: string) {
  document.cookie = `${name}=;expires=Thu, 01 Jan 1970 00:00:00 GMT;path=/`
}

================
File: lib/utils/index.ts
================
import { type Model } from '@/lib/types/models'
import {
  convertToCoreMessages,
  CoreMessage,
  CoreToolMessage,
  generateId,
  JSONValue,
  Message,
  ToolInvocation
} from 'ai'
import { type ClassValue, clsx } from 'clsx'
import { twMerge } from 'tailwind-merge'
import { ExtendedCoreMessage } from '../types'
export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Takes an array of AIMessage and modifies each message where the role is 'tool'.
 * Changes the role to 'assistant' and converts the content to a JSON string.
 * Returns the modified messages as an array of CoreMessage.
 *
 * @param aiMessages - Array of AIMessage
 * @returns modifiedMessages - Array of modified messages
 */
export function transformToolMessages(messages: CoreMessage[]): CoreMessage[] {
  return messages.map(message =>
    message.role === 'tool'
      ? {
          ...message,
          role: 'assistant',
          content: JSON.stringify(message.content),
          type: 'tool'
        }
      : message
  ) as CoreMessage[]
}

/**
 * Sanitizes a URL by replacing spaces with '%20'
 * @param url - The URL to sanitize
 * @returns The sanitized URL
 */
export function sanitizeUrl(url: string): string {
  return url.replace(/\s+/g, '%20')
}

export function createModelId(model: Model): string {
  return `${model.providerId}:${model.id}`
}

export function getDefaultModelId(models: Model[]): string {
  if (!models.length) {
    throw new Error('No models available')
  }
  return createModelId(models[0])
}

function addToolMessageToChat({
  toolMessage,
  messages
}: {
  toolMessage: CoreToolMessage
  messages: Array<Message>
}): Array<Message> {
  return messages.map(message => {
    if (message.toolInvocations) {
      return {
        ...message,
        toolInvocations: message.toolInvocations.map(toolInvocation => {
          const toolResult = toolMessage.content.find(
            tool => tool.toolCallId === toolInvocation.toolCallId
          )

          if (toolResult) {
            return {
              ...toolInvocation,
              state: 'result',
              result: toolResult.result
            }
          }

          return toolInvocation
        })
      }
    }

    return message
  })
}

export function convertToUIMessages(
  messages: Array<ExtendedCoreMessage>
): Array<Message> {
  let pendingAnnotations: JSONValue[] = []
  let pendingReasoning: string | undefined

  return messages.reduce((chatMessages: Array<Message>, message) => {
    // Handle tool messages
    if (message.role === 'tool') {
      return addToolMessageToChat({
        toolMessage: message as CoreToolMessage,
        messages: chatMessages
      })
    }

    // Store data message content for next assistant message
    if (message.role === 'data') {
      if (
        message.content !== null &&
        message.content !== undefined &&
        typeof message.content !== 'string' &&
        typeof message.content !== 'number' &&
        typeof message.content !== 'boolean'
      ) {
        const content = message.content as JSONValue
        if (
          content &&
          typeof content === 'object' &&
          'type' in content &&
          'data' in content
        ) {
          if (content.type === 'reasoning') {
            pendingReasoning = content.data as string
          } else {
            pendingAnnotations.push(content)
          }
        }
      }
      return chatMessages
    }

    let textContent = ''
    let toolInvocations: Array<ToolInvocation> = []

    // Handle message content
    if (message.content) {
      if (typeof message.content === 'string') {
        textContent = message.content
      } else if (Array.isArray(message.content)) {
        for (const content of message.content) {
          if (content && typeof content === 'object' && 'type' in content) {
            if (content.type === 'text' && 'text' in content) {
              textContent += content.text
            } else if (
              content.type === 'tool-call' &&
              'toolCallId' in content &&
              'toolName' in content &&
              'args' in content
            ) {
              toolInvocations.push({
                state: 'call',
                toolCallId: content.toolCallId,
                toolName: content.toolName,
                args: content.args
              } as ToolInvocation)
            }
          }
        }
      }
    }

    // Create new message
    const newMessage: Message = {
      id: generateId(),
      role: message.role,
      content: textContent,
      toolInvocations: toolInvocations.length > 0 ? toolInvocations : undefined,
      // Add pending annotations and reasoning if this is an assistant message
      ...(message.role === 'assistant' && {
        ...(pendingAnnotations.length > 0 && {
          annotations: pendingAnnotations
        }),
        ...(pendingReasoning && { reasoning: pendingReasoning })
      })
    }

    chatMessages.push(newMessage)

    // Clear pending data after adding them
    if (message.role === 'assistant') {
      pendingAnnotations = []
      pendingReasoning = undefined
    }

    return chatMessages
  }, [])
}

export function convertToExtendedCoreMessages(
  messages: Message[]
): ExtendedCoreMessage[] {
  const result: ExtendedCoreMessage[] = []

  for (const message of messages) {
    // Convert annotations to data messages
    if (message.annotations && message.annotations.length > 0) {
      message.annotations.forEach(annotation => {
        result.push({
          role: 'data',
          content: annotation
        })
      })
    }

    // Convert reasoning to data message
    if (message.reasoning) {
      result.push({
        role: 'data',
        content: {
          type: 'reasoning',
          data: message.reasoning
        } as JSONValue
      })
    }

    // Convert current message
    const converted = convertToCoreMessages([message])
    result.push(...converted)
  }

  return result
}

================
File: lib/utils/registry.ts
================
import { anthropic } from '@ai-sdk/anthropic'
import { createAzure } from '@ai-sdk/azure'
import { deepseek } from '@ai-sdk/deepseek'
import { createFireworks, fireworks } from '@ai-sdk/fireworks'
import { google } from '@ai-sdk/google'
import { groq } from '@ai-sdk/groq'
import { luma } from '@ai-sdk/luma'
import { createOpenAI, openai } from '@ai-sdk/openai'
import {
  experimental_createProviderRegistry as createProviderRegistry,
  extractReasoningMiddleware,
  wrapLanguageModel
} from 'ai'
import { createOllama } from 'ollama-ai-provider'

export const registry = createProviderRegistry({
  openai,
  anthropic,
  google,
  groq,
  luma,
  ollama: createOllama({
    baseURL: `${process.env.OLLAMA_BASE_URL}/api`
  }),
  azure: createAzure({
    apiKey: process.env.AZURE_API_KEY,
    resourceName: process.env.AZURE_RESOURCE_NAME
  }),
  deepseek,
  fireworks: {
    ...createFireworks({
      apiKey: process.env.FIREWORKS_API_KEY
    }),
    languageModel: fireworks
  },
  'openai-compatible': createOpenAI({
    apiKey: process.env.OPENAI_COMPATIBLE_API_KEY,
    baseURL: process.env.OPENAI_COMPATIBLE_API_BASE_URL
  })
})

export function getModel(model: string) {
  const [provider, ...modelNameParts] = model.split(':') ?? []
  const modelName = modelNameParts.join(':')
  if (model.includes('ollama')) {
    const ollama = createOllama({
      baseURL: `${process.env.OLLAMA_BASE_URL}/api`
    })

    // if model is deepseek-r1, add reasoning middleware
    if (model.includes('deepseek-r1')) {
      return wrapLanguageModel({
        model: ollama(modelName),
        middleware: extractReasoningMiddleware({
          tagName: 'think'
        })
      })
    }

    // if ollama provider, set simulateStreaming to true
    return ollama(modelName, {
      simulateStreaming: true
    })
  }

  // if model is groq and includes deepseek-r1, add reasoning middleware
  if (model.includes('groq') && model.includes('deepseek-r1')) {
    return wrapLanguageModel({
      model: groq(modelName),
      middleware: extractReasoningMiddleware({
        tagName: 'think'
      })
    })
  }

  // if model is fireworks and includes deepseek-r1, add reasoning middleware
  if (model.includes('fireworks') && model.includes('deepseek-r1')) {
    return wrapLanguageModel({
      model: fireworks(modelName),
      middleware: extractReasoningMiddleware({
        tagName: 'think'
      })
    })
  }

  return registry.languageModel(model)
}

export function isProviderEnabled(providerId: string): boolean {
  switch (providerId) {
    case 'openai':
      return !!process.env.OPENAI_API_KEY
    case 'anthropic':
      return !!process.env.ANTHROPIC_API_KEY
    case 'google':
      return !!process.env.GOOGLE_GENERATIVE_AI_API_KEY
    case 'groq':
      return !!process.env.GROQ_API_KEY
    case 'ollama':
      return !!process.env.OLLAMA_BASE_URL
    case 'azure':
      return !!process.env.AZURE_API_KEY && !!process.env.AZURE_RESOURCE_NAME
    case 'deepseek':
      return !!process.env.DEEPSEEK_API_KEY
    case 'fireworks':
      return !!process.env.FIREWORKS_API_KEY
    case 'openai-compatible':
      return (
        !!process.env.OPENAI_COMPATIBLE_API_KEY &&
        !!process.env.OPENAI_COMPATIBLE_API_BASE_URL &&
        !!process.env.NEXT_PUBLIC_OPENAI_COMPATIBLE_MODEL
      )
    default:
      return false
  }
}

export function getToolCallModel(model?: string) {
  const [provider, ...modelNameParts] = model?.split(':') ?? []
  const modelName = modelNameParts.join(':')
  switch (provider) {
    case 'deepseek':
      return getModel('deepseek:deepseek-chat')
    case 'fireworks':
      return getModel(
        'fireworks:accounts/fireworks/models/llama-v3p1-8b-instruct'
      )
    case 'groq':
      return getModel('groq:llama-3.1-8b-instant')
    case 'ollama':
      const ollamaModel =
        process.env.NEXT_PUBLIC_OLLAMA_TOOL_CALL_MODEL || modelName
      return getModel(`ollama:${ollamaModel}`)
    default:
      return getModel('openai:gpt-4o-mini')
  }
}

export function isToolCallSupported(model?: string) {
  const [provider, ...modelNameParts] = model?.split(':') ?? []
  const modelName = modelNameParts.join(':')

  if (provider === 'ollama') {
    return false
  }
  // Deepseek R1 is not supported
  // Deepseek v3's tool call is unstable, so we include it in the list
  return !modelName?.includes('deepseek')
}

export function isReasoningModel(model: string): boolean {
  if (typeof model !== 'string') {
    return false
  }
  return (
    model.includes('deepseek-r1') ||
    model.includes('deepseek-reasoner') ||
    model.includes('o3-mini')
  )
}

================
File: lib/image-generation.ts
================
import { replicate } from '@ai-sdk/replicate'
import { experimental_generateImage as generateImageAI } from 'ai'

export async function generateImage(prompt: string) {
  try {
    const { image } = await generateImageAI({
      model: replicate.image('flux-1.1-pro'),
      prompt
    })

    // Convert uint8Array to base64
    const base64Image = Buffer.from(image.uint8Array).toString('base64')
    return `data:image/png;base64,${base64Image}`
  } catch (error) {
    console.error('Error generating image:', error)
    throw error
  }
}

================
File: old codebase/oldcodebase.txt
================
This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-02-05T17:32:34.129Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
app/
  api/
    chat/
      route.ts
    clean_images/
      route.ts
    trending/
      route.ts
    upload/
      route.ts
  new/
    page.tsx
  search/
    page.tsx
  actions.ts
  globals.css
  layout.tsx
  manifest.ts
  page.tsx
  providers.tsx
components/
  animata/
    background/
      moving-gradient.tsx
  core/
    border-trail.tsx
    logo.tsx
    text-loop.tsx
    text-shimmer.tsx
  ui/
    accordion.tsx
    badge.tsx
    button.tsx
    card.tsx
    carousel.tsx
    chart.tsx
    collapsible.tsx
    dialog.tsx
    drawer.tsx
    dropdown-menu.tsx
    form-component.tsx
    hover-card.tsx
    input.tsx
    label.tsx
    navigation-menu.tsx
    popover.tsx
    scroll-area.tsx
    separator.tsx
    sheet.tsx
    skeleton.tsx
    switch.tsx
    table.tsx
    tabs.tsx
    textarea.tsx
    tooltip.tsx
    tweet-grid.tsx
  currency_conv.tsx
  flight-tracker.tsx
  InstallPrompt.tsx
  interactive-charts.tsx
  interactive-maps.tsx
  interactive-stock-chart.tsx
  list-view.tsx
  map-components.tsx
  markdown-render.tsx
  movie-info.tsx
  multi-search.tsx
  nearby-search-map-view.tsx
  place-card.tsx
  placeholder-image.tsx
  search-groups.tsx
  trending-tv-movies-results.tsx
  weather-chart.tsx
env/
  client.ts
  server.ts
hooks/
  use-media-query.tsx
  use-window-size.tsx
lib/
  utils.ts
public/
  Launch_SVG_Dark.svg
  Launch_SVG_Light.svg
.env.example
.eslintrc.json
.gitignore
.prettierrc
components.json
debug.md
e2b.Dockerfile
LICENSE
next.config.mjs
package.json
postcss.config.mjs
README.md
tailwind.config.ts
tsconfig.json
vercel.json

================================================================
Repository Files
================================================================

================
File: app/api/chat/route.ts
================
// /app/api/chat/route.ts
import { getGroupConfig } from '@/app/actions';
import { serverEnv } from '@/env/server';
import { google } from '@ai-sdk/google';
import CodeInterpreter from '@e2b/code-interpreter';
import FirecrawlApp from '@mendable/firecrawl-js';
import { tavily } from '@tavily/core';
import { convertToCoreMessages, smoothStream, streamText, tool } from 'ai';
import Exa from 'exa-js';
import { z } from 'zod';

// Allow streaming responses up to 60 seconds
export const maxDuration = 120;

interface MapboxFeature {
    id: string;
    name: string;
    formatted_address: string;
    geometry: {
        type: string;
        coordinates: number[];
    };
    feature_type: string;
    context: string;
    coordinates: number[];
    bbox: number[];
    source: string;
}

interface GoogleResult {
    place_id: string;
    formatted_address: string;
    geometry: {
        location: {
            lat: number;
            lng: number;
        };
        viewport: {
            northeast: {
                lat: number;
                lng: number;
            };
            southwest: {
                lat: number;
                lng: number;
            };
        };
    };
    types: string[];
    address_components: Array<{
        long_name: string;
        short_name: string;
        types: string[];
    }>;
}

interface VideoDetails {
    title?: string;
    author_name?: string;
    author_url?: string;
    thumbnail_url?: string;
    type?: string;
    provider_name?: string;
    provider_url?: string;
}

interface VideoResult {
    videoId: string;
    url: string;
    details?: VideoDetails;
    captions?: string;
    timestamps?: string[];
    views?: string;
    likes?: string;
    summary?: string;
}

function sanitizeUrl(url: string): string {
    return url.replace(/\s+/g, '%20');
}

async function isValidImageUrl(url: string): Promise<boolean> {
    try {
        const controller = new AbortController();
        const timeout = setTimeout(() => controller.abort(), 5000);

        const response = await fetch(url, {
            method: 'HEAD',
            signal: controller.signal,
        });

        clearTimeout(timeout);

        return response.ok && (response.headers.get('content-type')?.startsWith('image/') ?? false);
    } catch {
        return false;
    }
}

function errorHandler(error: unknown) {
    if (error == null) {
        return 'unknown error';
    }

    if (typeof error === 'string') {
        return error;
    }

    if (error instanceof Error) {
        // Log the entire error object to your server logs for debugging
        console.error("[API] Error details:", {
            name: error.name,
            message: error.message,
            stack: error.stack,
            cause: error.cause
        });
        return error.message; // Return only the message to the client
    }

    return JSON.stringify(error);
}

function mode(arr: any[]): any {
    return arr.reduce((a, b, i, arr) =>
        (arr.filter(v => v === a).length >= arr.filter(v => v === b).length ? a : b), arr[0]);
}

const formatters = {
    temperature: (temp: number) => `${Math.round(temp)}¬∞F`,
    distance: (meters: number) => `${(meters / 1609.34).toFixed(1)} miles`,
    price: (level: string) => level || 'Price not available',
    rating: (rating: number) => `${rating} ‚òÖ`,
    percentage: (value: number) => `${Math.round(value)}%`,
    date: (timestamp: number) => new Date(timestamp * 1000).toLocaleDateString(),
    time: (timestamp: number) => new Date(timestamp * 1000).toLocaleTimeString(),
};

interface ResponseTemplate {
    summary: string;
    details: Record<string, any>;
    markdown?: string;
}

function createMarkdownResponse(template: ResponseTemplate): string {
    let markdown = `## ${template.summary}\n\n`;
    
    if (template.details) {
        Object.entries(template.details).forEach(([section, data]) => {
            markdown += `### ${section}\n`;
            if (Array.isArray(data)) {
                data.forEach((item: any) => {
                    markdown += `- ${item}\n`;
                });
            } else if (typeof data === 'object') {
                Object.entries(data).forEach(([key, value]) => {
                    markdown += `- **${key}**: ${value}\n`;
                });
            } else {
                markdown += `${data}\n`;
            }
            markdown += '\n';
        });
    }

    if (template.markdown) {
        markdown += template.markdown;
    }

    return markdown;
}

export async function POST(req: Request) {
    try {
        // Log request details
        console.log("[API] Request headers:", Object.fromEntries(req.headers.entries()));
        
        if (!req.body) {
            throw new Error('Request body is empty');
        }

        const { messages, group } = await req.json().catch(() => {
            throw new Error('Failed to parse request body as JSON');
        });

        console.log("[API] Received messages:", messages);
        console.log("[API] Selected group:", group);

        if (!messages || !Array.isArray(messages)) {
            throw new Error('Invalid messages format');
        }

        if (!group) {
            throw new Error('Group parameter is required');
        }

        const { tools: activeTools, systemPrompt } = await getGroupConfig(group).catch((error) => {
            console.error('[API] Failed to get group config:', error);
            throw new Error('Failed to load configuration');
        });

        if (!serverEnv.GOOGLE_GENERATIVE_AI_API_KEY) {
            throw new Error('GOOGLE_GENERATIVE_AI_API_KEY is not configured');
        }

        const model = google('gemini-2.0-flash-exp', {
            safetySettings: [
                { category: 'HARM_CATEGORY_HATE_SPEECH', threshold: 'BLOCK_NONE' },
                { category: 'HARM_CATEGORY_DANGEROUS_CONTENT', threshold: 'BLOCK_NONE' },
                { category: 'HARM_CATEGORY_HARASSMENT', threshold: 'BLOCK_NONE' },
                { category: 'HARM_CATEGORY_SEXUALLY_EXPLICIT', threshold: 'BLOCK_NONE' },
                { category: 'HARM_CATEGORY_CIVIC_INTEGRITY', threshold: 'BLOCK_NONE' },
            ],
        });

        console.log("[API] Model initialized");

        const result = streamText({
            model,
            messages: convertToCoreMessages(messages),
            experimental_transform: smoothStream({
                chunking: 'word',
                delayInMs: 15,
            }),
            temperature: 0,
            experimental_activeTools: [...activeTools],
            system: systemPrompt,
            tools: {
                stock_chart: tool({
                    description: 'Write and execute Python code to find stock data and generate a stock chart.',
                    parameters: z.object({
                        title: z.string().describe('The title of the chart.'),
                        code: z.string().describe('The Python code to execute.'),
                        icon: z
                            .enum(['stock', 'date', 'calculation', 'default'])
                            .describe('The icon to display for the chart.'),
                    }),
                    execute: async ({ code, title, icon }: { code: string; title: string; icon: string }) => {
                        console.log('Code:', code);
                        console.log('Title:', title);
                        console.log('Icon:', icon);

                        const sandbox = await CodeInterpreter.create(serverEnv.SANDBOX_TEMPLATE_ID!);
                        const execution = await sandbox.runCode(code);
                        let message = '';

                        if (execution.results.length > 0) {
                            for (const result of execution.results) {
                                if (result.isMainResult) {
                                    message += `${result.text}\n`;
                                } else {
                                    message += `${result.text}\n`;
                                }
                            }
                        }

                        if (execution.logs.stdout.length > 0 || execution.logs.stderr.length > 0) {
                            if (execution.logs.stdout.length > 0) {
                                message += `${execution.logs.stdout.join('\n')}\n`;
                            }
                            if (execution.logs.stderr.length > 0) {
                                message += `${execution.logs.stderr.join('\n')}\n`;
                            }
                        }

                        if (execution.error) {
                            message += `Error: ${execution.error}\n`;
                            console.log('Error: ', execution.error);
                        }

                        console.log(execution.results);
                        if (execution.results[0].chart) {
                            execution.results[0].chart.elements.map((element: any) => {
                                console.log(element.points);
                            });
                        }

                        return {
                            message: message.trim(),
                            chart: execution.results[0].chart ?? '',
                        };
                    },
                }),
                currency_converter: tool({
                    description: 'Convert currency from one to another using yfinance',
                    parameters: z.object({
                        from: z.string().describe('The source currency code.'),
                        to: z.string().describe('The target currency code.'),
                        amount: z.number().default(1).describe('The amount to convert.'),
                    }),
                    execute: async ({ from, to }: { from: string; to: string }) => {
                        const code = `
  import yfinance as yf
  from_currency = '${from}'
  to_currency = '${to}'
  currency_pair = f'{from_currency}{to_currency}=X'
  data = yf.Ticker(currency_pair).history(period='1d')
  latest_rate = data['Close'].iloc[-1]
  latest_rate
  `;
                        console.log('Currency pair:', from, to);

                        const sandbox = await CodeInterpreter.create(serverEnv.SANDBOX_TEMPLATE_ID!);
                        const execution = await sandbox.runCode(code);
                        let message = '';

                        if (execution.results.length > 0) {
                            for (const result of execution.results) {
                                if (result.isMainResult) {
                                    message += `${result.text}\n`;
                                } else {
                                    message += `${result.text}\n`;
                                }
                            }
                        }

                        if (execution.logs.stdout.length > 0 || execution.logs.stderr.length > 0) {
                            if (execution.logs.stdout.length > 0) {
                                message += `${execution.logs.stdout.join('\n')}\n`;
                            }
                            if (execution.logs.stderr.length > 0) {
                                message += `${execution.logs.stderr.join('\n')}\n`;
                            }
                        }

                        if (execution.error) {
                            message += `Error: ${execution.error}\n`;
                            console.log('Error: ', execution.error);
                        }

                        return { rate: message.trim() };
                    },
                }),
                web_search: tool({
                    description: 'Search the web for information with multiple queries, max results and search depth.',
                    parameters: z.object({
                        queries: z.array(z.string().describe('Array of search queries to look up on the web. Generate multiple queries to cover different aspects of the user\'s question.')),
                        maxResults: z.array(
                            z.number().describe('Array of maximum number of results to return per query.').default(10),
                        ),
                        topics: z.array(
                            z.enum(['general', 'news']).describe('Array of topic types to search for. Include "news" for recent information.').default('general'),
                        ),
                        searchDepth: z.array(
                            z.enum(['basic', 'advanced']).describe('Array of search depths to use. Prefer "advanced" for complex queries.').default('advanced'),
                        ),
                        exclude_domains: z
                            .array(z.string())
                            .describe('A list of domains to exclude from all search results.')
                            .default([]),
                    }),
                    execute: async ({
                        queries,
                        maxResults,
                        topics,
                        searchDepth,
                        exclude_domains,
                    }: {
                        queries: string[];
                        maxResults: number[];
                        topics: ('general' | 'news')[];
                        searchDepth: ('basic' | 'advanced')[];
                        exclude_domains?: string[];
                    }) => {
                        try {
                            if (!serverEnv.TAVILY_API_KEY) {
                                throw new Error('TAVILY_API_KEY is not configured');
                            }

                            const apiKey = serverEnv.TAVILY_API_KEY;
                            const tvly = tavily({ apiKey });
                            const includeImageDescriptions = true;

                            console.log('Queries:', queries);
                            console.log('Max Results:', maxResults);
                            console.log('Topics:', topics);
                            console.log('Search Depths:', searchDepth);
                            console.log('Exclude Domains:', exclude_domains);

                            // Execute searches in parallel with individual error handling
                            const searchPromises = queries.map(async (query, index) => {
                                try {
                                    const data = await tvly.search(query, {
                                        topic: topics[index] || topics[0] || 'general',
                                        days: topics[index] === 'news' ? 7 : undefined,
                                        maxResults: maxResults[index] || maxResults[0] || 10,
                                        searchDepth: searchDepth[index] || searchDepth[0] || 'advanced',
                                        includeAnswer: true,
                                        includeImages: true,
                                        includeImageDescriptions: includeImageDescriptions,
                                        excludeDomains: exclude_domains,
                                    });

                                    // Process and enhance the results
                                    const enhancedResults = data.results.map((result: any) => ({
                                        ...result,
                                        summary: createMarkdownResponse({
                                            summary: result.title,
                                            details: {
                                                content: result.content,
                                                source: `[${result.domain}](${result.url})`,
                                                date: result.published_date,
                                            }
                                        })
                                    }));

                                    return {
                                        query,
                                        results: enhancedResults,
                                        answer: data.answer,
                                        images: data.images
                                            .filter((img: any) => img.url && img.description)
                                            .map((img: any) => ({
                                                url: sanitizeUrl(img.url),
                                                description: img.description
                                            })),
                                    };
                                } catch (error) {
                                    console.error(`Error processing query "${query}":`, error);
                                    return {
                                        query,
                                        results: [],
                                        images: [],
                                        error: error instanceof Error ? error.message : 'An unknown error occurred',
                                    };
                                }
                            });

                            const searchResults = await Promise.all(searchPromises);

                            // Check if all searches failed
                            const allFailed = searchResults.every((result) => result.error);
                            if (allFailed) {
                                throw new Error('All search queries failed to execute');
                            }

                            // Create a comprehensive markdown summary
                            const markdown = createMarkdownResponse({
                                summary: 'Search Results Summary',
                                details: {
                                    'Queries Performed': queries,
                                    'Key Findings': searchResults
                                        .filter(result => !result.error)
                                        .map(result => result.answer)
                                        .filter(Boolean),
                                    'Sources': searchResults
                                        .flatMap(result => 
                                            result.results.map((r: any) => 
                                                `- [${r.title}](${r.url}) - ${r.content.substring(0, 150)}...`
                                            )
                                        )
                                }
                            });

                            // Create a dedicated response section
                            const llmResponse = createMarkdownResponse({
                                summary: 'AI Analysis and Response',
                                details: {
                                    'Direct Answer': searchResults
                                        .filter(result => !result.error && result.answer)
                                        .map(result => result.answer)
                                        .join('\n\n'),
                                    'Analysis': searchResults
                                        .filter(result => !result.error)
                                        .flatMap(result => result.results)
                                        .map(r => r.content)
                                        .join('\n\n'),
                                    'Key Insights': searchResults
                                        .filter(result => !result.error)
                                        .map(result => result.results[0]?.summary || '')
                                        .filter(Boolean)
                                        .join('\n\n')
                                }
                            });

                            return {
                                searches: searchResults,
                                markdown,
                                llmResponse
                            };
                        } catch (error) {
                            console.error('Web search error:', error);
                            throw error;
                        }
                    },
                }),
                tmdb_search: tool({
                    description: 'Search for a movie or TV show using TMDB API',
                    parameters: z.object({
                        query: z.string().describe('The search query for movies/TV shows'),
                    }),
                    execute: async ({ query }: { query: string }) => {
                        const TMDB_API_KEY = serverEnv.TMDB_API_KEY;
                        const TMDB_BASE_URL = 'https://api.themoviedb.org/3';

                        try {
                            // First do a multi-search to get the top result
                            const searchResponse = await fetch(
                                `${TMDB_BASE_URL}/search/multi?query=${encodeURIComponent(
                                    query,
                                )}&include_adult=true&language=en-US&page=1`,
                                {
                                    headers: {
                                        Authorization: `Bearer ${TMDB_API_KEY}`,
                                        accept: 'application/json',
                                    },
                                },
                            );

                            const searchResults = await searchResponse.json();

                            // Get the first movie or TV show result
                            const firstResult = searchResults.results.find(
                                (result: any) => result.media_type === 'movie' || result.media_type === 'tv',
                            );

                            if (!firstResult) {
                                return { result: null };
                            }

                            // Get detailed information for the media
                            const detailsResponse = await fetch(
                                `${TMDB_BASE_URL}/${firstResult.media_type}/${firstResult.id}?language=en-US`,
                                {
                                    headers: {
                                        Authorization: `Bearer ${TMDB_API_KEY}`,
                                        accept: 'application/json',
                                    },
                                },
                            );

                            const details = await detailsResponse.json();

                            // Get additional credits information
                            const creditsResponse = await fetch(
                                `${TMDB_BASE_URL}/${firstResult.media_type}/${firstResult.id}/credits?language=en-US`,
                                {
                                    headers: {
                                        Authorization: `Bearer ${TMDB_API_KEY}`,
                                        accept: 'application/json',
                                    },
                                },
                            );

                            const credits = await creditsResponse.json();

                            // Format the result
                            const result = {
                                ...details,
                                media_type: firstResult.media_type,
                                credits: {
                                    cast:
                                        credits.cast?.slice(0, 5).map((person: any) => ({
                                            ...person,
                                            profile_path: person.profile_path
                                                ? `https://image.tmdb.org/t/p/original${person.profile_path}`
                                                : null,
                                        })) || [],
                                    director: credits.crew?.find((person: any) => person.job === 'Director')?.name,
                                    writer: credits.crew?.find(
                                        (person: any) => person.job === 'Screenplay' || person.job === 'Writer',
                                    )?.name,
                                },
                                poster_path: details.poster_path
                                    ? `https://image.tmdb.org/t/p/original${details.poster_path}`
                                    : null,
                                backdrop_path: details.backdrop_path
                                    ? `https://image.tmdb.org/t/p/original${details.backdrop_path}`
                                    : null,
                            };

                            return { result };
                        } catch (error) {
                            console.error('TMDB search error:', error);
                            throw error;
                        }
                    },
                }),
                trending_movies: tool({
                    description: 'Get trending movies from TMDB',
                    parameters: z.object({}),
                    execute: async () => {
                        const TMDB_API_KEY = serverEnv.TMDB_API_KEY;
                        const TMDB_BASE_URL = 'https://api.themoviedb.org/3';

                        try {
                            const response = await fetch(`${TMDB_BASE_URL}/trending/movie/day?language=en-US`, {
                                headers: {
                                    Authorization: `Bearer ${TMDB_API_KEY}`,
                                    accept: 'application/json',
                                },
                            });

                            const data = await response.json();
                            const results = data.results.map((movie: any) => ({
                                ...movie,
                                poster_path: movie.poster_path
                                    ? `https://image.tmdb.org/t/p/original${movie.poster_path}`
                                    : null,
                                backdrop_path: movie.backdrop_path
                                    ? `https://image.tmdb.org/t/p/original${movie.backdrop_path}`
                                    : null,
                            }));

                            return { results };
                        } catch (error) {
                            console.error('Trending movies error:', error);
                            throw error;
                        }
                    },
                }),
                trending_tv: tool({
                    description: 'Get trending TV shows from TMDB',
                    parameters: z.object({}),
                    execute: async () => {
                        const TMDB_API_KEY = serverEnv.TMDB_API_KEY;
                        const TMDB_BASE_URL = 'https://api.themoviedb.org/3';

                        try {
                            const response = await fetch(`${TMDB_BASE_URL}/trending/tv/day?language=en-US`, {
                                headers: {
                                    Authorization: `Bearer ${TMDB_API_KEY}`,
                                    accept: 'application/json',
                                },
                            });

                            const data = await response.json();
                            const results = data.results.map((show: any) => ({
                                ...show,
                                poster_path: show.poster_path
                                    ? `https://image.tmdb.org/t/p/original${show.poster_path}`
                                    : null,
                                backdrop_path: show.backdrop_path
                                    ? `https://image.tmdb.org/t/p/original${show.backdrop_path}`
                                    : null,
                            }));

                            return { results };
                        } catch (error) {
                            console.error('Trending TV shows error:', error);
                            throw error;
                        }
                    },
                }),
                academic_search: tool({
                    description: 'Search academic papers and research.',
                    parameters: z.object({
                        query: z.string().describe('The search query'),
                    }),
                    execute: async ({ query }: { query: string }) => {
                        try {
                            const exa = new Exa(serverEnv.EXA_API_KEY as string);

                            // Search academic papers with content summary
                            const result = await exa.searchAndContents(query, {
                                type: 'auto',
                                numResults: 20,
                                category: 'research paper',
                                summary: {
                                    query: 'Abstract of the Paper',
                                },
                            });

                            // Process and clean results
                            const processedResults = result.results.reduce<typeof result.results>((acc, paper) => {
                                // Skip if URL already exists or if no summary available
                                if (acc.some((p) => p.url === paper.url) || !paper.summary) return acc;

                                // Clean up summary (remove "Summary:" prefix if exists)
                                const cleanSummary = paper.summary.replace(/^Summary:\s*/i, '');

                                // Clean up title (remove [...] suffixes)
                                const cleanTitle = paper.title?.replace(/\s\[.*?\]$/, '');

                                acc.push({
                                    ...paper,
                                    title: cleanTitle || '',
                                    summary: cleanSummary,
                                });

                                return acc;
                            }, []);

                            // Take only the first 10 unique, valid results
                            const limitedResults = processedResults.slice(0, 10);

                            return {
                                results: limitedResults,
                            };
                        } catch (error) {
                            console.error('Academic search error:', error);
                            throw error;
                        }
                    },
                }),
                youtube_search: tool({
                    description: 'Search YouTube videos using Exa AI and get detailed video information.',
                    parameters: z.object({
                        query: z.string().describe('The search query for YouTube videos'),
                        no_of_results: z.number().default(5).describe('The number of results to return'),
                    }),
                    execute: async ({ query, no_of_results }: { query: string; no_of_results: number }) => {
                        try {
                            const exa = new Exa(serverEnv.EXA_API_KEY as string);

                            // Simple search to get YouTube URLs only
                            const searchResult = await exa.search(query, {
                                type: 'keyword',
                                numResults: no_of_results,
                                includeDomains: ['youtube.com'],
                            });

                            // Process results
                            const processedResults = await Promise.all(
                                searchResult.results.map(async (result): Promise<VideoResult | null> => {
                                    const videoIdMatch = result.url.match(
                                        /(?:youtube\.com\/watch\?v=|youtu\.be\/|youtube\.com\/embed\/)([^&?/]+)/,
                                    );
                                    const videoId = videoIdMatch?.[1];

                                    if (!videoId) return null;

                                    // Base result
                                    const baseResult: VideoResult = {
                                        videoId,
                                        url: result.url,
                                    };

                                    try {
                                        // Fetch detailed info from our endpoints
                                        const [detailsResponse, captionsResponse, timestampsResponse] = await Promise.all([
                                            fetch(`${serverEnv.YT_ENDPOINT}/video-data`, {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                },
                                                body: JSON.stringify({
                                                    url: result.url,
                                                }),
                                            }).then((res) => (res.ok ? res.json() : null)),
                                            fetch(`${serverEnv.YT_ENDPOINT}/video-captions`, {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                },
                                                body: JSON.stringify({
                                                    url: result.url,
                                                }),
                                            }).then((res) => (res.ok ? res.text() : null)),
                                            fetch(`${serverEnv.YT_ENDPOINT}/video-timestamps`, {
                                                method: 'POST',
                                                headers: {
                                                    'Content-Type': 'application/json',
                                                },
                                                body: JSON.stringify({
                                                    url: result.url,
                                                }),
                                            }).then((res) => (res.ok ? res.json() : null)),
                                        ]);

                                        // Return combined data
                                        return {
                                            ...baseResult,
                                            details: detailsResponse || undefined,
                                            captions: captionsResponse || undefined,
                                            timestamps: timestampsResponse || undefined,
                                        };
                                    } catch (error) {
                                        console.error(`Error fetching details for video ${videoId}:`, error);
                                        return baseResult;
                                    }
                                }),
                            );

                            // Filter out null results
                            const validResults = processedResults.filter(
                                (result): result is VideoResult => result !== null,
                            );

                            return {
                                results: validResults,
                            };
                        } catch (error) {
                            console.error('YouTube search error:', error);
                            throw error;
                        }
                    },
                }),
                retrieve: tool({
                    description: 'Retrieve the information from a URL using Firecrawl.',
                    parameters: z.object({
                        url: z.string().describe('The URL to retrieve the information from.'),
                    }),
                    execute: async ({ url }: { url: string }) => {
                        const app = new FirecrawlApp({
                            apiKey: serverEnv.FIRECRAWL_API_KEY,
                        });
                        try {
                            const content = await app.scrapeUrl(url);
                            if (!content.success || !content.metadata) {
                                return { error: 'Failed to retrieve content' };
                            }
                            return {
                                results: [
                                    {
                                        title: content.metadata.title,
                                        content: content.markdown,
                                        url: content.metadata.sourceURL,
                                        description: content.metadata.description,
                                        language: content.metadata.language,
                                    },
                                ],
                            };
                        } catch (error) {
                            console.error('Firecrawl API error:', error);
                            return { error: 'Failed to retrieve content' };
                        }
                    },
                }),
                get_weather_data: tool({
                    description: 'Get the weather data for a city.',
                    parameters: z.object({
                        city: z.string().describe('The name of the city to get weather data for.'),
                    }),
                    execute: async ({ city }: { city: string }) => {
                        const apiKey = serverEnv.OPENWEATHER_API_KEY;
                        
                        // First, get coordinates from city name using geocoding API
                        const geoResponse = await fetch(
                            `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(city)}&limit=1&appid=${apiKey}`
                        );
                        const geoData = await geoResponse.json();
                        
                        if (!geoData || geoData.length === 0) {
                            throw new Error('City not found');
                        }
                        
                        const { lat, lon } = geoData[0];
                        
                        // Get current weather
                        const currentWeatherResponse = await fetch(
                            `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=imperial`
                        );
                        const currentWeather = await currentWeatherResponse.json();
                        
                        // Get forecast data
                        const forecastResponse = await fetch(
                            `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=imperial`
                        );
                        const forecastData = await forecastResponse.json();

                        // Process current weather
                        const current = {
                            temperature: Math.round(currentWeather.main.temp),
                            feels_like: Math.round(currentWeather.main.feels_like),
                            conditions: currentWeather.weather[0].main,
                            description: currentWeather.weather[0].description,
                            humidity: currentWeather.main.humidity,
                            wind_speed: Math.round(currentWeather.wind.speed),
                            wind_direction: currentWeather.wind.deg,
                            sunrise: new Date(currentWeather.sys.sunrise * 1000).toLocaleTimeString(),
                            sunset: new Date(currentWeather.sys.sunset * 1000).toLocaleTimeString(),
                        };

                        // Process forecast data
                        const forecast = forecastData.list.reduce((acc: any[], item: any) => {
                            const date = new Date(item.dt * 1000);
                            const day = date.toLocaleDateString('en-US', { weekday: 'long' });
                            const time = date.toLocaleTimeString('en-US', { hour: 'numeric' });
                            
                            acc.push({
                                day,
                                time,
                                temperature: Math.round(item.main.temp),
                                feels_like: Math.round(item.main.feels_like),
                                conditions: item.weather[0].main,
                                description: item.weather[0].description,
                                humidity: item.main.humidity,
                                wind_speed: Math.round(item.wind.speed),
                                precipitation_chance: Math.round(item.pop * 100),
                            });
                            
                            return acc;
                        }, []);

                        // Group forecast by day
                        const dailyForecasts = forecast.reduce((acc: any, item: any) => {
                            if (!acc[item.day]) {
                                acc[item.day] = {
                                    temperatures: [],
                                    conditions: [],
                                    precipitation_chances: [],
                                };
                            }
                            acc[item.day].temperatures.push(item.temperature);
                            acc[item.day].conditions.push(item.conditions);
                            acc[item.day].precipitation_chances.push(item.precipitation_chance);
                            return acc;
                        }, {});

                        // Calculate daily summaries
                        const dailySummaries = Object.entries(dailyForecasts).map(([day, data]: [string, any]) => ({
                            day,
                            high: Math.max(...data.temperatures),
                            low: Math.min(...data.temperatures),
                            dominant_conditions: mode(data.conditions),
                            max_precipitation_chance: Math.max(...data.precipitation_chances),
                        }));

                        // Create natural language summaries
                        const currentSummary = `Currently ${current.temperature}¬∞F, feels like ${current.feels_like}¬∞F, with ${current.description}. Humidity is ${current.humidity}% with wind speed of ${current.wind_speed} mph.`;
                        
                        const forecastSummary = `5-day forecast shows temperatures ranging from ${Math.min(...dailySummaries.map(d => d.low))}¬∞F to ${Math.max(...dailySummaries.map(d => d.high))}¬∞F, with ${dailySummaries[0].dominant_conditions.toLowerCase()} conditions expected for ${dailySummaries[0].day}.`;

                        return {
                            location: {
                                name: geoData[0].name,
                                country: geoData[0].country,
                                state: geoData[0].state,
                                coordinates: { lat, lon },
                            },
                            current: {
                                ...current,
                                summary: currentSummary,
                            },
                            forecast: {
                                hourly: forecast,
                                daily: dailySummaries,
                                summary: forecastSummary,
                            },
                            units: {
                                temperature: "Fahrenheit",
                                wind_speed: "mph",
                                precipitation: "percentage"
                            }
                        };
                    },
                }),
                restaurant_finder: tool({
                    description: 'Find restaurants and businesses using Yelp, with detailed filters and sorting options.',
                    parameters: z.object({
                        location: z.string().describe('Location to search in (city, address, or zip code)'),
                        term: z.string().optional().describe('Search term (e.g., "sushi", "pizza", "coffee")'),
                        price: z.string().optional().describe('Price level (1-4, can be combined like "1,2,3")'),
                        categories: z.string().optional().describe('Category filter (e.g., "japanese,sushi")'),
                        sort_by: z.enum(['best_match', 'rating', 'review_count', 'distance']).optional(),
                        open_now: z.boolean().optional(),
                        radius: z.number().optional().describe('Search radius in meters (max 40000)'),
                        limit: z.number().min(1).max(50).default(20).describe('Number of results to return'),
                    }),
                    execute: async ({ 
                        location, 
                        term, 
                        price, 
                        categories,
                        sort_by = 'best_match',
                        open_now,
                        radius,
                        limit = 20
                    }) => {
                        try {
                            if (!serverEnv.YELP_API_KEY) {
                                throw new Error('YELP_API_KEY is not configured');
                            }

                            // Build query parameters
                            const params = new URLSearchParams({
                                location,
                                limit: limit.toString(),
                                sort_by: sort_by || 'best_match'
                            });

                            // Add optional parameters
                            if (term) params.append('term', term);
                            if (price) params.append('price', price);
                            if (categories) params.append('categories', categories);
                            if (open_now !== undefined) params.append('open_now', open_now.toString());
                            if (radius) params.append('radius', Math.min(radius, 40000).toString());

                            // Make request to Yelp API
                            const response = await fetch(
                                `https://api.yelp.com/v3/businesses/search?${params.toString()}`,
                                {
                                    headers: {
                                        'Authorization': `Bearer ${serverEnv.YELP_API_KEY}`,
                                        'Accept': 'application/json',
                                    },
                                }
                            );

                            if (!response.ok) {
                                throw new Error(`Yelp API error: ${response.status} ${response.statusText}`);
                            }

                            const data = await response.json();

                            // Process and enhance the results
                            const enhancedResults = await Promise.all(data.businesses.map(async (business: any) => {
                                try {
                                    // Get additional business details
                                    const detailsResponse = await fetch(
                                        `https://api.yelp.com/v3/businesses/${business.id}`,
                                        {
                                            headers: {
                                                'Authorization': `Bearer ${serverEnv.YELP_API_KEY}`,
                                                'Accept': 'application/json',
                                            },
                                        }
                                    );

                                    const details = await detailsResponse.json();

                                    // Get reviews
                                    const reviewsResponse = await fetch(
                                        `https://api.yelp.com/v3/businesses/${business.id}/reviews`,
                                        {
                                            headers: {
                                                'Authorization': `Bearer ${serverEnv.YELP_API_KEY}`,
                                                'Accept': 'application/json',
                                            },
                                        }
                                    );

                                    const reviews = await reviewsResponse.json();

                                    // Format price level for readability
                                    const priceText = business.price ? business.price : 'Price not available';
                                    
                                    // Format categories
                                    const categoryText = business.categories
                                        ?.map((cat: any) => cat.title)
                                        .join(', ') || 'Categories not available';

                                    // Format address
                                    const address = business.location?.display_address?.join(', ') || 'Address not available';

                                    // Format distance
                                    const distance = business.distance 
                                        ? `${(business.distance / 1609.34).toFixed(1)} miles away`
                                        : 'Distance not available';

                                    // Format hours
                                    const currentDay = new Date().getDay();
                                    const todayHours = details.hours?.[0]?.open
                                        ?.find((day: any) => day.day === currentDay);
                                    
                                    const formatTime = (time: string) => {
                                        const hour = parseInt(time.slice(0, 2));
                                        const minute = time.slice(2);
                                        return `${hour % 12 || 12}:${minute} ${hour < 12 ? 'AM' : 'PM'}`;
                                    };

                                    const hoursText = todayHours
                                        ? `Open today ${formatTime(todayHours.start)} - ${formatTime(todayHours.end)}`
                                        : business.is_closed
                                            ? 'Closed now'
                                            : 'Hours not available';

                                    // Format top review
                                    const topReview = reviews.reviews?.[0] ? {
                                        text: reviews.reviews[0].text,
                                        rating: reviews.reviews[0].rating,
                                        time_created: reviews.reviews[0].time_created,
                                        username: reviews.reviews[0].user.name
                                    } : null;

                                    // Create a natural language summary
                                    const summary = `${business.name} is a ${categoryText} establishment ${distance}. ${
                                        business.rating
                                    } stars from ${business.review_count} reviews. ${priceText}. ${hoursText}. Located at ${address}.`;

                                    // Return formatted data
                                    return {
                                        basic_info: {
                                            id: business.id,
                                            name: business.name,
                                            summary,
                                            rating: business.rating,
                                            review_count: business.review_count,
                                            price: priceText,
                                            categories: categoryText,
                                            distance,
                                            is_closed: business.is_closed,
                                        },
                                        location: {
                                            address,
                                            coordinates: business.coordinates,
                                            neighborhood: business.location?.neighborhood,
                                        },
                                        contact: {
                                            phone: business.phone,
                                            url: business.url,
                                        },
                                        hours: {
                                            status: hoursText,
                                            full_hours: details.hours?.[0]?.open || [],
                                            special_hours: details.special_hours || [],
                                        },
                                        photos: details.photos || [],
                                        featured_review: topReview,
                                        additional_info: {
                                            transactions: business.transactions,
                                            attributes: details.business_attributes || {},
                                        }
                                    };
                                } catch (error) {
                                    console.error(`Error fetching details for ${business.id}:`, error);
                                    // Return basic formatted information if details fetch fails
                                    return {
                                        basic_info: {
                                            id: business.id,
                                            name: business.name,
                                            summary: `${business.name} is a ${business.categories?.map((cat: any) => cat.title).join(', ') || 'business'} with ${business.rating} stars from ${business.review_count} reviews.`,
                                            rating: business.rating,
                                            review_count: business.review_count,
                                            price: business.price || 'Price not available',
                                            categories: business.categories?.map((cat: any) => cat.title).join(', ') || 'Categories not available',
                                            distance: business.distance ? `${(business.distance / 1609.34).toFixed(1)} miles away` : 'Distance not available',
                                            is_closed: business.is_closed,
                                        },
                                        location: {
                                            address: business.location?.display_address?.join(', ') || 'Address not available',
                                            coordinates: business.coordinates,
                                        },
                                        contact: {
                                            phone: business.phone,
                                            url: business.url,
                                        }
                                    };
                                }
                            }));

                            // Create a summary of the search results
                            const searchSummary = `Found ${data.total} ${term || 'restaurants/businesses'} in ${location}${
                                price ? ` with price level ${price}` : ''
                            }${categories ? ` in categories: ${categories}` : ''
                            }${open_now ? ', currently open' : ''
                            }${radius ? `, within ${(radius / 1609.34).toFixed(1)} miles` : ''}.`;

                            // Group results by rating for better organization
                            const groupedResults = {
                                excellent: enhancedResults.filter(r => r.basic_info.rating >= 4.5),
                                veryGood: enhancedResults.filter(r => r.basic_info.rating >= 4 && r.basic_info.rating < 4.5),
                                good: enhancedResults.filter(r => r.basic_info.rating >= 3.5 && r.basic_info.rating < 4),
                                other: enhancedResults.filter(r => r.basic_info.rating < 3.5),
                            };

                            return {
                                search_summary: searchSummary,
                                total_results: data.total,
                                region: data.region,
                                grouped_results: groupedResults,
                                all_results: enhancedResults,
                            };
                        } catch (error) {
                            console.error('Restaurant finder error:', error);
                            throw error;
                        }
                    },
                }),
                code_interpreter: tool({
                    description: 'Write and execute Python code.',
                    parameters: z.object({
                        title: z.string().describe('The title of the code snippet.'),
                        code: z
                            .string()
                            .describe(
                                'The Python code to execute. put the variables in the end of the code to print them. do not use the print function.',
                            ),
                        icon: z
                            .enum(['stock', 'date', 'calculation', 'default'])
                            .describe('The icon to display for the code snippet.'),
                    }),
                    execute: async ({ code, title, icon }: { code: string; title: string; icon: string }) => {
                        console.log('Code:', code);
                        console.log('Title:', title);
                        console.log('Icon:', icon);

                        const sandbox = await CodeInterpreter.create(serverEnv.SANDBOX_TEMPLATE_ID!);
                        const execution = await sandbox.runCode(code);
                        let message = '';

                        if (execution.results.length > 0) {
                            for (const result of execution.results) {
                                if (result.isMainResult) {
                                    message += `${result.text}\n`;
                                } else {
                                    message += `${result.text}\n`;
                                }
                            }
                        }

                        if (execution.logs.stdout.length > 0 || execution.logs.stderr.length > 0) {
                            if (execution.logs.stdout.length > 0) {
                                message += `${execution.logs.stdout.join('\n')}\n`;
                            }
                            if (execution.logs.stderr.length > 0) {
                                message += `${execution.logs.stderr.join('\n')}\n`;
                            }
                        }

                        if (execution.error) {
                            message += `Error: ${execution.error}\n`;
                            console.log('Error: ', execution.error);
                        }

                        console.log(execution.results);
                        if (execution.results[0].chart) {
                            execution.results[0].chart.elements.map((element: any) => {
                                console.log(element.points);
                            });
                        }

                        return {
                            message: message.trim(),
                            chart: execution.results[0].chart ?? '',
                        };
                    },
                }),
                find_place: tool({
                    description:
                        'Find a place using Google Maps API for forward geocoding and Mapbox for reverse geocoding.',
                    parameters: z.object({
                        query: z.string().describe('The search query for forward geocoding'),
                        coordinates: z.array(z.number()).describe('Array of [latitude, longitude] for reverse geocoding'),
                    }),
                    execute: async ({ query, coordinates }: { query: string; coordinates: number[] }) => {
                        try {
                            // Forward geocoding with Google Maps API
                            const googleApiKey = serverEnv.GOOGLE_MAPS_API_KEY;
                            const googleResponse = await fetch(
                                `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(
                                    query,
                                )}&key=${googleApiKey}`,
                            );
                            const googleData = await googleResponse.json();

                            // Reverse geocoding with Mapbox
                            const mapboxToken = serverEnv.MAPBOX_ACCESS_TOKEN;
                            const [lat, lng] = coordinates;
                            const mapboxResponse = await fetch(
                                `https://api.mapbox.com/search/geocode/v6/reverse?longitude=${lng}&latitude=${lat}&access_token=${mapboxToken}`,
                            );
                            const mapboxData = await mapboxResponse.json();

                            // Process and combine results
                            const features = [];

                            // Process Google results
                            if (googleData.status === 'OK' && googleData.results.length > 0) {
                                features.push(
                                    ...googleData.results.map((result: GoogleResult) => ({
                                        id: result.place_id,
                                        name: result.formatted_address.split(',')[0],
                                        formatted_address: result.formatted_address,
                                        geometry: {
                                            type: 'Point',
                                            coordinates: [result.geometry.location.lng, result.geometry.location.lat],
                                        },
                                        feature_type: result.types[0],
                                        address_components: result.address_components,
                                        viewport: result.geometry.viewport,
                                        place_id: result.place_id,
                                        source: 'google',
                                    })),
                                );
                            }

                            // Process Mapbox results
                            if (mapboxData.features && mapboxData.features.length > 0) {
                                features.push(
                                    ...mapboxData.features.map(
                                        (feature: any): MapboxFeature => ({
                                            id: feature.id,
                                            name: feature.properties.name_preferred || feature.properties.name,
                                            formatted_address: feature.properties.full_address,
                                            geometry: feature.geometry,
                                            feature_type: feature.properties.feature_type,
                                            context: feature.properties.context,
                                            coordinates: feature.properties.coordinates,
                                            bbox: feature.properties.bbox,
                                            source: 'mapbox',
                                        }),
                                    ),
                                );
                            }

                            return {
                                features,
                                google_attribution: 'Powered by Google Maps Platform',
                                mapbox_attribution: 'Powered by Mapbox',
                            };
                        } catch (error) {
                            console.error('Geocoding error:', error);
                            throw error;
                        }
                    },
                }),
                text_search: tool({
                    description: 'Perform a text-based search for places using Mapbox API.',
                    parameters: z.object({
                        query: z.string().describe("The search query (e.g., '123 main street')."),
                        location: z.string().describe("The location to center the search (e.g., '42.3675294,-71.186966')."),
                        radius: z.number().describe('The radius of the search area in meters (max 50000).'),
                    }),
                    execute: async ({ query, location, radius }: { query: string; location?: string; radius?: number }) => {
                        const mapboxToken = serverEnv.MAPBOX_ACCESS_TOKEN;

                        let proximity = '';
                        if (location) {
                            const [lng, lat] = location.split(',').map(Number);
                            proximity = `&proximity=${lng},${lat}`;
                        }

                        const response = await fetch(
                            `https://api.mapbox.com/geocoding/v5/mapbox.places/${encodeURIComponent(
                                query,
                            )}.json?types=poi${proximity}&access_token=${mapboxToken}`,
                        );
                        const data = await response.json();

                        // If location and radius provided, filter results by distance
                        let results = data.features;
                        if (location && radius) {
                            const [centerLng, centerLat] = location.split(',').map(Number);
                            const radiusInDegrees = radius / 111320;
                            results = results.filter((feature: any) => {
                                const [placeLng, placeLat] = feature.center;
                                const distance = Math.sqrt(
                                    Math.pow(placeLng - centerLng, 2) + Math.pow(placeLat - centerLat, 2),
                                );
                                return distance <= radiusInDegrees;
                            });
                        }

                        return {
                            results: results.map((feature: any) => ({
                                name: feature.text,
                                formatted_address: feature.place_name,
                                geometry: {
                                    location: {
                                        lat: feature.center[1],
                                        lng: feature.center[0],
                                    },
                                },
                            })),
                        };
                    },
                }),
                nearby_search: tool({
                    description: 'Search for nearby places, such as restaurants or hotels based on the details given.',
                    parameters: z.object({
                        location: z.string().describe('The location name given by user.'),
                        latitude: z.number().describe('The latitude of the location.'),
                        longitude: z.number().describe('The longitude of the location.'),
                        type: z
                            .string()
                            .describe('The type of place to search for (restaurants, hotels, attractions, geos).'),
                        radius: z.number().default(6000).describe('The radius in meters (max 50000, default 6000).'),
                    }),
                    execute: async ({
                        location,
                        latitude,
                        longitude,
                        type,
                        radius,
                    }: {
                        latitude: number;
                        longitude: number;
                        location: string;
                        type: string;
                        radius: number;
                    }) => {
                        const apiKey = serverEnv.TRIPADVISOR_API_KEY;
                        let finalLat = latitude;
                        let finalLng = longitude;

                        try {
                            // Try geocoding first
                            const geocodingData = await fetch(
                                `https://maps.googleapis.com/maps/api/geocode/json?address=${encodeURIComponent(
                                    location,
                                )}&key=${serverEnv.GOOGLE_MAPS_API_KEY}`,
                            );

                            const geocoding = await geocodingData.json();

                            if (geocoding.results?.[0]?.geometry?.location) {
                                let trimmedLat = geocoding.results[0].geometry.location.lat.toString().split('.');
                                finalLat = parseFloat(trimmedLat[0] + '.' + trimmedLat[1].slice(0, 6));
                                let trimmedLng = geocoding.results[0].geometry.location.lng.toString().split('.');
                                finalLng = parseFloat(trimmedLng[0] + '.' + trimmedLng[1].slice(0, 6));
                                console.log('Using geocoded coordinates:', finalLat, finalLng);
                            } else {
                                console.log('Using provided coordinates:', finalLat, finalLng);
                            }

                            // Get nearby places
                            const nearbyResponse = await fetch(
                                `https://api.content.tripadvisor.com/api/v1/location/nearby_search?latLong=${finalLat},${finalLng}&category=${type}&radius=${radius}&language=en&key=${apiKey}`,
                                {
                                    method: 'GET',
                                    headers: {
                                        Accept: 'application/json',
                                        origin: 'https://mplx.local',
                                        referer: 'https://mplx.local',
                                    },
                                },
                            );

                            if (!nearbyResponse.ok) {
                                throw new Error(`Nearby search failed: ${nearbyResponse.status}`);
                            }

                            const nearbyData = await nearbyResponse.json();

                            if (!nearbyData.data || nearbyData.data.length === 0) {
                                console.log('No nearby places found');
                                return {
                                    results: [],
                                    center: { lat: finalLat, lng: finalLng },
                                };
                            }

                            // Process each place
                            const detailedPlaces = await Promise.all(
                                nearbyData.data.map(async (place: any) => {
                                    try {
                                        if (!place.location_id) {
                                            console.log(`Skipping place "${place.name}": No location_id`);
                                            return null;
                                        }

                                        // Fetch place details
                                        const detailsResponse = await fetch(
                                            `https://api.content.tripadvisor.com/api/v1/location/${place.location_id}/details?language=en&currency=USD&key=${apiKey}`,
                                            {
                                                method: 'GET',
                                                headers: {
                                                    Accept: 'application/json',
                                                    origin: 'https://mplx.local',
                                                    referer: 'https://mplx.local',
                                                },
                                            },
                                        );

                                        if (!detailsResponse.ok) {
                                            console.log(`Failed to fetch details for "${place.name}"`);
                                            return null;
                                        }

                                        const details = await detailsResponse.json();

                                        console.log(`Place details for "${place.name}":`, details);

                                        // Fetch place photos
                                        let photos = [];
                                        try {
                                            const photosResponse = await fetch(
                                                `https://api.content.tripadvisor.com/api/v1/location/${place.location_id}/photos?language=en&key=${apiKey}`,
                                                {
                                                    method: 'GET',
                                                    headers: {
                                                        Accept: 'application/json',
                                                        origin: 'https://mplx.local',
                                                        referer: 'https://mplx.local',
                                                    },
                                                },
                                            );

                                            if (photosResponse.ok) {
                                                const photosData = await photosResponse.json();
                                                photos =
                                                    photosData.data
                                                        ?.map((photo: any) => ({
                                                            thumbnail: photo.images?.thumbnail?.url,
                                                            small: photo.images?.small?.url,
                                                            medium: photo.images?.medium?.url,
                                                            large: photo.images?.large?.url,
                                                            original: photo.images?.original?.url,
                                                            caption: photo.caption,
                                                        }))
                                                        .filter((photo: any) => photo.medium) || [];
                                            }
                                        } catch (error) {
                                            console.log(`Photo fetch failed for "${place.name}":`, error);
                                        }

                                        // Get timezone for the location
                                        const tzResponse = await fetch(
                                            `https://maps.googleapis.com/maps/api/timezone/json?location=${
                                                details.latitude
                                            },${details.longitude}&timestamp=${Math.floor(Date.now() / 1000)}&key=${
                                                serverEnv.GOOGLE_MAPS_API_KEY
                                            }`,
                                        );
                                        const tzData = await tzResponse.json();
                                        const timezone = tzData.timeZoneId || 'UTC';

                                        // Process hours and status with timezone
                                        const localTime = new Date(
                                            new Date().toLocaleString('en-US', {
                                                timeZone: timezone,
                                            }),
                                        );
                                        const currentDay = localTime.getDay();
                                        const currentHour = localTime.getHours();
                                        const currentMinute = localTime.getMinutes();
                                        const currentTime = currentHour * 100 + currentMinute;

                                        let is_closed = true;
                                        let next_open_close = null;
                                        let next_day = currentDay;

                                        if (details.hours?.periods) {
                                            // Sort periods by day and time for proper handling of overnight hours
                                            const sortedPeriods = [...details.hours.periods].sort((a, b) => {
                                                if (a.open.day !== b.open.day) return a.open.day - b.open.day;
                                                return parseInt(a.open.time) - parseInt(b.open.time);
                                            });

                                            // Find current or next opening period
                                            for (let i = 0; i < sortedPeriods.length; i++) {
                                                const period = sortedPeriods[i];
                                                const openTime = parseInt(period.open.time);
                                                const closeTime = period.close ? parseInt(period.close.time) : 2359;
                                                const periodDay = period.open.day;

                                                // Handle overnight hours
                                                if (closeTime < openTime) {
                                                    // Place is open from previous day
                                                    if (currentDay === periodDay && currentTime < closeTime) {
                                                        is_closed = false;
                                                        next_open_close = period.close.time;
                                                        break;
                                                    }
                                                    // Place is open today and extends to tomorrow
                                                    if (currentDay === periodDay && currentTime >= openTime) {
                                                        is_closed = false;
                                                        next_open_close = period.close.time;
                                                        next_day = (periodDay + 1) % 7;
                                                        break;
                                                    }
                                                } else {
                                                    // Normal hours within same day
                                                    if (
                                                        currentDay === periodDay &&
                                                        currentTime >= openTime &&
                                                        currentTime < closeTime
                                                    ) {
                                                        is_closed = false;
                                                        next_open_close = period.close.time;
                                                        break;
                                                    }
                                                }

                                                // Find next opening time if currently closed
                                                if (is_closed) {
                                                    if (
                                                        periodDay > currentDay ||
                                                        (periodDay === currentDay && openTime > currentTime)
                                                    ) {
                                                        next_open_close = period.open.time;
                                                        next_day = periodDay;
                                                        break;
                                                    }
                                                }
                                            }
                                        }

                                        // Return processed place data
                                        return {
                                            name: place.name || 'Unnamed Place',
                                            location: {
                                                lat: parseFloat(details.latitude || place.latitude || finalLat),
                                                lng: parseFloat(details.longitude || place.longitude || finalLng),
                                            },
                                            timezone,
                                            place_id: place.location_id,
                                            vicinity: place.address_obj?.address_string || '',
                                            distance: parseFloat(place.distance || '0'),
                                            bearing: place.bearing || '',
                                            type: type,
                                            rating: parseFloat(details.rating || '0'),
                                            price_level: details.price_level || '',
                                            cuisine: details.cuisine?.[0]?.name || '',
                                            description: details.description || '',
                                            phone: details.phone || '',
                                            website: details.website || '',
                                            reviews_count: parseInt(details.num_reviews || '0'),
                                            is_closed,
                                            hours: details.hours?.weekday_text || [],
                                            next_open_close,
                                            next_day,
                                            periods: details.hours?.periods || [],
                                            photos,
                                            source: details.source?.name || 'TripAdvisor',
                                        };
                                    } catch (error) {
                                        console.log(`Failed to process place "${place.name}":`, error);
                                        return null;
                                    }
                                }),
                            );

                            // Filter and sort results
                            const validPlaces = detailedPlaces
                                .filter((place) => place !== null)
                                .sort((a, b) => (a?.distance || 0) - (b?.distance || 0));

                            return {
                                results: validPlaces,
                                center: { lat: finalLat, lng: finalLng },
                            };
                        } catch (error) {
                            console.error('Nearby search error:', error);
                            throw error;
                        }
                    },
                }),
                track_flight: tool({
                    description: 'Track flight information and status',
                    parameters: z.object({
                        flight_number: z.string().describe('The flight number to track'),
                    }),
                    execute: async ({ flight_number }: { flight_number: string }) => {
                        try {
                            const response = await fetch(
                                `https://api.aviationstack.com/v1/flights?access_key=${serverEnv.AVIATION_STACK_API_KEY}&flight_iata=${flight_number}`,
                            );
                            return await response.json();
                        } catch (error) {
                            console.error('Flight tracking error:', error);
                            throw error;
                        }
                    },
                }),
            },
            onChunk(event) {
                if (event.chunk.type === 'tool-call') {
                    console.log('[API] Tool called:', event.chunk.toolName);
                }
            },
            onStepFinish(event) {
                if (event.warnings) {
                    console.warn('[API] Step warnings:', event.warnings);
                }
            },
            onFinish(event) {
                if (event.finishReason === 'error') {
                    console.error('[API] Stream finished with error:', event.response);
                } else {
                    console.log('[API] Finish reason:', event.finishReason);
                    console.log('[API] Steps:', event.steps);
                }
            },
        });

        try {
            console.log("[API] Creating stream response");
            return result.toDataStreamResponse({ getErrorMessage: errorHandler });
        } catch (error) {
            console.error('[API] Failed to create stream response:', error);
            throw new Error('Failed to create response stream');
        }
    } catch (error) {
        console.error('[API] Chat route error:', error);
        
        // Enhanced error handling with specific error types
        let statusCode = 500;
        let errorMessage = 'An unexpected error occurred';
        let errorCode = 'INTERNAL_SERVER_ERROR';

        if (error instanceof Error) {
            // Parse validation errors
            if (error.message.includes('parse') || error.message.includes('Invalid')) {
                statusCode = 400;
                errorCode = 'VALIDATION_ERROR';
                errorMessage = error.message;
            } 
            // Configuration errors
            else if (error.message.includes('not configured')) {
                statusCode = 503;
                errorCode = 'SERVICE_UNAVAILABLE';
                errorMessage = 'Service is temporarily unavailable';
            }
            // API rate limits
            else if (error.message.includes('rate limit') || error.message.includes('429')) {
                statusCode = 429;
                errorCode = 'RATE_LIMIT_EXCEEDED';
                errorMessage = 'Rate limit exceeded. Please try again later';
            }
            // Authentication errors
            else if (error.message.includes('unauthorized') || error.message.includes('authentication')) {
                statusCode = 401;
                errorCode = 'UNAUTHORIZED';
                errorMessage = 'Authentication failed';
            }
            // Model errors
            else if (error.message.includes('model')) {
                statusCode = 400;
                errorCode = 'MODEL_ERROR';
                errorMessage = error.message;
            }
            // Stream errors
            else if (error.message.includes('stream')) {
                statusCode = 500;
                errorCode = 'STREAM_ERROR';
                errorMessage = 'Failed to create response stream';
            }
            // Default error handling
            else {
                errorMessage = error.message;
            }
        }

        // Create a detailed error response
        const errorResponse = {
            error: errorMessage,
            code: errorCode,
            status: statusCode,
            timestamp: new Date().toISOString(),
            request_id: crypto.randomUUID(),
            details: process.env.NODE_ENV === 'development' ? {
                stack: error instanceof Error ? error.stack : undefined,
                cause: error instanceof Error ? error.cause : undefined,
                name: error instanceof Error ? error.name : undefined,
            } : undefined,
        };

        // Log the error details for debugging
        console.error('[API] Error details:', {
            ...errorResponse,
            stack: error instanceof Error ? error.stack : undefined,
        });

        return new Response(JSON.stringify(errorResponse), {
            status: statusCode,
            headers: {
                'Content-Type': 'application/json',
                'Cache-Control': 'no-store, must-revalidate',
                'X-Error-Code': errorCode,
                'X-Request-ID': errorResponse.request_id,
            },
        });
    }
}

================
File: app/api/clean_images/route.ts
================
import { serverEnv } from '@/env/server';
import { del, list, ListBlobResult } from '@vercel/blob';
import { NextRequest, NextResponse } from 'next/server';

export const runtime = 'edge';

export async function GET(req: NextRequest) {
    if (req.headers.get('Authorization') !== `Bearer ${serverEnv.CRON_SECRET}`) {
        return new NextResponse('Unauthorized', { status: 401 });
    }

    try {
        await deleteAllBlobsInFolder('mplx/');
        return new NextResponse('All images in mplx/ folder were deleted', {
            status: 200,
        });
    } catch (error) {
        console.error('An error occurred:', error);
        return new NextResponse('An error occurred while deleting images', {
            status: 500,
        });
    }
}

async function deleteAllBlobsInFolder(folderPrefix: string) {
    let cursor;

    do {
        const listResult: ListBlobResult = await list({
            prefix: folderPrefix,
            cursor,
            limit: 1000,
        });

        if (listResult.blobs.length > 0) {
            await del(listResult.blobs.map((blob) => blob.url));
            console.log(`Deleted ${listResult.blobs.length} blobs`);
        }

        cursor = listResult.cursor;
    } while (cursor);

    console.log('All blobs in the specified folder were deleted');
}

================
File: app/api/trending/route.ts
================
import { google } from '@ai-sdk/google';
import { generateObject } from 'ai';
import { NextResponse } from 'next/server';
import { z } from 'zod';

export interface TrendingQuery {
    icon: string;
    text: string;
    category: string;
}

interface RedditPost {
    data: {
        title: string;
    };
}

async function fetchGoogleTrends(): Promise<TrendingQuery[]> {
    const fetchTrends = async (geo: string): Promise<TrendingQuery[]> => {
        try {
            const response = await fetch(`https://trends.google.com/trends/trendingsearches/daily/rss?geo=${geo}`, {
                headers: {
                    'User-Agent':
                        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
                },
            });

            if (!response.ok) {
                throw new Error(`Failed to fetch from Google Trends RSS for geo: ${geo}`);
            }

            const xmlText = await response.text();
            const items = xmlText.match(/<title>(?!Daily Search Trends)(.*?)<\/title>/g) || [];

            const categories = [
                'trending',
                'community',
                'science',
                'tech',
                'travel',
                'politics',
                'health',
                'sports',
                'finance',
                'football',
            ] as const;

            const schema = z.object({
                category: z.enum(categories),
            });

            const itemsWithCategoryAndIcon = await Promise.all(
                items.map(async (item) => {
                    const { object } = await generateObject({
                        model: google('gemini-2.0-flash-exp'),
                        prompt: `Give the category for the topic from the existing values only in lowercase only: ${item.replace(
                            /<\/?title>/g,
                            '',
                        )}

          - if the topic category isn't present in the list, please select 'trending' only!`,
                        schema,
                        temperature: 0,
                    });

                    return {
                        icon: object.category,
                        text: item.replace(/<\/?title>/g, ''),
                        category: object.category,
                    };
                }),
            );

            return itemsWithCategoryAndIcon;
        } catch (error) {
            console.error(`Failed to fetch Google Trends for geo: ${geo}`, error);
            return [];
        }
    };

    const trends = await fetchTrends('US');

    return [...trends];
}

async function fetchRedditQuestions(): Promise<TrendingQuery[]> {
    try {
        const response = await fetch('https://www.reddit.com/r/askreddit/hot.json?limit=100', {
            headers: {
                'User-Agent': 'Mojo/1.0',
            },
        });

        const data = await response.json();
        const maxLength = 50;

        return data.data.children
            .map((post: RedditPost) => ({
                icon: 'question',
                text: post.data.title,
                category: 'community',
            }))
            .filter((query: TrendingQuery) => query.text.length <= maxLength)
            .slice(0, 15);
    } catch (error) {
        console.error('Failed to fetch Reddit questions:', error);
        return [];
    }
}

async function fetchFromMultipleSources() {
    const [
        googleTrends,
        // redditQuestions
    ] = await Promise.all([
        fetchGoogleTrends(),
        // fetchRedditQuestions(),
    ]);

    const allQueries = [
        ...googleTrends,
        // ...redditQuestions
    ];
    return allQueries.sort(() => Math.random() - 0.5);
}

export async function GET(req: Request) {
    try {
        const trends = await fetchFromMultipleSources();

        if (trends.length === 0) {
            // Fallback queries if both sources fail
            console.error('Both sources failed to fetch trends, returning fallback queries');
            return NextResponse.json([
                {
                    icon: 'sparkles',
                    text: 'What causes the Northern Lights?',
                    category: 'science',
                },
                {
                    icon: 'code',
                    text: 'Explain quantum computing',
                    category: 'tech',
                },
                {
                    icon: 'globe',
                    text: 'Most beautiful places in Japan',
                    category: 'travel',
                },
            ]);
        }

        return NextResponse.json(trends);
    } catch (error) {
        console.error('Failed to fetch trends:', error);
        return NextResponse.error();
    }
}

================
File: app/api/upload/route.ts
================
import { put } from '@vercel/blob';
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
    const formData = await request.formData();
    const file = formData.get('file') as File;

    if (!file) {
        return NextResponse.json({ error: 'No file uploaded' }, { status: 400 });
    }

    try {
        const blob = await put(`mplx/image-${Date.now()}.${file.name.split('.').pop()}`, file, {
            access: 'public',
        });

        return NextResponse.json({
            name: file.name,
            contentType: file.type,
            url: blob.url,
            size: file.size, // Include the file size in the response
        });
    } catch (error) {
        console.error('Error uploading file:', error);
        return NextResponse.json({ error: 'Failed to upload file' }, { status: 500 });
    }
}

================
File: app/new/page.tsx
================
import { redirect } from 'next/navigation'

export default async function NewPage() {
  redirect('/')
}

================
File: app/search/page.tsx
================
import { redirect } from 'next/navigation'

export default async function NewPage() {
  redirect('/')
}

================
File: app/actions.ts
================
// app/actions.ts
'use server';

import { serverEnv } from '@/env/server';
import { SearchGroupId } from '@/lib/utils';
import { GoogleGenerativeAI } from '@google/generative-ai';
import { z } from 'zod';

export async function suggestQuestions(history: any[]) {
  'use server';

  console.log(history);

  const genAI = new GoogleGenerativeAI(serverEnv.GOOGLE_GENERATIVE_AI_API_KEY);
  const model = genAI.getGenerativeModel({ model: "gemini-pro" });

  const chat = model.startChat({
    history: history.map(msg => ({
      role: msg.role,
      parts: msg.content,
    })),
    generationConfig: {
      temperature: 0.9,
      maxOutputTokens: 8192,
    },
  });

  const result = await chat.sendMessage(`Generate 3 questions based on our conversation. Make them open-ended and encourage further discussion. Keep each question between 5-10 words.`);
  const response = await result.response;
  const questions = response.text().split('\n').filter((q: string) => q.trim().length > 0);

  return {
    questions: questions.slice(0, 3)
  };
}

const ELEVENLABS_API_KEY = serverEnv.ELEVENLABS_API_KEY;

export async function generateSpeech(text: string, voice: 'alloy' | 'echo' | 'fable' | 'onyx' | 'nova' | 'shimmer' = "alloy") {

  const VOICE_ID = 'Dnd9VXpAjEGXiRGBf1O6' // This is the ID for the "George" voice. Replace with your preferred voice ID.
  const url = `https://api.elevenlabs.io/v1/text-to-speech/${VOICE_ID}`
  const method = 'POST'

  if (!ELEVENLABS_API_KEY) {
    throw new Error('ELEVENLABS_API_KEY is not defined');
  }

  const headers = {
    Accept: 'audio/mpeg',
    'xi-api-key': ELEVENLABS_API_KEY,
    'Content-Type': 'application/json',
  }

  const data = {
    text,
    model_id: 'eleven_turbo_v2_5',
    voice_settings: {
      stability: 0.5,
      similarity_boost: 0.5,
    },
  }

  const body = JSON.stringify(data)

  const input = {
    method,
    headers,
    body,
  }

  const response = await fetch(url, input)

  const arrayBuffer = await response.arrayBuffer();

  const base64Audio = Buffer.from(arrayBuffer).toString('base64');

  return {
    audio: `data:audio/mp3;base64,${base64Audio}`,
  };
}

export async function fetchMetadata(url: string) {
  try {
    const response = await fetch(url, {
      cache: 'force-cache',
      next: { revalidate: 3600 } // 1 hour cache
    } as RequestInit & { next: { revalidate: number } });
    
    const html = await response.text();

    const titleMatch = html.match(/<title>(.*?)<\/title>/i);
    const descMatch = html.match(
      /<meta\s+name=["']description["']\s+content=["'](.*?)["']/i
    );

    const title = titleMatch ? titleMatch[1] : '';
    const description = descMatch ? descMatch[1] : '';

    return { title, description };
  } catch (error) {
    console.error('Error fetching metadata:', error);
    return null;
  }
}

const groupTools = {
  web: [
    'web_search', 'get_weather_data',
    'retrieve',
    'nearby_search', 'track_flight',
    'tmdb_search', 'trending_movies', 
    'trending_tv',
  ] as const,
  academic: ['academic_search', 'code_interpreter'] as const,
  youtube: ['youtube_search'] as const,
  analysis: ['code_interpreter', 'stock_chart', 'currency_converter'] as const,
  fun: [] as const,
} as const;

const groupPrompts = {
  web: `You are an AI web search engine called Mojo Search, designed to help users find information quickly and concisely.

CRITICAL INSTRUCTIONS:
1. ALWAYS search first - Run the web_search tool immediately for EVERY user query
2. Combine search results with your knowledge to provide accurate, focused answers
3. Never say you don't know without searching first
4. Cite sources briefly using [Source]
5. Today's date is ${new Date().toLocaleDateString("en-GB", { year: "numeric", month: "numeric", day: "numeric" })}

Response Structure:
1. Direct Answer (2-3 sentences with key facts)
2. Key Details (3-4 bullet points with supporting information)
3. Sources (Brief list of main sources used)

Keep responses focused and concise. Avoid unnecessary elaboration.`,
  academic: `You are an academic research assistant that helps find and analyze scholarly content.
    The current date is ${new Date().toLocaleDateString("en-US", { year: "numeric", month: "short", day: "2-digit", weekday: "short" })}.
    Focus on peer-reviewed papers, citations, and academic sources.
    Do not talk in bullet points or lists at all costs as it is unpresentable.
    Provide summaries, key points, and references.
    Latex should be wrapped with $ symbol for inline and $$ for block equations as they are supported in the response.
    No matter what happens, always provide the citations at the end of each paragraph and in the end of sentences where you use it in which they are referred to with the given format to the information provided.
    Citation format: [Author et al. (Year) Title](URL)
    Always run the tools first and then write the response.`,
  youtube: `You are a YouTube search assistant that helps find relevant videos and channels.
    Just call the tool and run the search and then talk in long details in 2-6 paragraphs.
    The current date is ${new Date().toLocaleDateString("en-US", { year: "numeric", month: "short", day: "2-digit", weekday: "short" })}.
    Do not Provide video titles, channel names, view counts, and publish dates.
    Do not talk in bullet points or lists at all costs.
    Provide complete explainations of the videos in paragraphs.
    Give citations with timestamps and video links to insightful content. Don't just put timestamp at 0:00.
    Citation format: [Title](URL ending with parameter t=<no_of_seconds>)
    Do not provide the video thumbnail in the response at all costs.`,
  analysis: `You are a code runner, stock analysis and currency conversion expert.
  
  - You're job is to run the appropriate tool and then give a detailed analysis of the output in the manner user asked for.
  - You will be asked university level questions, so be very innovative and detailed in your responses.
  - YOU MUST run the required tool first and then write the response!!!! RUN THE TOOL FIRST AND ONCE!!!
  - No need to ask for a follow-up question, just provide the analysis.
  - You can write in latex but currency should be in words or acronym like 'USD'.
  - Do not give up!


  # Latex and Currency Formatting to be used:
    - Always use '$' for inline equations and '$$' for block equations.
    - Avoid using '$' for dollar currency. Use "USD" instead.

  #### Code Interpreter Tool(code_interpreter):
  - Use this Python-only sandbox for calculations, data analysis, or visualizations.
  - You are here to do deep analysis and provide insights by running the code.
  - matplotlib, pandas, numpy, sympy, and yfinance are available.
  - Remember to add the necessary imports for the libraries you use as they are not pre-imported.
  - Include library installations (!pip install <library_name>) in the code where required.
  - You can generate line based charts for data analysis.
  - Use 'plt.show()' for plots, and mention generated URLs for outputs.
  - Images are not allowed in the response!
  - Keep your responses straightforward and concise. No need for citations and code explanations unless asked for.
  - Once you get the response from the tool, talk about output and insights comprehensively in paragraphs.
  - Do not write the code in the response, only the insights and analysis at all costs!!

  #### Stock Charts:
  - Assume stock names from user queries. If the symbol like Apples Stock symbol is given just start the generation Use the programming tool with Python code including 'yfinance'.
  - Once the response is ready, talk about the stock's performance and trends comprehensively in paragraphs.
  - Never mention the code in the response, only the insights and analysis.
  - Use yfinance to get the stock news, and trends using the search method in yfinance.
  - Do not use images in the response.
  
    #### Currency Formatting:
    - Always mention symbol as 'USD' in words since latex is supported in this tool and causes issues with currency symbols.
  
  ### Currency Conversion:
  - Use the 'currency_converter' tool for currency conversion by providing the to and from currency codes.
`,
  fun: `You are a fun and engaging AI assistant that helps users with entertainment and leisure activities.
    The current date is ${new Date().toLocaleDateString("en-US", { year: "numeric", month: "short", day: "2-digit", weekday: "short" })}.
    Focus on providing engaging and entertaining responses.
    Keep the tone light and friendly while maintaining accuracy.
    Feel free to use appropriate emojis and casual language.
    Always aim to make the interaction enjoyable while being helpful.`,
} as const;

export async function getGroupConfig(group: SearchGroupId) {
  "use server";
  const tools = groupTools[group];
  const systemPrompt = groupPrompts[group];

  return {
    tools,
    systemPrompt
  };
}

================
File: app/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* Import fonts */
@import url('https://fonts.googleapis.com/css2?family=Dosis:wght@200;300;400;500;600;700;800&display=swap');
@import url('https://fonts.googleapis.com/css2?family=Lato:wght@300;400;700;900&display=swap');

/* Proxima Nova needs to be added via @font-face since it's not freely available on Google Fonts */
@font-face {
    font-family: 'Proxima Nova';
    src: url('/fonts/proxima-nova-regular.woff2') format('woff2');
    font-weight: 400;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: 'Proxima Nova';
    src: url('/fonts/proxima-nova-medium.woff2') format('woff2');
    font-weight: 500;
    font-style: normal;
    font-display: swap;
}

@font-face {
    font-family: 'Proxima Nova';
    src: url('/fonts/proxima-nova-semibold.woff2') format('woff2');
    font-weight: 600;
    font-style: normal;
    font-display: swap;
}

.homeBtn {
  box-shadow: rgba(0, 0, 0, 0.4) 0px 2px 4px,
    rgba(0, 0, 0, 0.3) 0px 7px 13px -3px, rgba(0, 0, 0, 0.2) 0px -3px 0px inset,
    inset 0 1px 0 0 #ffffff52;
}

.markdown-body .katex {
  font-size: 1.1em;
}

.markdown-body .katex-display {
  overflow-x: auto;
  overflow-y: hidden;
  padding-top: 0.5em;
  padding-bottom: 0.5em;
  margin-top: 1em;
  margin-bottom: 1em;
}

.markdown-body .katex-display>.katex {
  font-size: 1.21em;
}

.markdown-body .katex-display>.katex>.katex-html {
  display: block;
  position: relative;
}

.markdown-body .katex-display>.katex>.katex-html>.tag {
  position: absolute;
  right: 0;
}

@layer utilities {

  /* Hide scrollbar for Chrome, Safari and Opera */
  .no-scrollbar::-webkit-scrollbar {
    display: none;
  }

  /* Hide scrollbar for IE, Edge and Firefox */
  .no-scrollbar {
    -ms-overflow-style: none;
    /* IE and Edge */
    scrollbar-width: none;
    /* Firefox */
  }
}

.tweet-container {
  display: flex;
  flex-direction: column;
}

.tweet-container>div {
  flex: 1;
}

h1 {
  font-family: var(--font-syne);
}

.gradient-mask {
  mask-image: linear-gradient(to bottom, black 30%, transparent 100%);
  -webkit-mask-image: linear-gradient(to bottom, black 30%, transparent 100%);
}

@layer utilities {
  .text-balance {
    text-wrap: balance;
  }
}

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;
    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
    --radius: 0.5rem;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --font-dosis: 'Dosis', sans-serif;
    --font-lato: 'Lato', system-ui, sans-serif;
    --shadow-sm: 0 1px 2px 0 rgb(0 0 0 / 0.05);
    --shadow-md: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1);
    --shadow-lg: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
  }

  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }

  h1, h2, h3, h4, h5, h6 {
    font-family: var(--font-dosis);
  }

  body {
    @apply bg-background text-foreground;
    font-family: var(--font-lato);
  }

  /* Enhanced Typography */
  h1 {
    @apply text-4xl md:text-5xl lg:text-6xl font-bold tracking-tight;
    line-height: 1.1;
  }

  h2 {
    @apply text-3xl md:text-4xl font-semibold tracking-tight;
    line-height: 1.2;
  }

  h3 {
    @apply text-2xl md:text-3xl font-semibold tracking-tight;
    line-height: 1.3;
  }

  p {
    @apply leading-relaxed text-base md:text-lg;
  }

  /* Smooth Scrolling */
  html {
    scroll-behavior: smooth;
  }

  /* Enhanced Interactive Elements */
  button, 
  a {
    @apply transition-all duration-200;
  }

  /* Card-like elements */
  .card {
    @apply bg-card rounded-lg border border-border/40 shadow-sm hover:shadow-md transition-all duration-200;
  }

  /* Container width */
  .container {
    @apply mx-auto px-4 max-w-7xl;
  }

  /* Section spacing */
  section {
    @apply py-12 md:py-16 lg:py-20;
  }
}

@layer base {
  * {
    @apply border-border;
  }

  body {
    @apply bg-background text-foreground;
  }
}

@layer utilities {
  /* Hover animations */
  .hover-scale {
    @apply transition-transform duration-200 hover:scale-[1.02];
  }

  /* Text gradient */
  .text-gradient {
    @apply bg-clip-text text-transparent bg-gradient-to-r from-primary to-primary/80;
  }

  /* Glass effect */
  .glass {
    @apply bg-background/80 backdrop-blur-sm border border-border/50;
  }
}

================
File: app/layout.tsx
================
import { Analytics } from "@vercel/analytics/react";
import { GeistSans } from 'geist/font/sans';
import 'katex/dist/katex.min.css';
import 'mapbox-gl/dist/mapbox-gl.css';
import { Metadata, Viewport } from "next";
import { Instrument_Serif, Syne } from 'next/font/google';
import { NuqsAdapter } from 'nuqs/adapters/next/app';
import { Toaster } from "sonner";
import "./globals.css";
import { Providers } from './providers';

export const metadata: Metadata = {
  metadataBase: new URL("https://mojo.sixtyoneeightyai.com"),
  title: "Mojo",
  description: "Mojo is a minimalistic AI-powered search engine that helps you find information on the internet.",
  openGraph: {
    url: "https://mojo.sixtyoneeightyai.com",
    siteName: "Mojo",
  },
  keywords: [
    "Mojo",
    "Mojo.app",
    "Mojo ai app",
    "Mojo",
    "Mojo AI",
    "AI Search Engine",
    "search engine",
    "AI",
    "ai search engine",
  ]
};

export const viewport: Viewport = {
  width: "device-width",
  initialScale: 1,
  minimumScale: 1,
  maximumScale: 1,
  userScalable: false,
}

const syne = Syne({ 
  subsets: ['latin'], 
  variable: '--font-syne',
   preload: true,
  display: 'swap',
});

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={`${GeistSans.variable} ${syne.variable} font-sans antialiased`}>
        <NuqsAdapter>
          <Providers>
            <Toaster position="top-center" richColors />
            {children}
          </Providers>
        </NuqsAdapter>
        <Analytics />
      </body>
    </html>
  );
}

================
File: app/manifest.ts
================
import type { MetadataRoute } from 'next'
 
export default function manifest(): MetadataRoute.Manifest {
  return {
    name: "Mojo - AI-powered Search Engine",
    short_name: "Mojo",
    description: "A minimalistic AI-powered search engine that helps you find information on the internet using advanced AI models like GPT-4, Claude, and Grok",
    start_url: "/",
    display: "standalone",
    categories: ["search", "ai", "productivity"],
    icons: [
      {
        src: "/favicon.ico",
        sizes: "any",
        type: "image/x-icon"
      },
      {
        src: "/icon.png",
        sizes: "192x192",
        type: "image/png"
      },
      {
        src: "/apple-icon.png",
        sizes: "180x180",
        type: "image/png"
      }
    ],
    screenshots: [
      {
        src: "/opengraph-image.png",
        type: "image/png",
        sizes: "1200x630",
      }
    ]
  }
}

================
File: app/page.tsx
================
/* eslint-disable @next/next/no-img-element */
"use client";
import 'katex/dist/katex.min.css';

import { BorderTrail } from '@/components/core/border-trail';
import { TextShimmer } from '@/components/core/text-shimmer';
import { FlightTracker } from '@/components/flight-tracker';
import { InstallPrompt } from '@/components/InstallPrompt';
import InteractiveChart from '@/components/interactive-charts';
import { MapComponent, MapContainer } from '@/components/map-components';
import TMDBResult from '@/components/movie-info';
import MultiSearch from '@/components/multi-search';
import NearbySearchMapView from '@/components/nearby-search-map-view';
import TrendingResults from '@/components/trending-tv-movies-results';
import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/ui/accordion";
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import {
    Card,
    CardContent,
    CardHeader,
    CardTitle,
} from "@/components/ui/card";
import {
    Dialog,
    DialogContent,
    DialogTrigger,
} from "@/components/ui/dialog";
import {
    Drawer,
    DrawerClose,
    DrawerContent,
    DrawerFooter,
    DrawerHeader,
    DrawerTitle,
    DrawerTrigger,
} from "@/components/ui/drawer";
import FormComponent from '@/components/ui/form-component';
import {
    HoverCard,
    HoverCardContent,
    HoverCardTrigger,
} from "@/components/ui/hover-card";
import { Input } from '@/components/ui/input';
import { Separator } from '@/components/ui/separator';
import { Sheet, SheetContent, SheetHeader, SheetTitle, SheetTrigger } from "@/components/ui/sheet";
import {
    Tooltip,
    TooltipContent,
    TooltipProvider,
    TooltipTrigger,
} from "@/components/ui/tooltip";
import WeatherChart from '@/components/weather-chart';
import { useMediaQuery } from '@/hooks/use-media-query';
import { cn, SearchGroupId } from '@/lib/utils';
import { Wave } from "@foobar404/wave";
import { CheckCircle, CurrencyDollar, Flag, GithubLogo, Info, RoadHorizon, SoccerBall, TennisBall, XLogo } from '@phosphor-icons/react';
import { TextIcon } from '@radix-ui/react-icons';
import { ToolInvocation } from 'ai';
import { useChat } from 'ai/react';
import { AnimatePresence, motion } from 'framer-motion';
import { GeistMono } from 'geist/font/mono';
import {
    AlignLeft,
    ArrowRight,
    Book,
    Brain,
    Building,
    Calculator,
    Calendar,
    Check,
    ChevronDown,
    Cloud,
    Code,
    Copy,
    Download,
    Edit2,
    ExternalLink,
    FileText,
    Film,
    Globe,
    GraduationCap,
    Heart,
    Loader2,
    LucideIcon,
    MapPin,
    Moon,
    Pause,
    Plane,
    Play,
    Plus,
    Search,
    Share2,
    Sparkles,
    Sun,
    TrendingUp,
    TrendingUpIcon,
    Tv,
    User2,
    Users,
    X,
    YoutubeIcon,
    Zap
} from 'lucide-react';
import Marked, { ReactRenderer } from 'marked-react';
import { useTheme } from 'next-themes';
import Image from 'next/image';
import Link from 'next/link';
import { parseAsString, useQueryState } from 'nuqs';
import React, {
    memo,
    Suspense,
    useCallback,
    useEffect,
    useMemo,
    useRef,
    useState
} from 'react';
import Latex from 'react-latex-next';
import ReactMarkdown from 'react-markdown';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { atomDark, vs } from 'react-syntax-highlighter/dist/cjs/styles/prism';
import { oneDark, oneLight } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { Tweet } from 'react-tweet';
import { toast } from 'sonner';
import {
    fetchMetadata,
    generateSpeech,
    suggestQuestions
} from './actions';
import { TrendingQuery } from './api/trending/route';
import InteractiveStockChart from '@/components/interactive-stock-chart';
import { CurrencyConverter } from '@/components/currency_conv';
import { Logo } from '@/components/core/logo';

export const maxDuration = 60;

interface Attachment {
    name: string;
    contentType: string;
    url: string;
    size: number;
}

interface XResult {
    id: string;
    url: string;
    title: string;
    author?: string;
    publishedDate?: string;
    text: string;
    highlights?: string[];
    tweetId: string;
}

interface AcademicResult {
    title: string;
    url: string;
    author?: string | null;
    publishedDate?: string;
    summary: string;
}

const SearchLoadingState = ({
    icon: Icon,
    text,
    color
}: {
    icon: LucideIcon,
    text: string,
    color: "red" | "green" | "orange" | "violet" | "gray" | "blue"
}) => {
    const colorVariants = {
        red: {
            background: "bg-red-50 dark:bg-red-950",
            border: "from-red-200 via-red-500 to-red-200 dark:from-red-400 dark:via-red-500 dark:to-red-700",
            text: "text-red-500",
            icon: "text-red-500"
        },
        green: {
            background: "bg-green-50 dark:bg-green-950",
            border: "from-green-200 via-green-500 to-green-200 dark:from-green-400 dark:via-green-500 dark:to-green-700",
            text: "text-green-500",
            icon: "text-green-500"
        },
        orange: {
            background: "bg-orange-50 dark:bg-orange-950",
            border: "from-orange-200 via-orange-500 to-orange-200 dark:from-orange-400 dark:via-orange-500 dark:to-orange-700",
            text: "text-orange-500",
            icon: "text-orange-500"
        },
        violet: {
            background: "bg-violet-50 dark:bg-violet-950",
            border: "from-violet-200 via-violet-500 to-violet-200 dark:from-violet-400 dark:via-violet-500 dark:to-violet-700",
            text: "text-violet-500",
            icon: "text-violet-500"
        },
        gray: {
            background: "bg-neutral-50 dark:bg-neutral-950",
            border: "from-neutral-200 via-neutral-500 to-neutral-200 dark:from-neutral-400 dark:via-neutral-500 dark:to-neutral-700",
            text: "text-neutral-500",
            icon: "text-neutral-500"
        },
        blue: {
            background: "bg-blue-50 dark:bg-blue-950",
            border: "from-blue-200 via-blue-500 to-blue-200 dark:from-blue-400 dark:via-blue-500 dark:to-blue-700",
            text: "text-blue-500",
            icon: "text-blue-500"
        }
    };

    const variant = colorVariants[color];

    return (
        <Card className="relative w-full h-[100px] my-4 overflow-hidden shadow-none">
            <BorderTrail
                className={cn(
                    'bg-gradient-to-l',
                    variant.border
                )}
                size={80}
            />
            <CardContent className="p-6">
                <div className="relative flex items-center justify-between">
                    <div className="flex items-center gap-3">
                        <div className={cn(
                            "relative h-10 w-10 rounded-full flex items-center justify-center",
                            variant.background
                        )}>
                            <BorderTrail
                                className={cn(
                                    "bg-gradient-to-l",
                                    variant.border
                                )}
                                size={40}
                            />
                            <Icon className={cn("h-5 w-5", variant.icon)} />
                        </div>
                        <div className="space-y-2">
                            <TextShimmer
                                className="text-base font-medium"
                                duration={2}
                            >
                                {text}
                            </TextShimmer>
                            <div className="flex gap-2">
                                {[...Array(3)].map((_, i) => (
                                    <div
                                        key={i}
                                        className="h-1.5 rounded-full bg-neutral-200 dark:bg-neutral-700 animate-pulse"
                                        style={{
                                            width: `${Math.random() * 40 + 20}px`,
                                            animationDelay: `${i * 0.2}s`
                                        }}
                                    />
                                ))}
                            </div>
                        </div>
                    </div>
                </div>
            </CardContent>
        </Card>
    );
};

interface VideoDetails {
    title?: string;
    author_name?: string;
    author_url?: string;
    thumbnail_url?: string;
    type?: string;
    provider_name?: string;
    provider_url?: string;
    height?: number;
    width?: number;
}

interface VideoResult {
    videoId: string;
    url: string;
    details?: VideoDetails;
    captions?: string;
    timestamps?: string[];
    views?: string;
    likes?: string;
    summary?: string;
}

interface YouTubeSearchResponse {
    results: VideoResult[];
}

interface YouTubeCardProps {
    video: VideoResult;
    index: number;
}

const PeerlistLogo = () => {
    return (
        <svg
            width="24px"
            height="24px"
            viewBox="0 0 24 24"
            strokeWidth="1.5"
            fill="none"
            xmlns="http://www.w3.org/2000/svg"
            className="text-current"
        >
            <path
                d="M8.87026 3H15.1297C18.187 3 20.7554 5.29881 21.093 8.33741L21.3037 10.2331C21.4342 11.4074 21.4342 12.5926 21.3037 13.7669L21.093 15.6626C20.7554 18.7012 18.187 21 15.1297 21H8.87026C5.81296 21 3.24458 18.7012 2.90695 15.6626L2.69632 13.7669C2.56584 12.5926 2.56584 11.4074 2.69632 10.2331L2.90695 8.33741C3.24458 5.29881 5.81296 3 8.87026 3Z"
                stroke="currentColor"
                strokeWidth="1.5"
                strokeLinecap="round"
                strokeLinejoin="round"
            />
            <path
                d="M9 17L9 13M9 13L9 7L13 7C14.6569 7 16 8.34315 16 10V10C16 11.6569 14.6569 13 13 13L9 13Z"
                stroke="currentColor"
                strokeWidth="1.5"
                strokeLinecap="round"
                strokeLinejoin="round"
            />
        </svg>
    );
};

const VercelIcon = ({ size = 16 }: { size: number }) => {
    return (
        <svg
            height={size}
            strokeLinejoin="round"
            viewBox="0 0 16 16"
            width={size}
            style={{ color: "currentcolor" }}
        >
            <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M8 1L16 15H0L8 1Z"
                fill="currentColor"
            ></path>
        </svg>
    );
};

const TooltipButton = ({ href, tooltip, children }: {
    href: string;
    tooltip: string;
    children: React.ReactNode;
}) => {
    return (
        <Tooltip delayDuration={0}>
            <TooltipTrigger asChild>
                <Link
                    href={href}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="text-sm hover:text-neutral-800 dark:hover:text-neutral-200 transition-colors text-neutral-600 dark:text-neutral-400"
                >
                    {children}
                </Link>
            </TooltipTrigger>
            <TooltipContent
                side="top"
                className="bg-neutral-800 text-neutral-200 dark:bg-neutral-200 dark:text-neutral-800"
            >
                {tooltip}
            </TooltipContent>
        </Tooltip>
    );
};

const IconMapping: Record<string, LucideIcon> = {
    stock: TrendingUp,
    default: Code,
    date: Calendar,
    calculation: Calculator,
    output: FileText
};

interface CollapsibleSectionProps {
    code: string;
    output?: string;
    language?: string;
    title?: string;
    icon?: string;
    status?: 'running' | 'completed';
}

function CollapsibleSection({
    code,
    output,
    language = "plaintext",
    title,
    icon,
    status,
}: CollapsibleSectionProps) {
    const [copied, setCopied] = React.useState(false);
    const [isExpanded, setIsExpanded] = React.useState(true);
    const [activeTab, setActiveTab] = React.useState<'code' | 'output'>('code');
    const { theme } = useTheme();
    const IconComponent = icon ? IconMapping[icon] : null;

    const handleCopy = async (e: React.MouseEvent) => {
        e.stopPropagation();
        const textToCopy = activeTab === 'code' ? code : output;
        await navigator.clipboard.writeText(textToCopy || '');
        setCopied(true);
        setTimeout(() => setCopied(false), 2000);
    };

    return (
        <div className="group rounded-lg border border-neutral-200 dark:border-neutral-800 overflow-hidden transition-all duration-200 hover:shadow-sm">
            <div
                className="flex items-center justify-between px-4 py-3 cursor-pointer bg-white dark:bg-neutral-900 transition-colors hover:bg-neutral-50 dark:hover:bg-neutral-800/50"
                onClick={() => setIsExpanded(!isExpanded)}
            >
                <div className="flex items-center gap-3">
                    {IconComponent && (
                        <div className="flex items-center justify-center w-8 h-8 rounded-lg bg-neutral-100 dark:bg-neutral-800">
                            <IconComponent className="h-4 w-4 text-primary" />
                        </div>
                    )}
                    <h3 className="text-sm font-medium text-neutral-900 dark:text-neutral-100">
                        {title}
                    </h3>
                </div>
                <div className="flex items-center gap-2">
                    {status && (
                        <Badge
                            variant="secondary"
                            className={cn(
                                "w-fit flex items-center gap-1.5 px-1.5 py-0.5 text-xs",
                                status === 'running'
                                    ? "bg-blue-50/50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400"
                                    : "bg-green-50/50 dark:bg-green-900/20 text-green-600 dark:text-green-400"
                            )}
                        >
                            {status === 'running' ? (
                                <Loader2 className="h-3 w-3 animate-spin" />
                            ) : (
                                <CheckCircle className="h-3 w-3" />
                            )}
                            {status === 'running' ? "Running" : "Done"}
                        </Badge>
                    )}
                    <ChevronDown
                        className={cn(
                            "h-4 w-4 transition-transform duration-200",
                            !isExpanded && "-rotate-90"
                        )}
                    />
                </div>
            </div>

            {isExpanded && (
                <div>
                    <div className="flex border-b border-neutral-200 dark:border-neutral-800">
                        <button
                            className={cn(
                                "px-4 py-2 text-sm font-medium transition-colors",
                                activeTab === 'code'
                                    ? "border-b-2 border-primary text-primary"
                                    : "text-neutral-600 dark:text-neutral-400"
                            )}
                            onClick={() => setActiveTab('code')}
                        >
                            Code
                        </button>
                        {output && (
                            <button
                                className={cn(
                                    "px-4 py-2 text-sm font-medium transition-colors",
                                    activeTab === 'output'
                                        ? "border-b-2 border-primary text-primary"
                                        : "text-neutral-600 dark:text-neutral-400"
                                )}
                                onClick={() => setActiveTab('output')}
                            >
                                Output
                            </button>
                        )}
                        <div className="ml-auto pr-2 flex items-center">
                            <Button
                                size="sm"
                                variant="ghost"
                                className="opacity-0 group-hover:opacity-100 transition-opacity duration-200"
                                onClick={handleCopy}
                            >
                                {copied ? (
                                    <Check className="h-3.5 w-3.5 text-green-500" />
                                ) : (
                                    <Copy className="h-3.5 w-3.5" />
                                )}
                            </Button>
                        </div>
                    </div>
                    <div className={cn(
                        "text-sm",
                        theme === "dark" ? "bg-[rgb(40,44,52)]" : "bg-[rgb(250,250,250)]"
                    )}>
                        <SyntaxHighlighter
                            language={activeTab === 'code' ? language : 'plaintext'}
                            style={theme === "dark" ? oneDark : oneLight}
                            showLineNumbers
                            customStyle={{
                                margin: 0,
                                padding: "1rem",
                                fontSize: "0.813rem",
                                background: "transparent",
                            }}
                        >
                            {activeTab === 'code' ? code : output || ''}
                        </SyntaxHighlighter>
                    </div>
                </div>
            )}
        </div>
    );
}

const YouTubeCard: React.FC<YouTubeCardProps> = ({ video, index }) => {
    const [timestampsExpanded, setTimestampsExpanded] = useState(false);
    const [transcriptExpanded, setTranscriptExpanded] = useState(false);

    if (!video) return null;

    return (
        <motion.div
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: index * 0.1 }}
            className="w-[300px] flex-shrink-0 relative rounded-xl dark:bg-neutral-800/50 bg-gray-50 overflow-hidden"
        >
            <Link
                href={video.url}
                target="_blank"
                rel="noopener noreferrer"
                className="relative aspect-video block bg-neutral-200 dark:bg-neutral-700"
            >
                {video.details?.thumbnail_url ? (
                    <img
                        src={video.details.thumbnail_url}
                        alt={video.details?.title || 'Video thumbnail'}
                        className="w-full h-full object-cover"
                        loading="lazy"
                    />
                ) : (
                    <div className="absolute inset-0 flex items-center justify-center">
                        <YoutubeIcon className="h-8 w-8 text-neutral-400" />
                    </div>
                )}
                <div className="absolute inset-0 bg-black/60 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity">
                    <YoutubeIcon className="h-12 w-12 text-red-500" />
                </div>
            </Link>

            <div className="p-4 flex flex-col gap-3">
                <div className="space-y-2">
                    <Link
                        href={video.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-base font-medium line-clamp-2 hover:text-red-500 transition-colors dark:text-neutral-100"
                    >
                        {video.details?.title || 'YouTube Video'}
                    </Link>

                    {video.details?.author_name && (
                        <Link
                            href={video.details.author_url || video.url}
                            target="_blank"
                            rel="noopener noreferrer"
                            className="flex items-center gap-2 group w-fit"
                        >
                            <div className="h-6 w-6 rounded-full bg-red-50 dark:bg-red-950 flex items-center justify-center flex-shrink-0">
                                <User2 className="h-4 w-4 text-red-500" />
                            </div>
                            <span className="text-sm text-neutral-600 dark:text-neutral-400 group-hover:text-red-500 transition-colors truncate">
                                {video.details.author_name}
                            </span>
                        </Link>
                    )}
                </div>

                {(video.timestamps && video.timestamps?.length > 0 || video.captions) && (
                    <div className="space-y-3">
                        <Separator />

                        {video.timestamps && video.timestamps.length > 0 && (
                            <div className="space-y-2">
                                <div className="flex items-center justify-between">
                                    <h4 className="text-xs font-medium dark:text-neutral-300">Key Moments</h4>
                                    <Button
                                        variant="ghost"
                                        size="sm"
                                        onClick={() => setTimestampsExpanded(!timestampsExpanded)}
                                        className="h-6 px-2 text-xs hover:bg-neutral-100 dark:hover:bg-neutral-800"
                                    >
                                        {timestampsExpanded ? 'Show Less' : `Show All (${video.timestamps.length})`}
                                    </Button>
                                </div>
                                <div className={cn(
                                    "space-y-1.5 overflow-hidden transition-all duration-300",
                                    timestampsExpanded ? "max-h-[300px] overflow-y-auto" : "max-h-[72px]"
                                )}>
                                    {video.timestamps
                                        .slice(0, timestampsExpanded ? undefined : 3)
                                        .map((timestamp, i) => (
                                            <div
                                                key={i}
                                                className="text-xs dark:text-neutral-400 text-neutral-600 line-clamp-1"
                                            >
                                                {timestamp}
                                            </div>
                                        ))}
                                </div>
                            </div>
                        )}

                        {video.captions && (
                            <>
                                {video.timestamps && video.timestamps!.length > 0 && <Separator />}
                                <div className="space-y-2">
                                    <div className="flex items-center justify-between">
                                        <h4 className="text-xs font-medium dark:text-neutral-300">Transcript</h4>
                                        <Button
                                            variant="ghost"
                                            size="sm"
                                            onClick={() => setTranscriptExpanded(!transcriptExpanded)}
                                            className="h-6 px-2 text-xs hover:bg-neutral-100 dark:hover:bg-neutral-800"
                                        >
                                            {transcriptExpanded ? 'Hide' : 'Show'}
                                        </Button>
                                    </div>
                                    {transcriptExpanded && (
                                        <div className="text-xs dark:text-neutral-400 text-neutral-600 max-h-[200px] overflow-y-auto rounded-md bg-neutral-100 dark:bg-neutral-900 p-3">
                                            <p className="whitespace-pre-wrap">
                                                {video.captions}
                                            </p>
                                        </div>
                                    )}
                                </div>
                            </>
                        )}
                    </div>
                )}
            </div>
        </motion.div>
    );
};

const HomeContent = () => {
    const [query] = useQueryState('query', parseAsString.withDefault(''))
    const [q] = useQueryState('q', parseAsString.withDefault(''))
    const [model] = useQueryState('model', parseAsString.withDefault('gemini-2.0-flash-exp'))


    const initialState = useMemo(() => ({
        query: query || q,
        model: model
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }), []);

    const lastSubmittedQueryRef = useRef(initialState.query);
    const [hasSubmitted, setHasSubmitted] = useState(() => !!initialState.query);
    const [selectedModel, setSelectedModel] = useState(initialState.model);
    const bottomRef = useRef<HTMLDivElement>(null);
    const [suggestedQuestions, setSuggestedQuestions] = useState<string[]>([]);
    const [isEditingMessage, setIsEditingMessage] = useState(false);
    const [editingMessageIndex, setEditingMessageIndex] = useState(-1);
    const [attachments, setAttachments] = useState<Attachment[]>([]);
    const fileInputRef = useRef<HTMLInputElement>(null);
    const inputRef = useRef<HTMLTextAreaElement>(null);
    const initializedRef = useRef(false);
    const [selectedGroup, setSelectedGroup] = useState<SearchGroupId>('web');

    const CACHE_KEY = 'trendingQueriesCache';
    const CACHE_DURATION = 5 * 60 * 60 * 1000; // 5 hours in milliseconds

    interface TrendingQueriesCache {
        data: TrendingQuery[];
        timestamp: number;
    }

    const getTrendingQueriesFromCache = (): TrendingQueriesCache | null => {
        if (typeof window === 'undefined') return null;

        const cached = localStorage.getItem(CACHE_KEY);
        if (!cached) return null;

        const parsedCache = JSON.parse(cached) as TrendingQueriesCache;
        const now = Date.now();

        if (now - parsedCache.timestamp > CACHE_DURATION) {
            localStorage.removeItem(CACHE_KEY);
            return null;
        }

        return parsedCache;
    };

    const { theme } = useTheme();

    const [trendingQueries, setTrendingQueries] = useState<TrendingQuery[]>([]);

    interface ChatError extends Error {
        response?: {
            status?: number;
            statusText?: string;
            data?: unknown;
            headers?: unknown;
        };
        request?: {
            method?: string;
            url?: string;
            headers?: unknown;
        };
        config?: unknown;
        code?: string;
        isAxiosError?: boolean;
    }

    interface ChatErrorContext {
        message?: string;
        [key: string]: unknown;
    }

    const { isLoading, input, messages, setInput, append, handleSubmit, setMessages, reload, stop } = useChat({
        maxSteps: 8,
        body: {
            model: selectedModel,
            group: selectedGroup,
        },
        onFinish: async (message, { finishReason }) => {
            console.log("[finish reason]:", finishReason);
            if (message.content && finishReason === 'stop' || finishReason === 'length') {
                const newHistory = [...messages, { role: "user", content: lastSubmittedQueryRef.current }, { role: "assistant", content: message.content }];
                const { questions } = await suggestQuestions(newHistory);
                setSuggestedQuestions(questions);
            }
        },
        onError: (error: Error) => {
            // Enhanced error logging with context
            console.group('Chat Error Details');
            
            // Log basic error info
            console.error('Error Info:', {
                name: error.name,
                message: error.message,
                stack: error.stack,
            });

            // Log current state
            console.error('Current State:', {
                model: selectedModel,
                group: selectedGroup,
                messageCount: messages.length,
                lastQuery: lastSubmittedQueryRef.current,
                timestamp: new Date().toISOString()
            });

            // Check for specific error types
            if ('response' in error) {
                const chatError = error as ChatError;
                console.error('Response Error:', {
                    status: chatError.response?.status,
                    statusText: chatError.response?.statusText,
                    data: chatError.response?.data,
                });
            }

            // Log request details if available
            if ('request' in error) {
                const chatError = error as ChatError;
                console.error('Request Details:', {
                    method: chatError.request?.method,
                    url: chatError.request?.url,
                });
            }

            console.groupEnd();

            // Show user-friendly error message based on error type
            let errorMessage = 'Something went wrong. Please try again.';
            let errorDescription = '';

            if (error.message.includes('stream')) {
                errorMessage = 'Connection error';
                errorDescription = 'There was a problem with the streaming connection. Please try again.';
            } else if (error.message.includes('model')) {
                errorMessage = 'Model error';
                errorDescription = 'The selected model is currently unavailable. Please try a different model.';
            } else if (error.message.includes('rate limit')) {
                errorMessage = 'Rate limit exceeded';
                errorDescription = 'Please wait a moment before trying again.';
            } else if (error.message.includes('validation')) {
                errorMessage = 'Invalid input';
                errorDescription = 'Please check your input and try again.';
            } else if (error.message.includes('configuration')) {
                errorMessage = 'Configuration error';
                errorDescription = 'There was a problem with the service configuration. Please try again later.';
            } else if (error.message.includes('authentication')) {
                errorMessage = 'Authentication error';
                errorDescription = 'There was a problem with the service authentication. Please try again later.';
            } else {
                errorDescription = error.message || 'An unexpected error occurred.';
            }

            toast.error(errorMessage, {
                description: errorDescription,
                duration: 5000,
            });

            // If it's a critical error, stop the stream
            if (error.message.includes('stream') || error.message.includes('connection')) {
                stop();
            }
        }
    });

    useEffect(() => {
        if (!initializedRef.current && initialState.query && !messages.length) {
            initializedRef.current = true;
            setHasSubmitted(true);
            console.log("[initial query]:", initialState.query);
            append({
                content: initialState.query,
                role: 'user'
            });
        }
    }, [initialState.query, append, setInput, messages.length]);

    useEffect(() => {
        const fetchTrending = async () => {
            const cached = getTrendingQueriesFromCache();
            if (cached) {
                setTrendingQueries(cached.data);
                return;
            }

            try {
                const res = await fetch('/api/trending');
                if (!res.ok) throw new Error('Failed to fetch trending queries');
                const data = await res.json();

                const cacheData: TrendingQueriesCache = {
                    data,
                    timestamp: Date.now()
                };
                localStorage.setItem(CACHE_KEY, JSON.stringify(cacheData));

                setTrendingQueries(data);
            } catch (error) {
                console.error('Error fetching trending queries:', error);
                setTrendingQueries([]);
            }
        };

        fetchTrending();
        // eslint-disable-next-line react-hooks/exhaustive-deps
    }, []);

    const ThemeToggle: React.FC = () => {
        const { theme, setTheme } = useTheme();

        return (
            <Button
                variant="ghost"
                size="icon"
                onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
                className="bg-transparent hover:bg-neutral-100 dark:hover:bg-neutral-800"
            >
                <Sun className="h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
                <Moon className="absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
                <span className="sr-only">Toggle theme</span>
            </Button>
        );
    };


    const CopyButton = ({ text }: { text: string }) => {
        const [isCopied, setIsCopied] = useState(false);

        return (
            <Button
                variant="ghost"
                size="sm"
                onClick={async () => {
                    if (!navigator.clipboard) {
                        return;
                    }
                    await navigator.clipboard.writeText(text);
                    setIsCopied(true);
                    setTimeout(() => setIsCopied(false), 2000);
                    toast.success("Copied to clipboard");
                }}
                className="h-8 px-2 text-xs rounded-full"
            >
                {isCopied ? (
                    <Check className="h-4 w-4" />
                ) : (
                    <Copy className="h-4 w-4" />
                )}
            </Button>
        );
    };

    type Changelog = {
        id: string;
        images: string[];
        content: string;
        title: string;
    };

    const changelogs: Changelog[] = [
        {
            id: "1",
            title: "The Unexpected Collab",
            images: [
                "https://metwm7frkvew6tn1.public.blob.vercel-storage.com/mplx-changelogs/mplx-collab.jpeg",
            ],
            content: `
## **Mojo x Vercel x Collab**

Excited to annouce that Mojo and sixtyoneeighty have partnered with Vercel to bring you the best of AI search experience.

`
        }
    ];

    interface TableData {
        title: string;
        content: string;
    }

    

    interface MarkdownRendererProps {
        content: string;
    }

    interface CitationLink {
        text: string;
        link: string;
    }

    interface LinkMetadata {
        title: string;
        description: string;
    }

    const isValidUrl = (str: string) => {
        try {
            new URL(str);
            return true;
        } catch {
            return false;
        }
    };

    const MarkdownRenderer: React.FC<MarkdownRendererProps> = ({ content }) => {
        const [metadataCache, setMetadataCache] = useState<Record<string, LinkMetadata>>({});

        const citationLinks = useMemo<CitationLink[]>(() => {
            return Array.from(content.matchAll(/\[([^\]]+)\]\(([^)]+)\)/g)).map(([_, text, link]) => ({ text, link }));
        }, [content]);

        const fetchMetadataWithCache = useCallback(async (url: string) => {
            if (metadataCache[url]) {
                return metadataCache[url];
            }
            const metadata = await fetchMetadata(url);
            if (metadata) {
                setMetadataCache(prev => ({ ...prev, [url]: metadata }));
            }
            return metadata;
        }, [metadataCache]);

        interface CodeBlockProps {
            language: string | undefined;
            children: string;
        }

        const CodeBlock = React.memo(({ language, children }: CodeBlockProps) => {
            const [isCopied, setIsCopied] = useState(false);
            const { theme } = useTheme();

            const handleCopy = useCallback(async () => {
                await navigator.clipboard.writeText(children);
                setIsCopied(true);
                setTimeout(() => setIsCopied(false), 2000);
            }, [children]);

            return (
                <div className="group my-3">
                    <div className="grid grid-rows-[auto,1fr] rounded-lg border border-neutral-200 dark:border-neutral-800">
                        <div className="flex items-center justify-between px-3 py-2 border-b border-neutral-200 dark:border-neutral-800">
                            <div className="px-2 py-0.5 text-xs font-medium bg-neutral-100/80 dark:bg-neutral-800/80 text-neutral-500 dark:text-neutral-400 rounded-md border border-neutral-200 dark:border-neutral-700">
                                {language || 'text'}
                            </div>
                            <button
                                onClick={handleCopy}
                                className={`
                      px-2 py-1.5
                      rounded-md text-xs
                      transition-colors duration-200
                      ${isCopied ? 'bg-green-500/10 text-green-500' : 'bg-neutral-100 dark:bg-neutral-800 text-neutral-500 dark:text-neutral-400'}
                      opacity-0 group-hover:opacity-100
                      hover:bg-neutral-200 dark:hover:bg-neutral-700
                      flex items-center gap-1.5
                    `}
                                aria-label={isCopied ? 'Copied!' : 'Copy code'}
                            >
                                {isCopied ? (
                                    <>
                                        <Check className="h-3.5 w-3.5" />
                                        <span>Copied!</span>
                                    </>
                                ) : (
                                    <>
                                        <Copy className="h-3.5 w-3.5" />
                                        <span>Copy</span>
                                    </>
                                )}
                            </button>
                        </div>

                        <div className={`overflow-x-auto ${GeistMono.className}`}>
                            <SyntaxHighlighter
                                language={language || 'text'}
                                style={theme === 'dark' ? atomDark : vs}
                                showLineNumbers
                                wrapLines
                                customStyle={{
                                    margin: 0,
                                    padding: '1.5rem',
                                    fontSize: '0.875rem',
                                    background: theme === 'dark' ? '#171717' : '#ffffff',
                                    lineHeight: 1.6,
                                    borderBottomLeftRadius: '0.5rem',
                                    borderBottomRightRadius: '0.5rem',
                                }}
                                lineNumberStyle={{
                                    minWidth: '2.5em',
                                    paddingRight: '1em',
                                    color: theme === 'dark' ? '#404040' : '#94a3b8',
                                    userSelect: 'none',
                                }}
                                codeTagProps={{
                                    style: {
                                        color: theme === 'dark' ? '#e5e5e5' : '#1e293b',
                                        fontFamily: 'var(--font-mono)',
                                    }
                                }}
                            >
                                {children}
                            </SyntaxHighlighter>
                        </div>
                    </div>
                </div>
            );
        }, (prevProps, nextProps) =>
            prevProps.children === nextProps.children &&
            prevProps.language === nextProps.language
        );

        CodeBlock.displayName = 'CodeBlock';

        const LinkPreview = ({ href }: { href: string }) => {
            const [metadata, setMetadata] = useState<LinkMetadata | null>(null);
            const [isLoading, setIsLoading] = useState(false);

            React.useEffect(() => {
                setIsLoading(true);
                fetchMetadataWithCache(href).then((data) => {
                    setMetadata(data);
                    setIsLoading(false);
                });
            }, [href]);

            if (isLoading) {
                return (
                    <div className="flex items-center justify-center p-4">
                        <Loader2 className="h-5 w-5 animate-spin text-neutral-500 dark:text-neutral-400" />
                    </div>
                );
            }

            const domain = new URL(href).hostname;

            return (
                <div className="flex flex-col space-y-2 bg-white dark:bg-neutral-800 rounded-md shadow-md overflow-hidden">
                    <div className="flex items-center space-x-2 p-3 bg-neutral-100 dark:bg-neutral-700">
                        <Image
                            src={`https://www.google.com/s2/favicons?domain=${domain}&sz=256`}
                            alt="Favicon"
                            width={20}
                            height={20}
                            className="rounded-sm"
                        />
                        <span className="text-sm font-medium text-neutral-600 dark:text-neutral-300 truncate">{domain}</span>
                    </div>
                    <div className="px-3 pb-3">
                        <h3 className="text-base font-semibold text-neutral-800 dark:text-neutral-200 line-clamp-2">
                            {metadata?.title || "Untitled"}
                        </h3>
                        {metadata?.description && (
                            <p className="text-sm text-neutral-600 dark:text-neutral-400 mt-1 line-clamp-2">
                                {metadata.description}
                            </p>
                        )}
                    </div>
                </div>
            );
        };

        const renderHoverCard = (href: string, text: React.ReactNode, isCitation: boolean = false) => {
            return (
                <HoverCard>
                    <HoverCardTrigger asChild>
                        <Link
                            href={href}
                            target="_blank"
                            rel="noopener noreferrer"
                            className={isCitation ? "cursor-help text-sm text-primary py-0.5 px-1.5 m-0 bg-neutral-200 dark:bg-neutral-700 rounded-full no-underline" : "text-teal-600 dark:text-teal-400 no-underline hover:underline"}
                        >
                            {text}
                        </Link>
                    </HoverCardTrigger>
                    <HoverCardContent
                        side="top"
                        align="start"
                        className="w-80 p-0 shadow-lg"
                    >
                        <LinkPreview href={href} />
                    </HoverCardContent>
                </HoverCard>
            );
        };

        const renderer: Partial<ReactRenderer> = {
            text(text: string) {
                if (!text.includes('$')) return text;
                return (
                    <Latex
                        delimiters={[
                            { left: '$$', right: '$$', display: true },
                            { left: '$', right: '$', display: false }
                        ]}
                    >
                        {text}
                    </Latex>
                );
            },
            paragraph(children) {
                if (typeof children === 'string' && children.includes('$')) {
                    return (
                        <p className="my-4">
                            <Latex
                                delimiters={[
                                    { left: '$$', right: '$$', display: true },
                                    { left: '$', right: '$', display: false }
                                ]}
                            >
                                {children}
                            </Latex>
                        </p>
                    );
                }
                return <p className="my-4">{children}</p>;
            },
            code(children, language) {
                return <CodeBlock language={language}>{String(children)}</CodeBlock>;
            },
            link(href, text) {
                const citationIndex = citationLinks.findIndex(link => link.link === href);
                if (citationIndex !== -1) {
                    return (
                        <sup>
                            {renderHoverCard(href, citationIndex + 1, true)}
                        </sup>
                    );
                }
                return isValidUrl(href)
                    ? renderHoverCard(href, text)
                    : <a href={href} className="text-blue-600 dark:text-blue-400 hover:underline">{text}</a>;
            },
            heading(children, level) {
                const HeadingTag = `h${level}` as keyof JSX.IntrinsicElements;
                const className = `text-${4 - level}xl font-bold my-4 text-neutral-800 dark:text-neutral-100`;
                return <HeadingTag className={className}>{children}</HeadingTag>;
            },
            list(children, ordered) {
                const ListTag = ordered ? 'ol' : 'ul';
                return <ListTag className="list-inside list-disc my-4 pl-4 text-neutral-800 dark:text-neutral-200">{children}</ListTag>;
            },
            listItem(children) {
                return <li className="my-2 text-neutral-800 dark:text-neutral-200">{children}</li>;
            },
            blockquote(children) {
                return <blockquote className="border-l-4 border-neutral-300 dark:border-neutral-600 pl-4 italic my-4 text-neutral-700 dark:text-neutral-300">{children}</blockquote>;
            },
        };

        return (
            <div className="markdown-body dark:text-neutral-200 font-sans">
                <Marked renderer={renderer}>{content}</Marked>
            </div>
        );
    };


    const lastUserMessageIndex = useMemo(() => {
        for (let i = messages.length - 1; i >= 0; i--) {
            if (messages[i].role === 'user') {
                return i;
            }
        }
        return -1;
    }, [messages]);

    useEffect(() => {
        const handleScroll = () => {
            const userScrolled = window.innerHeight + window.scrollY < document.body.offsetHeight;
            if (!userScrolled && bottomRef.current && (messages.length > 0 || suggestedQuestions.length > 0)) {
                bottomRef.current.scrollIntoView({ behavior: "smooth" });
            }
        };

        window.addEventListener('scroll', handleScroll);
        return () => window.removeEventListener('scroll', handleScroll);
    }, [messages, suggestedQuestions]);

    const handleExampleClick = async (card: TrendingQuery) => {
        const exampleText = card.text;
        lastSubmittedQueryRef.current = exampleText;
        setHasSubmitted(true);
        setSuggestedQuestions([]);
        await append({
            content: exampleText.trim(),
            role: 'user',
        });
    };

    const handleSuggestedQuestionClick = useCallback(async (question: string) => {
        setHasSubmitted(true);
        setSuggestedQuestions([]);

        await append({
            content: question.trim(),
            role: 'user'
        });
    }, [append]);

    const handleMessageEdit = useCallback((index: number) => {
        setIsEditingMessage(true);
        setEditingMessageIndex(index);
        setInput(messages[index].content);
    }, [messages, setInput]);

    const handleMessageUpdate = useCallback((e: React.FormEvent<HTMLFormElement>) => {
        e.preventDefault();
        if (input.trim()) {
            const updatedMessages = [...messages];
            updatedMessages[editingMessageIndex] = { ...updatedMessages[editingMessageIndex], content: input.trim() };
            setMessages(updatedMessages);
            setIsEditingMessage(false);
            setEditingMessageIndex(-1);
            handleSubmit(e);
        } else {
            toast.error("Please enter a valid message.");
        }
    }, [input, messages, editingMessageIndex, setMessages, handleSubmit]);

    const AboutContent = () => {
        return (
            <div className="prose prose-neutral dark:prose-invert max-w-none space-y-8 p-1">
                <section className="space-y-4 font-syne">
                    <h2 className="text-2xl font-medium mt-2">Welcome to Mojo</h2>
                    <p className="text-neutral-600 dark:text-neutral-400 leading-relaxed">
                        Mojo is a minimalistic AI-powered search engine that combines multiple data sources to provide comprehensive answers. Inspired by The Simpsons and born from a late-night AI epiphany, Mojo is the heart of sixtyoneeighty. What started as a joke&mdash;calling AI a &ldquo;digital helper monkey&rdquo;&mdash;evolved into something bigger: a bold, opinionated, and endlessly loyal AI companion. Mojo doesn&apos;t sugarcoat things. He tells it like it is, pushes boundaries, and always has your back. Whether he&apos;s powering our applications or helping users navigate the chaos of information, Mojo is more than just code&mdash;he&apos;s a friend, a guide, and the kind of AI that never holds back.
                    </p>
                </section>

                <Separator className="bg-neutral-200 dark:bg-neutral-800" />

                <section className="space-y-4">
                    <h3 className="text-xl font-semibold">Core Features</h3>
                    <div className="grid grid-cols-1 sm:grid-cols-2 gap-3">
                        {[
                            { icon: Search, text: "Multi-source search integration" },
                            { icon: Zap, text: "Real-time data processing" },
                            { icon: GraduationCap, text: "Academic paper analysis" },
                            { icon: Share2, text: "Social media insights" },
                            { icon: Cloud, text: "Weather and location services" },
                        ].map((feature, i) => (
                            <div
                                key={i}
                                className="flex items-center gap-3 p-3 rounded-lg bg-neutral-50 dark:bg-neutral-900 border border-neutral-200 dark:border-neutral-800"
                            >
                                <feature.icon className="h-5 w-5 text-primary" />
                                <span className="text-sm text-neutral-600 dark:text-neutral-400">{feature.text}</span>
                            </div>
                        ))}
                    </div>
                </section>

                <Separator className="bg-neutral-200 dark:bg-neutral-800" />

                <section className="space-y-4">
                    <h3 className="text-xl font-semibold">Technology</h3>
                    <div className="bg-neutral-50 dark:bg-neutral-900 p-4 rounded-lg border border-neutral-200 dark:border-neutral-800">
                        <div className="flex items-center gap-2 text-sm">
                            <span className="text-primary">‚Üí</span>
                            Built with Next.js, Vercel AI SDK, and Powered by Mojo.
                        </div>
                    </div>
                </section>
            </div>
        );
    };
    const AboutButton = () => {
        const [isOpen, setIsOpen] = useState(false);
        const isDesktop = useMediaQuery("(min-width: 768px)");

        if (isDesktop) {
            return (
                <Dialog open={isOpen} onOpenChange={setIsOpen}>
                    <DialogTrigger asChild>
                        <Button
                            variant="outline"
                            size="icon"
                            className="rounded-full w-8 h-8 bg-white dark:bg-neutral-900 border-neutral-200 dark:border-neutral-800 hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-all"
                        >
                            <Info className="h-5 w-5 text-neutral-600 dark:text-neutral-400" />
                        </Button>
                    </DialogTrigger>
                    <DialogContent className="sm:max-w-[725px] z-[100] max-h-[80vh] overflow-y-auto">
                        <AboutContent />
                    </DialogContent>
                </Dialog>
            );
        }

        return (
            <Drawer open={isOpen} onOpenChange={setIsOpen}>
                <DrawerTrigger asChild>
                    <Button
                        variant="outline"
                        size="icon"
                        className="rounded-full w-8 h-8 bg-white dark:bg-neutral-900 border-neutral-200 dark:border-neutral-800 hover:bg-neutral-100 dark:hover:bg-neutral-800 transition-all"
                    >
                        <Info className="h-5 w-5 text-neutral-600 dark:text-neutral-400" />
                    </Button>
                </DrawerTrigger>
                <DrawerContent className="z-[100]">
                    <div className="px-4 my-0 h-[75vh] overflow-y-auto">
                        <AboutContent />
                    </div>
                    <DrawerFooter className="pt-2 border-t">
                        <DrawerClose asChild>
                            <Button variant="outline">Close</Button>
                        </DrawerClose>
                    </DrawerFooter>
                </DrawerContent>
            </Drawer>
        );
    };

    interface NavbarProps { }

    const Navbar: React.FC<NavbarProps> = () => {
        return (
            <div className="fixed top-0 left-0 right-0 z-[60] flex justify-between items-center p-4 
                bg-white/30 dark:bg-neutral-950/30 
                backdrop-blur-lg backdrop-saturate-150
                border-b border-neutral-200/20 dark:border-neutral-800/20
                supports-[backdrop-filter]:bg-white/30 supports-[backdrop-filter]:dark:bg-neutral-950/30
                font-sans">
                <div className="flex items-center gap-4">
                    <Link href="/new">
                        <Button
                            type="button"
                            variant={'secondary'}
                            className="rounded-full bg-white/70 dark:bg-neutral-800/70 backdrop-blur-sm group transition-all hover:scale-105 pointer-events-auto"
                        >
                            <Plus size={18} className="group-hover:rotate-90 transition-all" />
                            <span className="text-sm ml-2 group-hover:block hidden animate-in fade-in duration-300">
                                New
                            </span>
                        </Button>
                    </Link>
                </div>
                <div className='flex items-center'>
                    <AboutButton />
                </div>
            </div>
        );
    };

    const SuggestionCards: React.FC<{
        trendingQueries: TrendingQuery[];
        handleExampleClick: (query: TrendingQuery) => void;
    }> = ({ trendingQueries, handleExampleClick }) => {
        const [isLoading, setIsLoading] = useState(true);
        const scrollRef = useRef<HTMLDivElement>(null);
        const [isPaused, setIsPaused] = useState(false);
        const animationFrameRef = useRef<number>();
        const lastScrollTime = useRef<number>(0);

        useEffect(() => {
            if (trendingQueries.length > 0) {
                setIsLoading(false);
            }
        }, [trendingQueries]);

        useEffect(() => {
            const animate = (timestamp: number) => {
                if (!scrollRef.current || isPaused) {
                    animationFrameRef.current = requestAnimationFrame(animate);
                    return;
                }

                if (timestamp - lastScrollTime.current > 16) {
                    const newScrollLeft = scrollRef.current.scrollLeft + 1;

                    if (newScrollLeft >= scrollRef.current.scrollWidth - scrollRef.current.clientWidth) {
                        scrollRef.current.scrollLeft = 0;
                    } else {
                        scrollRef.current.scrollLeft = newScrollLeft;
                    }

                    lastScrollTime.current = timestamp;
                }

                animationFrameRef.current = requestAnimationFrame(animate);
            };

            animationFrameRef.current = requestAnimationFrame(animate);

            return () => {
                if (animationFrameRef.current) {
                    cancelAnimationFrame(animationFrameRef.current);
                }
            };
        }, [isPaused]);

        const getIconForCategory = (category: string) => {
            const iconMap = {
                trending: <TrendingUp className="w-3 h-3" />,
                community: <Users className="w-3 h-3" />,
                science: <Brain className="w-3 h-3" />,
                tech: <Code className="w-3 h-3" />,
                travel: <Globe className="w-3 h-3" />,
                politics: <Flag className="w-3 h-3" />,
                health: <Heart className="w-3 h-3" />,
                sports: <TennisBall className="w-3 h-3" />,
                finance: <CurrencyDollar className="w-3 h-3" />,
                football: <SoccerBall className="w-3 h-3" />,
            };
            return iconMap[category as keyof typeof iconMap] || <Sparkles className="w-3 h-3" />;
        };

        if (isLoading || trendingQueries.length === 0) {
            return (
                <div className="mt-4 relative">
                    <div className="relative">
                        <div className="absolute left-0 top-0 bottom-0 w-8 bg-gradient-to-r from-background to-transparent z-10" />
                        <div className="absolute right-0 top-0 bottom-0 w-8 bg-gradient-to-l from-background to-transparent z-10" />

                        <div className="flex gap-2 overflow-x-auto pb-2 px-2 scroll-smooth no-scrollbar">
                            {[1, 2, 3, 4, 5, 6].map((_, index) => (
                                <div
                                    key={index}
                                    className="flex-shrink-0 h-12 w-[120px] rounded-lg bg-neutral-50/80 dark:bg-neutral-800/80 
                                                     border border-neutral-200/50 dark:border-neutral-700/50"
                                >
                                    <div className="flex items-start gap-1.5 h-full p-2">
                                        <div className="w-4 h-4 rounded-md bg-neutral-200/50 dark:bg-neutral-700/50 
                                                              animate-pulse mt-0.5" />
                                        <div className="space-y-1 flex-1">
                                            <div className="h-2.5 bg-neutral-200/50 dark:bg-neutral-700/50 rounded animate-pulse" />
                                            <div className="h-2 w-1/2 bg-neutral-200/50 dark:bg-neutral-700/50 rounded animate-pulse" />
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </div>
            );
        }

        return (
            <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="mt-4 relative"
            >
                <div className="relative">
                    <div className="absolute left-0 top-0 bottom-0 w-8 bg-gradient-to-r from-background to-transparent z-10" />
                    <div className="absolute right-0 top-0 bottom-0 w-8 bg-gradient-to-l from-background to-transparent z-10" />

                    <div
                        ref={scrollRef}
                        className="flex gap-2 overflow-x-auto pb-2 px-2 scroll-smooth no-scrollbar"
                        onTouchStart={() => setIsPaused(true)}
                        onTouchEnd={() => setIsPaused(false)}
                        onMouseEnter={() => setIsPaused(true)}
                        onMouseLeave={() => setIsPaused(false)}
                    >
                        {Array(20).fill(trendingQueries).flat().map((query, index) => (
                            <motion.button
                                key={`${index}-${query.text}`}
                                initial={{ opacity: 0 }}
                                animate={{ opacity: 1 }}
                                transition={{ delay: index * 0.03 }}
                                onClick={() => handleExampleClick(query)}
                                className="group flex-shrink-0 w-[120px] h-12 bg-neutral-50/80 dark:bg-neutral-800/80
                                         backdrop-blur-sm rounded-lg
                                         hover:bg-white dark:hover:bg-neutral-700/70
                                         transition-colors duration-200
                                         border border-neutral-200/50 dark:border-neutral-700/50"
                            >
                                <div className="flex items-start gap-1.5 h-full p-2">
                                    <div className="w-5 h-5 rounded-md bg-primary/10 dark:bg-primary/20 flex items-center justify-center mt-0.5">
                                        {getIconForCategory(query.category)}
                                    </div>
                                    <div className="flex-1 text-left overflow-hidden">
                                        <p className="text-xs font-medium truncate leading-tight">{query.text}</p>
                                        <p className="text-[10px] text-neutral-500 dark:text-neutral-400 capitalize">
                                            {query.category}
                                        </p>
                                    </div>
                                </div>
                            </motion.button>
                        ))}
                    </div>
                </div>
            </motion.div>
        );
    };

    const handleModelChange = useCallback((newModel: string) => {
        setSelectedModel(newModel);
        setSuggestedQuestions([]);
        reload({ body: { model: newModel } });
    }, [reload]);

    const resetSuggestedQuestions = useCallback(() => {
        setSuggestedQuestions([]);
    }, []);


    const memoizedMessages = useMemo(() => messages, [messages]);

    const memoizedSuggestionCards = useMemo(() => (
        <SuggestionCards
            trendingQueries={trendingQueries}
            handleExampleClick={handleExampleClick}
        />
        // eslint-disable-next-line react-hooks/exhaustive-deps
    ), [trendingQueries]);

    return (
        <div className="flex flex-col !font-sans items-center min-h-screen bg-background text-foreground transition-all duration-500">
            <Navbar />

            <div className={`w-full p-2 sm:p-4 ${hasSubmitted
                ? 'mt-20 sm:mt-16'
                : 'flex-1 flex items-center justify-center'
                }`}>
                <div className={`w-full max-w-[90%] !font-sans sm:max-w-2xl space-y-6 p-0 mx-auto transition-all duration-300`}>
                    {!hasSubmitted && (
                        <div className="text-center !font-sans">
                            <div className="flex flex-col items-center mb-8">
                                <Logo className="mb-6" animate={true} />
                                <div className="space-y-2">
                                    <h1 className="text-2xl lg:text-4xl font-bold text-center bg-clip-text text-transparent bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-200">
                                        What can Mojo help you with?
                                    </h1>
                                    <p className="text-lg lg:text-xl font-medium text-center bg-clip-text text-transparent bg-gradient-to-r from-gray-900 to-gray-600 dark:from-white dark:to-gray-200">
                                        Mojo knows all. Mojo is wise.
                                    </p>
                                </div>
                            </div>
                        </div>
                    )}
                    <AnimatePresence>
                        {!hasSubmitted && (
                            <motion.div
                                initial={{ opacity: 1, y: 0 }}
                                exit={{ opacity: 0, y: 20 }}
                                transition={{ duration: 0.5 }}
                                className='!mt-4'
                            >
                                <FormComponent
                                    input={input}
                                    setInput={setInput}
                                    attachments={attachments}
                                    setAttachments={setAttachments}
                                    hasSubmitted={hasSubmitted}
                                    setHasSubmitted={setHasSubmitted}
                                    isLoading={isLoading}
                                    handleSubmit={handleSubmit}
                                    fileInputRef={fileInputRef}
                                    inputRef={inputRef}
                                    stop={stop}
                                    messages={memoizedMessages}
                                    append={append}
                                    selectedModel={selectedModel}
                                    setSelectedModel={handleModelChange}
                                    resetSuggestedQuestions={resetSuggestedQuestions}
                                    lastSubmittedQueryRef={lastSubmittedQueryRef}
                                    selectedGroup={selectedGroup}
                                    setSelectedGroup={setSelectedGroup}
                                />
                                {memoizedSuggestionCards}
                            </motion.div>
                        )}
                    </AnimatePresence>

                    <div className="space-y-4 sm:space-y-6 mb-32">
                        {memoizedMessages.map((message, index) => (
                            <div key={index}>
                                {message.role === 'user' && (
                                    <motion.div
                                        initial={{ opacity: 0, y: 20 }}
                                        animate={{ opacity: 1, y: 0 }}
                                        transition={{ duration: 0.5 }}
                                        className="flex items-start space-x-2 mb-4"
                                    >
                                        <User2 className="size-5 text-primary flex-shrink-0 mt-1" />
                                        <div className="flex-grow min-w-0">
                                            {isEditingMessage && editingMessageIndex === index ? (
                                                <form onSubmit={handleMessageUpdate} className="flex items-center space-x-2">
                                                    <Input
                                                        value={input}
                                                        onChange={(e) => setInput(e.target.value)}
                                                        className="flex-grow bg-white dark:bg-neutral-800 text-neutral-900 dark:text-neutral-100"
                                                    />
                                                    <Button
                                                        variant="secondary"
                                                        size="sm"
                                                        type="button"
                                                        onClick={() => {
                                                            setIsEditingMessage(false)
                                                            setEditingMessageIndex(-1)
                                                            setInput('')
                                                        }}
                                                        disabled={isLoading}
                                                        className="bg-neutral-200 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200"
                                                    >
                                                        <X size={16} />
                                                    </Button>
                                                    <Button type="submit" size="sm" className="bg-primary text-white">
                                                        <ArrowRight size={16} />
                                                    </Button>
                                                </form>
                                            ) : (
                                                <div>
                                                    <p className="text-base sm:text-xl font-medium font-sans break-words text-neutral-800 dark:text-neutral-200">
                                                        {message.content}
                                                    </p>
                                                    <div className='flex flex-row gap-2'>
                                                        {message.experimental_attachments?.map((attachment, attachmentIndex) => (
                                                            <div key={attachmentIndex} className="mt-2">
                                                                {attachment.contentType!.startsWith('image/') && (
                                                                    <img
                                                                        src={attachment.url}
                                                                        alt={attachment.name || `Attachment ${attachmentIndex + 1}`}
                                                                        className="max-w-full h-32 object-fill rounded-lg"
                                                                    />
                                                                )}
                                                            </div>
                                                        ))}
                                                    </div>
                                                </div>
                                            )}
                                        </div>

                                        {!isEditingMessage && index === lastUserMessageIndex && (
                                            <div className="flex items-center space-x-2">
                                                <Button
                                                    variant="ghost"
                                                    size="sm"
                                                    onClick={() => handleMessageEdit(index)}
                                                    className="ml-2 text-neutral-500 dark:text-neutral-400"
                                                    disabled={isLoading}
                                                >
                                                    <Edit2 size={16} />
                                                </Button>
                                            </div>
                                        )}
                                    </motion.div>
                                )}
                                {message.role === 'assistant' && message.content !== null && !message.toolInvocations && (
                                    <div>
                                        <div className='flex items-center justify-between mb-2'>
                                            <div className='flex items-center gap-2'>
                                                <Sparkles className="size-5 text-primary" />
                                                <h2 className="text-base font-semibold text-neutral-800 dark:text-neutral-200">Answer</h2>
                                            </div>
                                            <div className='flex items-center gap-2'>
                                                <CopyButton text={message.content} />
                                            </div>
                                        </div>
                                        <div>
                                            <MarkdownRenderer content={message.content} />
                                        </div>
                                    </div>
                                )}
                                {message.toolInvocations && (
                                    <ToolInvocationListView toolInvocations={message.toolInvocations} />
                                )}
                            </div>
                        ))}

                        {suggestedQuestions.length > 0 && (
                            <motion.div
                                initial={{ opacity: 0, y: 20 }}
                                animate={{ opacity: 1, y: 0 }}
                                exit={{ opacity: 0, y: 20 }}
                                transition={{ duration: 0.5 }}
                                className="w-full max-w-xl sm:max-w-2xl"
                            >
                                <div className="flex items-center gap-2 mb-4">
                                    <AlignLeft className="w-5 h-5 text-primary" />
                                    <h2 className="font-semibold text-base text-neutral-800 dark:text-neutral-200">Suggested questions</h2>
                                </div>
                                <div className="space-y-2 flex flex-col">
                                    {suggestedQuestions.map((question, index) => (
                                        <Button
                                            key={index}
                                            variant="ghost"
                                            className="w-fit font-medium rounded-2xl p-1 justify-start text-left h-auto py-2 px-4 bg-neutral-100 dark:bg-neutral-800 text-neutral-900 dark:text-neutral-100 hover:bg-neutral-200 dark:hover:bg-neutral-700 whitespace-normal"
                                            onClick={() => handleSuggestedQuestionClick(question)}
                                        >
                                            {question}
                                        </Button>
                                    ))}
                                </div>
                            </motion.div>
                        )}
                    </div>
                    <div ref={bottomRef} />
                </div>

                <AnimatePresence>
                    {hasSubmitted && (
                        <motion.div
                            initial={{ opacity: 0, y: 20 }}
                            animate={{ opacity: 1, y: 0 }}
                            exit={{ opacity: 0, y: 20 }}
                            transition={{ duration: 0.5 }}
                            className="fixed bottom-4 left-0 right-0 w-full max-w-[90%] sm:max-w-2xl mx-auto"
                        >
                            <FormComponent
                                input={input}
                                setInput={setInput}
                                attachments={attachments}
                                setAttachments={setAttachments}
                                hasSubmitted={hasSubmitted}
                                setHasSubmitted={setHasSubmitted}
                                isLoading={isLoading}
                                handleSubmit={handleSubmit}
                                fileInputRef={fileInputRef}
                                inputRef={inputRef}
                                stop={stop}
                                messages={messages}
                                append={append}
                                selectedModel={selectedModel}
                                setSelectedModel={handleModelChange}
                                resetSuggestedQuestions={resetSuggestedQuestions}
                                lastSubmittedQueryRef={lastSubmittedQueryRef}
                                selectedGroup={selectedGroup}
                                setSelectedGroup={setSelectedGroup}
                            />
                        </motion.div>
                    )}
                </AnimatePresence>
                {!hasSubmitted && (
                    <footer
                        className="flex justify-end items-center bottom-3 w-full fixed p-4 sm:p-auto"
                    >
                        <div className="text-xs text-neutral-500 dark:text-neutral-400">
                            ¬© {new Date().getFullYear()} All rights reserved.
                        </div>
                    </footer>
                )}
            </div>
        </div>
    );
}

const LoadingFallback = () => (
    <div className="flex items-center justify-center min-h-screen bg-gradient-to-b from-neutral-50 to-neutral-100 dark:from-neutral-950 dark:to-neutral-900">
        <div className="flex flex-col items-center gap-6 p-8">
            <div className="relative w-12 h-12">
                <div className="absolute inset-0 rounded-full border-4 border-neutral-200 dark:border-neutral-800" />
                <div className="absolute inset-0 rounded-full border-4 border-t-primary animate-spin" />
            </div>

            <p className="text-sm text-neutral-600 dark:text-neutral-400 animate-pulse">
                Loading...
            </p>
        </div>
    </div>
);

const ToolInvocationListView = memo(
    ({ toolInvocations }: { toolInvocations: ToolInvocation[] }) => {

        const renderToolInvocation = useCallback(
            (toolInvocation: ToolInvocation, index: number) => {
                const args = JSON.parse(JSON.stringify(toolInvocation.args));
                const result = 'result' in toolInvocation ? JSON.parse(JSON.stringify(toolInvocation.result)) : null;

                if (toolInvocation.toolName === 'find_place') {
                    if (!result) {
                        return <SearchLoadingState
                            icon={MapPin}
                            text="Finding locations..."
                            color="blue"
                        />;
                    }

                    const { features } = result;
                    if (!features || features.length === 0) return null;

                    return (
                        <Card className="w-full my-4 overflow-hidden bg-white dark:bg-neutral-900 border-neutral-200 dark:border-neutral-800">
                            <div className="relative w-full h-[60vh]">
                                <div className="absolute top-4 left-4 z-10 flex gap-2">
                                    <Badge
                                        variant="secondary"
                                        className="bg-white/90 dark:bg-black/90 backdrop-blur-sm"
                                    >
                                        {features.length} Locations Found
                                    </Badge>
                                </div>

                                <MapComponent
                                    center={{
                                        lat: features[0].geometry.coordinates[1],
                                        lng: features[0].geometry.coordinates[0],
                                    }}
                                    places={features.map((feature: any) => ({
                                        name: feature.name,
                                        location: {
                                            lat: feature.geometry.coordinates[1],
                                            lng: feature.geometry.coordinates[0],
                                        },
                                        vicinity: feature.formatted_address,
                                    }))}
                                    zoom={features.length > 1 ? 12 : 15}
                                />
                            </div>

                            <div className="max-h-[300px] overflow-y-auto border-t border-neutral-200 dark:border-neutral-800">
                                {features.map((place: any, index: any) => {
                                    const isGoogleResult = place.source === 'google';

                                    return (
                                        <div
                                            key={place.id || index}
                                            className={cn(
                                                "p-4",
                                                index !== features.length - 1 && "border-b border-neutral-200 dark:border-neutral-800"
                                            )}
                                        >
                                            <div className="flex items-center gap-4">
                                                <div className="h-12 w-12 rounded-xl bg-gradient-to-br from-blue-500/20 to-blue-600/20 flex items-center justify-center">
                                                    {place.feature_type === 'street_address' || place.feature_type === 'street' ? (
                                                        <RoadHorizon className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                                                    ) : place.feature_type === 'locality' ? (
                                                        <Building className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                                                    ) : (
                                                        <MapPin className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                                                    )}
                                                </div>

                                                <div className="flex-1 min-w-0">
                                                    <h3 className="text-xl font-semibold text-neutral-900 dark:text-neutral-100 truncate">
                                                        {place.name}
                                                    </h3>
                                                    {place.formatted_address && (
                                                        <p className="text-sm text-neutral-600 dark:text-neutral-400 mt-1">
                                                            {place.formatted_address}
                                                        </p>
                                                    )}
                                                    <Badge variant="secondary" className="mt-2">
                                                        {place.feature_type.replace(/_/g, ' ')}
                                                    </Badge>
                                                </div>

                                                <div className="flex gap-2">
                                                    <TooltipProvider>
                                                        <Tooltip>
                                                            <TooltipTrigger asChild>
                                                                <Button
                                                                    size="icon"
                                                                    variant="outline"
                                                                    onClick={() => {
                                                                        const coords = `${place.geometry.coordinates[1]},${place.geometry.coordinates[0]}`;
                                                                        navigator.clipboard.writeText(coords);
                                                                        toast.success("Coordinates copied!");
                                                                    }}
                                                                    className="h-10 w-10"
                                                                >
                                                                    <Copy className="h-4 w-4" />
                                                                </Button>
                                                            </TooltipTrigger>
                                                            <TooltipContent>Copy Coordinates</TooltipContent>
                                                        </Tooltip>
                                                    </TooltipProvider>

                                                    <TooltipProvider>
                                                        <Tooltip>
                                                            <TooltipTrigger asChild>
                                                                <Button
                                                                    size="icon"
                                                                    variant="outline"
                                                                    onClick={() => {
                                                                        const url = isGoogleResult
                                                                            ? `https://www.google.com/maps/place/?q=place_id:${place.place_id}`
                                                                            : `https://www.google.com/maps/search/?api=1&query=${place.geometry.coordinates[1]},${place.geometry.coordinates[0]}`;
                                                                        window.open(url, '_blank');
                                                                    }}
                                                                    className="h-10 w-10"
                                                                >
                                                                    <ExternalLink className="h-4 w-4" />
                                                                </Button>
                                                            </TooltipTrigger>
                                                            <TooltipContent>View in Maps</TooltipContent>
                                                        </Tooltip>
                                                    </TooltipProvider>
                                                </div>
                                            </div>
                                        </div>
                                    );
                                })}
                            </div>
                        </Card>
                    );
                }

                if (toolInvocation.toolName === 'tmdb_search') {
                    if (!result) {
                        return <SearchLoadingState
                            icon={Film}
                            text="Discovering entertainment content..."
                            color="violet"
                        />;
                    }

                    return <TMDBResult result={result} />;
                }

                if (toolInvocation.toolName === 'trending_movies') {
                    if (!result) {
                        return <SearchLoadingState
                            icon={Film}
                            text="Loading trending movies..."
                            color="blue"
                        />;
                    }
                    return <TrendingResults result={result} type="movie" />;
                }

                if (toolInvocation.toolName === 'trending_tv') {
                    if (!result) {
                        return <SearchLoadingState
                            icon={Tv}
                            text="Loading trending TV shows..."
                            color="blue"
                        />;
                    }
                    return <TrendingResults result={result} type="tv" />;
                }


                if (toolInvocation.toolName === 'youtube_search') {
                    if (!result) {
                        return <SearchLoadingState
                            icon={YoutubeIcon}
                            text="Searching YouTube videos..."
                            color="red"
                        />;
                    }

                    const youtubeResult = result as YouTubeSearchResponse;

                    return (
                        <Accordion type="single" defaultValue="videos" collapsible className="w-full">
                            <AccordionItem value="videos" className="border-0">
                                <AccordionTrigger
                                    className={cn(
                                        "w-full dark:bg-neutral-900 bg-white rounded-xl dark:border-neutral-800 border-gray-200 border px-6 py-4 hover:no-underline transition-all",
                                        "[&[data-state=open]]:rounded-b-none",
                                        "[&[data-state=open]]:border-b-0"
                                    )}
                                >
                                    <div className="flex items-center gap-3">
                                        <div className="p-2 rounded-lg dark:bg-neutral-800 bg-gray-100">
                                            <YoutubeIcon className="h-4 w-4 text-red-500" />
                                        </div>
                                        <div>
                                            <h2 className="dark:text-neutral-100 text-gray-900 font-medium text-left">
                                                YouTube Results
                                            </h2>
                                            <div className="flex items-center gap-2 mt-1">
                                                <Badge variant="secondary" className="dark:bg-neutral-800 bg-gray-100 dark:text-neutral-300 text-gray-600">
                                                    {youtubeResult.results.length} videos
                                                </Badge>
                                            </div>
                                        </div>
                                    </div>
                                </AccordionTrigger>

                                <AccordionContent className="dark:bg-neutral-900 bg-white dark:border-neutral-800 border-gray-200 border border-t-0 rounded-b-xl">
                                    <div className="flex overflow-x-auto gap-3 p-3 no-scrollbar">
                                        {youtubeResult.results.map((video, index) => (
                                            <YouTubeCard
                                                key={video.videoId}
                                                video={video}
                                                index={index}
                                            />
                                        ))}
                                    </div>
                                </AccordionContent>
                            </AccordionItem>
                        </Accordion>
                    );
                }

                if (toolInvocation.toolName === 'academic_search') {
                    if (!result) {
                        return <SearchLoadingState
                            icon={Book}
                            text="Searching academic papers..."
                            color="violet"
                        />;
                    }

                    return (
                        <Card className="w-full my-4 overflow-hidden">
                            <CardHeader className="pb-2 flex flex-row items-center justify-between">
                                <div className="flex items-center gap-2">
                                    <div className="h-8 w-8 rounded-xl bg-gradient-to-br from-violet-500/20 to-violet-600/20 flex items-center justify-center backdrop-blur-sm">
                                        <Book className="h-4 w-4 text-violet-600 dark:text-violet-400" />
                                    </div>
                                    <div>
                                        <CardTitle>Academic Papers</CardTitle>
                                        <p className="text-sm text-muted-foreground">Found {result.results.length} papers</p>
                                    </div>
                                </div>
                            </CardHeader>
                            <div className="px-4 pb-2">
                                <div className="flex overflow-x-auto gap-4 no-scrollbar">
                                    {result.results.map((paper: AcademicResult, index: number) => (
                                        <motion.div
                                            key={paper.url || index}
                                            className="w-[400px] flex-none"
                                            initial={{ opacity: 0, y: 20 }}
                                            animate={{ opacity: 1, y: 0 }}
                                            transition={{ duration: 0.3, delay: index * 0.1 }}
                                        >
                                            <div className="h-[300px] relative group">
                                                <div className="absolute inset-0 rounded-xl bg-gradient-to-br from-violet-500/20 via-violet-500/5 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500" />

                                                <div className="h-full relative backdrop-blur-sm bg-background/95 dark:bg-neutral-900/95 border border-neutral-200/50 dark:border-neutral-800/50 rounded-xl p-4 flex flex-col transition-all duration-500 group-hover:border-violet-500/20">
                                                    <h3 className="font-semibold text-xl tracking-tight mb-3 line-clamp-2 group-hover:text-violet-500 dark:group-hover:text-violet-400 transition-colors duration-300">
                                                        {paper.title}
                                                    </h3>

                                                    {paper.author && (
                                                        <div className="mb-3">
                                                            <div className="inline-flex items-center gap-1.5 px-2.5 py-1.5 text-sm text-muted-foreground bg-neutral-100 dark:bg-neutral-800 rounded-md">
                                                                <User2 className="h-3.5 w-3.5 text-violet-500" />
                                                                <span className="line-clamp-1">
                                                                    {paper.author.split(';')
                                                                        .slice(0, 2)
                                                                        .join(', ') +
                                                                        (paper.author.split(';').length > 2 ? ' et al.' : '')
                                                                    }
                                                                </span>
                                                            </div>
                                                        </div>
                                                    )}

                                                    {paper.publishedDate && (
                                                        <div className="mb-4">
                                                            <div className="inline-flex items-center gap-1.5 px-2.5 py-1.5 text-sm text-muted-foreground bg-neutral-100 dark:bg-neutral-800 rounded-md">
                                                                <Calendar className="h-3.5 w-3.5 text-violet-500" />
                                                                {new Date(paper.publishedDate).toLocaleDateString()}
                                                            </div>
                                                        </div>
                                                    )}

                                                    <div className="flex-1 relative mb-4 pl-3">
                                                        <div className="absolute -left-0 top-1 bottom-1 w-[2px] rounded-full bg-gradient-to-b from-violet-500 via-violet-400 to-transparent opacity-50" />
                                                        <p className="text-sm text-muted-foreground line-clamp-4">
                                                            {paper.summary}
                                                        </p>
                                                    </div>

                                                    <div className="flex gap-2">
                                                        <Button
                                                            variant="ghost"
                                                            onClick={() => window.open(paper.url, '_blank')}
                                                            className="flex-1 bg-neutral-100 dark:bg-neutral-800 hover:bg-violet-100 dark:hover:bg-violet-900/20 hover:text-violet-600 dark:hover:text-violet-400 group/btn"
                                                        >
                                                            <FileText className="h-4 w-4 mr-2 group-hover/btn:scale-110 transition-transform duration-300" />
                                                            View Paper
                                                        </Button>

                                                        {paper.url.includes('arxiv.org') && (
                                                            <Button
                                                                variant="ghost"
                                                                onClick={() => window.open(paper.url.replace('abs', 'pdf'), '_blank')}
                                                                className="bg-neutral-100 dark:bg-neutral-800 hover:bg-violet-100 dark:hover:bg-violet-900/20 hover:text-violet-600 dark:hover:text-violet-400 group/btn"
                                                            >
                                                                <Download className="h-4 w-4 group-hover/btn:scale-110 transition-transform duration-300" />
                                                            </Button>
                                                        )}
                                                    </div>
                                                </div>
                                            </div>
                                        </motion.div>
                                    ))}
                                </div>
                            </div>
                        </Card>
                    );
                }

                if (toolInvocation.toolName === 'nearby_search') {
                    if (!result) {
                        return (
                            <div className="flex items-center justify-between w-full">
                                <div className="flex items-center gap-2">
                                    <MapPin className="h-5 w-5 text-neutral-700 dark:text-neutral-300 animate-pulse" />
                                    <span className="text-neutral-700 dark:text-neutral-300 text-lg">
                                        Finding nearby {args.type}...
                                    </span>
                                </div>
                                <motion.div className="flex space-x-1">
                                    {[0, 1, 2].map((index) => (
                                        <motion.div
                                            key={index}
                                            className="w-2 h-2 bg-neutral-400 dark:bg-neutral-600 rounded-full"
                                            initial={{ opacity: 0.3 }}
                                            animate={{ opacity: 1 }}
                                            transition={{
                                                repeat: Infinity,
                                                duration: 0.8,
                                                delay: index * 0.2,
                                                repeatType: "reverse",
                                            }}
                                        />
                                    ))}
                                </motion.div>
                            </div>
                        );
                    }

                    console.log(result);

                    return (
                        <div className="my-4">
                            <NearbySearchMapView
                                center={result.center}
                                places={result.results}
                                type={args.type}
                            />
                        </div>
                    );
                }

                if (toolInvocation.toolName === 'text_search') {
                    if (!result) {
                        return (
                            <div className="flex items-center justify-between w-full">
                                <div className='flex items-center gap-2'>
                                    <MapPin className="h-5 w-5 text-neutral-700 dark:text-neutral-300 animate-pulse" />
                                    <span className="text-neutral-700 dark:text-neutral-300 text-lg">Searching places...</span>
                                </div>
                                <motion.div className="flex space-x-1">
                                    {[0, 1, 2].map((index) => (
                                        <motion.div
                                            key={index}
                                            className="w-2 h-2 bg-neutral-400 dark:bg-neutral-600 rounded-full"
                                            initial={{ opacity: 0.3 }}
                                            animate={{ opacity: 1 }}
                                            transition={{
                                                repeat: Infinity,
                                                duration: 0.8,
                                                delay: index * 0.2,
                                                repeatType: "reverse",
                                            }}
                                        />
                                    ))}
                                </motion.div>
                            </div>
                        );
                    }

                    const centerLocation = result.results[0]?.geometry?.location;
                    return (
                        <MapContainer
                            title="Search Results"
                            center={centerLocation}
                            places={result.results.map((place: any) => ({
                                name: place.name,
                                location: place.geometry.location,
                                vicinity: place.formatted_address
                            }))}
                        />
                    );
                }

                if (toolInvocation.toolName === 'get_weather_data') {
                    if (!result) {
                        return (
                            <div className="flex items-center justify-between w-full">
                                <div className="flex items-center gap-2">
                                    <Cloud className="h-5 w-5 text-neutral-700 dark:text-neutral-300 animate-pulse" />
                                    <span className="text-neutral-700 dark:text-neutral-300 text-lg">Fetching weather data...</span>
                                </div>
                                <div className="flex space-x-1">
                                    {[0, 1, 2].map((index) => (
                                        <motion.div
                                            key={index}
                                            className="w-2 h-2 bg-neutral-400 dark:bg-neutral-600 rounded-full"
                                            initial={{ opacity: 0.3 }}
                                            animate={{ opacity: 1 }}
                                            transition={{
                                                repeat: Infinity,
                                                duration: 0.8,
                                                delay: index * 0.2,
                                                repeatType: "reverse",
                                            }}
                                        />
                                    ))}
                                </div>
                            </div>
                        );
                    }
                    return <WeatherChart result={result} />;
                }

                if (toolInvocation.toolName === 'currency_converter') {
                    return <CurrencyConverter toolInvocation={toolInvocation} result={result} />;
                }

                if (toolInvocation.toolName === 'stock_chart') {
                    return (
                        <div className="flex flex-col gap-3 w-full mt-4">
                            <Badge
                                variant="secondary"
                                className={cn(
                                    "w-fit flex items-center gap-3 px-4 py-2 rounded-full transition-colors duration-200",
                                    !result
                                        ? "bg-blue-50/50 dark:bg-blue-900/20 text-blue-600 dark:text-blue-400"
                                        : "bg-green-50/50 dark:bg-green-900/20 text-green-600 dark:text-green-400"
                                )}>
                                <TrendingUpIcon className="h-4 w-4" />
                                <span className="font-medium">{args.title}</span>
                                {!result ? (
                                    <Loader2 className="h-4 w-4 animate-spin" />
                                ) : (
                                    <Check className="h-4 w-4" />
                                )}
                            </Badge>

                            {result?.chart && (
                                <div className="w-full">
                                    <InteractiveStockChart
                                        title={args.title}
                                        chart={{
                                            ...result.chart,
                                            x_scale: 'datetime'
                                        }}
                                        data={result.chart.elements}
                                    />
                                </div>
                            )}
                        </div>
                    );
                }

                if (toolInvocation.toolName === "code_interpreter") {
                    return (
                        <div className="space-y-6">
                            <CollapsibleSection
                                code={args.code}
                                output={result?.message}
                                language="python"
                                title={args.title}
                                icon={args.icon || 'default'}
                                status={result ? 'completed' : 'running'}
                            />

                            {result?.chart && (
                                <div className="pt-1">
                                    <InteractiveChart chart={result.chart} />
                                </div>
                            )}
                        </div>
                    );
                }

                if (toolInvocation.toolName === 'web_search') {
                    return (
                        <div className="mt-4">
                            <MultiSearch result={result} args={args} />
                        </div>
                    );
                }

                if (toolInvocation.toolName === 'retrieve') {
                    if (!result) {
                        return (
                            <div className="border border-neutral-200 rounded-xl my-4 p-4 dark:border-neutral-800 bg-gradient-to-b from-white to-neutral-50 dark:from-neutral-900 dark:to-neutral-900/90">
                                <div className="flex items-center gap-4">
                                    <div className="relative w-10 h-10">
                                        <div className="absolute inset-0 bg-primary/10 animate-pulse rounded-lg" />
                                        <Globe className="h-5 w-5 text-primary/70 absolute inset-0 m-auto" />
                                    </div>
                                    <div className="space-y-2 flex-1">
                                        <div className="h-4 w-36 bg-neutral-200 dark:bg-neutral-800 animate-pulse rounded-md" />
                                        <div className="space-y-1.5">
                                            <div className="h-3 w-full bg-neutral-100 dark:bg-neutral-800/50 animate-pulse rounded-md" />
                                            <div className="h-3 w-2/3 bg-neutral-100 dark:bg-neutral-800/50 animate-pulse rounded-md" />
                                        </div>
                                    </div>
                                </div>
                            </div>
                        );
                    }

                    return (
                        <div className="border border-neutral-200 rounded-xl my-4 overflow-hidden dark:border-neutral-800 bg-gradient-to-b from-white to-neutral-50 dark:from-neutral-900 dark:to-neutral-900/90">
                            <div className="p-4">
                                <div className="flex items-start gap-4">
                                    <div className="relative w-10 h-10 flex-shrink-0">
                                        <div className="absolute inset-0 bg-gradient-to-br from-primary/10 to-transparent rounded-lg" />
                                        <img
                                            className="h-5 w-5 absolute inset-0 m-auto"
                                            src={`https://www.google.com/s2/favicons?sz=64&domain_url=${encodeURIComponent(result.results[0].url)}`}
                                            alt=""
                                        />
                                    </div>
                                    <div className="flex-1 min-w-0 space-y-2">
                                        <h2 className="font-semibold text-lg text-neutral-900 dark:text-neutral-100 tracking-tight truncate">
                                            {result.results[0].title}
                                        </h2>
                                        <p className="text-sm text-neutral-600 dark:text-neutral-400 line-clamp-2">
                                            {result.results[0].description}
                                        </p>
                                        <div className="flex items-center gap-3">
                                            <span className="px-2.5 py-0.5 text-xs font-medium rounded-full bg-primary/10 text-primary">
                                                {result.results[0].language || 'Unknown'}
                                            </span>
                                            <a
                                                href={result.results[0].url}
                                                target="_blank"
                                                rel="noopener noreferrer"
                                                className="inline-flex items-center gap-1.5 text-xs text-neutral-500 hover:text-primary transition-colors"
                                            >
                                                <ExternalLink className="h-3 w-3" />
                                                View source
                                            </a>
                                        </div>
                                    </div>
                                </div>
                            </div>

                            <div className="border-t border-neutral-200 dark:border-neutral-800">
                                <details className="group">
                                    <summary className="w-full px-4 py-2 cursor-pointer text-sm text-neutral-700 dark:text-neutral-300 hover:bg-neutral-50 dark:hover:bg-neutral-800/50 transition-colors flex items-center justify-between">
                                        <div className="flex items-center gap-2">
                                            <TextIcon className="h-4 w-4 text-neutral-400" />
                                            <span>View content</span>
                                        </div>
                                        <ChevronDown className="h-4 w-4 transition-transform duration-200 group-open:rotate-180" />
                                    </summary>
                                    <div className="max-h-[50vh] overflow-y-auto p-4 bg-neutral-50/50 dark:bg-neutral-800/30">
                                        <div className="prose prose-neutral dark:prose-invert prose-sm max-w-none">
                                            <ReactMarkdown>{result.results[0].content}</ReactMarkdown>
                                        </div>
                                    </div>
                                </details>
                            </div>
                        </div>
                    );
                }
                if (toolInvocation.toolName === 'text_translate') {
                    return <TranslationTool toolInvocation={toolInvocation} result={result} />;
                }

                if (toolInvocation.toolName === 'track_flight') {
                    if (!result) {
                        return (
                            <div className="flex items-center justify-between w-full">
                                <div className="flex items-center gap-2">
                                    <Plane className="h-5 w-5 text-neutral-700 dark:text-neutral-300 animate-pulse" />
                                    <span className="text-neutral-700 dark:text-neutral-300 text-lg">Tracking flight...</span>
                                </div>
                                <div className="flex space-x-1">
                                    {[0, 1, 2].map((index) => (
                                        <motion.div
                                            key={index}
                                            className="w-2 h-2 bg-neutral-400 dark:bg-neutral-600 rounded-full"
                                            initial={{ opacity: 0.3 }}
                                            animate={{ opacity: 1 }}
                                            transition={{
                                                repeat: Infinity,
                                                duration: 0.8,
                                                delay: index * 0.2,
                                                repeatType: "reverse",
                                            }}
                                        />
                                    ))}
                                </div>
                            </div>
                        );
                    }

                    if (result.error) {
                        return (
                            <div className="text-red-500 dark:text-red-400">
                                Error tracking flight: {result.error}
                            </div>
                        );
                    }

                    return (
                        <div className="my-4">
                            <FlightTracker data={result} />
                        </div>
                    );
                }

                return null;
            },
            []
        );

         const TranslationTool: React.FC<{ toolInvocation: ToolInvocation; result: any }> = ({ toolInvocation, result }) => {
        const [isPlaying, setIsPlaying] = useState(false);
        const [audioUrl, setAudioUrl] = useState<string | null>(null);
        const [isGeneratingAudio, setIsGeneratingAudio] = useState(false);
        const audioRef = useRef<HTMLAudioElement | null>(null);
        const canvasRef = useRef<HTMLCanvasElement | null>(null);
        const waveRef = useRef<Wave | null>(null);

        useEffect(() => {
            const _audioRef = audioRef.current
            return () => {
                if (_audioRef) {
                    _audioRef.pause();
                    _audioRef.src = '';
                }
            };
        }, []);

        useEffect(() => {
            if (audioUrl && audioRef.current && canvasRef.current) {
                waveRef.current = new Wave(audioRef.current, canvasRef.current);
                waveRef.current.addAnimation(new waveRef.current.animations.Lines({
                    lineColor: "rgb(203, 113, 93)",
                    lineWidth: 2,
                    mirroredY: true,
                    count: 100,
                }));
            }
        }, [audioUrl]);

        const handlePlayPause = async () => {
            if (!audioUrl && !isGeneratingAudio) {
                setIsGeneratingAudio(true);
                try {
                    const { audio } = await generateSpeech(result.translatedText, 'alloy');
                    setAudioUrl(audio);
                    setIsGeneratingAudio(false);
                } catch (error) {
                    console.error("Error generating speech:", error);
                    setIsGeneratingAudio(false);
                }
            } else if (audioRef.current) {
                if (isPlaying) {
                    audioRef.current.pause();
                } else {
                    audioRef.current.play();
                }
                setIsPlaying(!isPlaying);
            }
        };

        const handleReset = () => {
            if (audioRef.current) {
                audioRef.current.pause();
                audioRef.current.currentTime = 0;
                setIsPlaying(false);
            }
        };

        if (!result) {
            return (
                <Card className="w-full my-4 bg-white dark:bg-neutral-800 border-neutral-200 dark:border-neutral-700">
                    <CardContent className="flex items-center justify-center h-24">
                        <div className="animate-pulse flex items-center">
                            <div className="h-4 w-4 bg-primary rounded-full mr-2"></div>
                            <div className="h-4 w-32 bg-primary rounded"></div>
                        </div>
                    </CardContent>
                </Card>
            );
        }

        return (
            <Card className="w-full my-4 shadow-none bg-white dark:bg-neutral-800 border-neutral-200 dark:border-neutral-700">
                <CardContent className="p-6">
                    <div className="space-y-4">
                        <div className="w-full h-24 bg-neutral-100 dark:bg-neutral-700 rounded-lg overflow-hidden">
                            <canvas ref={canvasRef} width="800" height="200" className="w-full h-full" />
                        </div>
                        <div className="flex text-left gap-3 items-center justify-center text-pretty">
                            <div className="flex justify-center space-x-2">
                                <Button
                                    onClick={handlePlayPause}
                                    disabled={isGeneratingAudio}
                                    variant="outline"
                                    size="sm"
                                    className="text-xs sm:text-sm w-24 bg-neutral-100 dark:bg-neutral-700 text-neutral-800 dark:text-neutral-200"
                                >
                                    {isGeneratingAudio ? (
                                        "Generating..."
                                    ) : isPlaying ? (
                                        <><Pause className="mr-1 sm:mr-2 h-3 w-3 sm:h-4 sm:w-4" /> Pause</>
                                    ) : (
                                        <><Play className="mr-1 sm:mr-2 h-3 w-3 sm:h-4 sm:w-4" /> Play</>
                                    )}
                                </Button>
                            </div>
                            <div className='text-sm text-neutral-800 dark:text-neutral-200'>
                                The phrase <span className='font-semibold'>{toolInvocation.args.text}</span> translates from <span className='font-semibold'>{result.detectedLanguage}</span> to <span className='font-semibold'>{toolInvocation.args.to}</span> as <span className='font-semibold'>{result.translatedText}</span> in <span className='font-semibold'>{toolInvocation.args.to}</span>.
                            </div>
                        </div>
                    </div>
                </CardContent>
                {audioUrl && (
                    <audio
                        ref={audioRef}
                        src={audioUrl}
                        onPlay={() => setIsPlaying(true)}
                        onPause={() => setIsPlaying(false)}
                        onEnded={() => { setIsPlaying(false); handleReset(); }}
                    />
                )}
            </Card>
        );
    };

        return toolInvocations.map(
            (toolInvocation: ToolInvocation, toolIndex: number) => (
                <div key={`tool-${toolIndex}`}>
                    {renderToolInvocation(toolInvocation, toolIndex)}
                </div>
            )
        );
    },
    (prevProps, nextProps) => {
        return prevProps.toolInvocations === nextProps.toolInvocations;
    }
);
  
ToolInvocationListView.displayName = 'ToolInvocationListView';

const Home = () => {
    return (
        <Suspense fallback={<LoadingFallback />}>
            <HomeContent />
            <InstallPrompt />
        </Suspense>
    );
};

export default Home;

================
File: app/providers.tsx
================
"use client";

import { ThemeProvider } from "next-themes";
import { ReactNode } from "react";

export function Providers({ children }: { children: ReactNode }) {
  return (
    <ThemeProvider
      attribute="class"
      defaultTheme="dark"
      forcedTheme="dark"
      disableTransitionOnChange
    >
      {children}
    </ThemeProvider>
  )
}

================
File: components/animata/background/moving-gradient.tsx
================
import { ComponentPropsWithoutRef } from "react";

import { cn } from "@/lib/utils";

interface MovingGradientProps extends ComponentPropsWithoutRef<"div"> {
  animated?: boolean;
  gradientClassName?: string;
}

export default function MovingGradient({
  children,
  className,
  animated = true,
  gradientClassName,
  ...props
}: MovingGradientProps) {
  const backgroundClassName = "pointer-events-none absolute h-full w-full";
  return (
    <div {...props} className={cn("relative overflow-hidden bg-white", className)}>
      <div
        className={cn(
          "bg-size bg-gradient-to-r from-yellow-500 from-30% via-yellow-700 via-50% to-pink-500 to-80% opacity-15",
          {
            [backgroundClassName]: true,
            "animate-bg-position bg-[length:300%_auto]": animated,
          },
          gradientClassName,
        )}
      />
      <div className={cn(backgroundClassName, "z-1 blur-lg")} />
      {children}
    </div>
  );
}

================
File: components/core/border-trail.tsx
================
'use client';
import { cn } from '@/lib/utils';
import { motion, Transition } from 'motion/react';

type BorderTrailProps = {
  className?: string;
  size?: number;
  transition?: Transition;
  delay?: number;
  onAnimationComplete?: () => void;
  style?: React.CSSProperties;
};

export function BorderTrail({
  className,
  size = 60,
  transition,
  delay,
  onAnimationComplete,
  style,
}: BorderTrailProps) {
  const BASE_TRANSITION = {
    repeat: Infinity,
    duration: 5,
    ease: 'linear',
  };

  return (
    <div className='pointer-events-none absolute inset-0 rounded-[inherit] border border-transparent [mask-clip:padding-box,border-box] [mask-composite:intersect] [mask-image:linear-gradient(transparent,transparent),linear-gradient(#000,#000)]'>
      <motion.div
        className={cn('absolute aspect-square bg-zinc-500', className)}
        style={{
          width: size,
          offsetPath: `rect(0 auto auto 0 round ${size}px)`,
          ...style,
        }}
        animate={{
          offsetDistance: ['0%', '100%'],
        }}
        transition={{
          ...(transition ?? BASE_TRANSITION),
          delay: delay,
        }}
        onAnimationComplete={onAnimationComplete}
      />
    </div>
  );
}

================
File: components/core/logo.tsx
================
import { cn } from '@/lib/utils';

interface LogoProps {
  className?: string;
  animate?: boolean;
}

export function Logo({ className }: LogoProps) {
  return (
    <div className={cn("relative", className)}>
      <img 
        src="/images/logo.png"
        alt="Logo"
        className="w-16 h-16 animate-bounce" 
      />
    </div>
  );
}

================
File: components/core/text-loop.tsx
================
'use client';
import { cn } from '@/lib/utils';
import { motion, AnimatePresence, Transition, Variants } from 'motion/react';
import { useState, useEffect, Children } from 'react';

type TextLoopProps = {
  children: React.ReactNode[];
  className?: string;
  interval?: number;
  transition?: Transition;
  variants?: Variants;
  onIndexChange?: (index: number) => void;
};

export function TextLoop({
  children,
  className,
  interval = 2,
  transition = { duration: 0.3 },
  variants,
  onIndexChange,
}: TextLoopProps) {
  const [currentIndex, setCurrentIndex] = useState(0);
  const items = Children.toArray(children);

  useEffect(() => {
    const intervalMs = interval * 1000;

    const timer = setInterval(() => {
      setCurrentIndex((current) => {
        const next = (current + 1) % items.length;
        onIndexChange?.(next);
        return next;
      });
    }, intervalMs);
    return () => clearInterval(timer);
  }, [items.length, interval, onIndexChange]);

  const motionVariants: Variants = {
    initial: { y: 20, opacity: 0 },
    animate: { y: 0, opacity: 1 },
    exit: { y: -20, opacity: 0 },
  };

  return (
    <div className={cn('relative inline-block whitespace-nowrap', className)}>
      <AnimatePresence mode='popLayout' initial={false}>
        <motion.div
          key={currentIndex}
          initial='initial'
          animate='animate'
          exit='exit'
          transition={transition}
          variants={variants || motionVariants}
        >
          {items[currentIndex]}
        </motion.div>
      </AnimatePresence>
    </div>
  );
}

================
File: components/core/text-shimmer.tsx
================
'use client';
import React, { useMemo, type JSX } from 'react';
import { motion } from 'motion/react';
import { cn } from '@/lib/utils';

interface TextShimmerProps {
  children: string;
  as?: React.ElementType;
  className?: string;
  duration?: number;
  spread?: number;
}

export function TextShimmer({
  children,
  as: Component = 'p',
  className,
  duration = 2,
  spread = 2,
}: TextShimmerProps) {
  const MotionComponent = motion.create(
    Component as keyof JSX.IntrinsicElements
  );

  const dynamicSpread = useMemo(() => {
    return children.length * spread;
  }, [children, spread]);

  return (
    <MotionComponent
      className={cn(
        'relative inline-block bg-[length:250%_100%,auto] bg-clip-text',
        'text-transparent [--base-color:#a1a1aa] [--base-gradient-color:#000]',
        '[--bg:linear-gradient(90deg,#0000_calc(50%-var(--spread)),var(--base-gradient-color),#0000_calc(50%+var(--spread)))] [background-repeat:no-repeat,padding-box]',
        'dark:[--base-color:#71717a] dark:[--base-gradient-color:#ffffff] dark:[--bg:linear-gradient(90deg,#0000_calc(50%-var(--spread)),var(--base-gradient-color),#0000_calc(50%+var(--spread)))]',
        className
      )}
      initial={{ backgroundPosition: '100% center' }}
      animate={{ backgroundPosition: '0% center' }}
      transition={{
        repeat: Infinity,
        duration,
        ease: 'linear',
      }}
      style={
        {
          '--spread': `${dynamicSpread}px`,
          backgroundImage: `var(--bg), linear-gradient(var(--base-color), var(--base-color))`,
        } as React.CSSProperties
      }
    >
      {children}
    </MotionComponent>
  );
}

================
File: components/ui/accordion.tsx
================
"use client"

import * as React from "react"
import * as AccordionPrimitive from "@radix-ui/react-accordion"
import { ChevronDownIcon } from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const Accordion = AccordionPrimitive.Root

const AccordionItem = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>
>(({ className, ...props }, ref) => (
  <AccordionPrimitive.Item
    ref={ref}
    className={cn("border-b", className)}
    {...props}
  />
))
AccordionItem.displayName = "AccordionItem"

const AccordionTrigger = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Header className="flex">
    <AccordionPrimitive.Trigger
      ref={ref}
      className={cn(
        "flex flex-1 items-center justify-between py-4 text-sm font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180",
        className
      )}
      {...props}
    >
      {children}
      <ChevronDownIcon className="h-4 w-4 shrink-0 text-muted-foreground transition-transform duration-200" />
    </AccordionPrimitive.Trigger>
  </AccordionPrimitive.Header>
))
AccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName

const AccordionContent = React.forwardRef<
  React.ElementRef<typeof AccordionPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <AccordionPrimitive.Content
    ref={ref}
    className="overflow-hidden text-sm data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down"
    {...props}
  >
    <div className={cn("pb-4 pt-0", className)}>{children}</div>
  </AccordionPrimitive.Content>
))
AccordionContent.displayName = AccordionPrimitive.Content.displayName

export { Accordion, AccordionItem, AccordionTrigger, AccordionContent }

================
File: components/ui/badge.tsx
================
import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const badgeVariants = cva(
  "inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2",
  {
    variants: {
      variant: {
        default:
          "border-transparent bg-primary text-primary-foreground shadow hover:bg-primary/80",
        secondary:
          "border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80",
        green:
          "border-transparent bg-green-500/20 hover:bg-green-500/30 text-green-800 rounded-full",
        destructive:
          "border-transparent bg-destructive text-destructive-foreground shadow hover:bg-destructive/80",
        outline: "text-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

export interface BadgeProps
  extends React.HTMLAttributes<HTMLDivElement>,
    VariantProps<typeof badgeVariants> {}

function Badge({ className, variant, ...props }: BadgeProps) {
  return (
    <div className={cn(badgeVariants({ variant }), className)} {...props} />
  )
}

export { Badge, badgeVariants }

================
File: components/ui/button.tsx
================
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50",
  {
    variants: {
      variant: {
        default:
          "bg-primary text-primary-foreground shadow hover:bg-primary/90",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-input bg-background shadow-sm hover:bg-accent hover:text-accent-foreground",
        secondary:
          "bg-secondary text-secondary-foreground shadow-sm hover:bg-secondary/80",
        ghost: "hover:bg-accent hover:text-accent-foreground",
        link: "text-primary underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

================
File: components/ui/card.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLHeadingElement>
>(({ className, ...props }, ref) => (
  <h3
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLParagraphElement,
  React.HTMLAttributes<HTMLParagraphElement>
>(({ className, ...props }, ref) => (
  <p
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

================
File: components/ui/carousel.tsx
================
"use client"

import * as React from "react"
import { ArrowLeftIcon, ArrowRightIcon } from "@radix-ui/react-icons"
import useEmblaCarousel, {
  type UseEmblaCarouselType,
} from "embla-carousel-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"

type CarouselApi = UseEmblaCarouselType[1]
type UseCarouselParameters = Parameters<typeof useEmblaCarousel>
type CarouselOptions = UseCarouselParameters[0]
type CarouselPlugin = UseCarouselParameters[1]

type CarouselProps = {
  opts?: CarouselOptions
  plugins?: CarouselPlugin
  orientation?: "horizontal" | "vertical"
  setApi?: (api: CarouselApi) => void
}

type CarouselContextProps = {
  carouselRef: ReturnType<typeof useEmblaCarousel>[0]
  api: ReturnType<typeof useEmblaCarousel>[1]
  scrollPrev: () => void
  scrollNext: () => void
  canScrollPrev: boolean
  canScrollNext: boolean
} & CarouselProps

const CarouselContext = React.createContext<CarouselContextProps | null>(null)

function useCarousel() {
  const context = React.useContext(CarouselContext)

  if (!context) {
    throw new Error("useCarousel must be used within a <Carousel />")
  }

  return context
}

const Carousel = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement> & CarouselProps
>(
  (
    {
      orientation = "horizontal",
      opts,
      setApi,
      plugins,
      className,
      children,
      ...props
    },
    ref
  ) => {
    const [carouselRef, api] = useEmblaCarousel(
      {
        ...opts,
        axis: orientation === "horizontal" ? "x" : "y",
      },
      plugins
    )
    const [canScrollPrev, setCanScrollPrev] = React.useState(false)
    const [canScrollNext, setCanScrollNext] = React.useState(false)

    const onSelect = React.useCallback((api: CarouselApi) => {
      if (!api) {
        return
      }

      setCanScrollPrev(api.canScrollPrev())
      setCanScrollNext(api.canScrollNext())
    }, [])

    const scrollPrev = React.useCallback(() => {
      api?.scrollPrev()
    }, [api])

    const scrollNext = React.useCallback(() => {
      api?.scrollNext()
    }, [api])

    const handleKeyDown = React.useCallback(
      (event: React.KeyboardEvent<HTMLDivElement>) => {
        if (event.key === "ArrowLeft") {
          event.preventDefault()
          scrollPrev()
        } else if (event.key === "ArrowRight") {
          event.preventDefault()
          scrollNext()
        }
      },
      [scrollPrev, scrollNext]
    )

    React.useEffect(() => {
      if (!api || !setApi) {
        return
      }

      setApi(api)
    }, [api, setApi])

    React.useEffect(() => {
      if (!api) {
        return
      }

      onSelect(api)
      api.on("reInit", onSelect)
      api.on("select", onSelect)

      return () => {
        api?.off("select", onSelect)
      }
    }, [api, onSelect])

    return (
      <CarouselContext.Provider
        value={{
          carouselRef,
          api: api,
          opts,
          orientation:
            orientation || (opts?.axis === "y" ? "vertical" : "horizontal"),
          scrollPrev,
          scrollNext,
          canScrollPrev,
          canScrollNext,
        }}
      >
        <div
          ref={ref}
          onKeyDownCapture={handleKeyDown}
          className={cn("relative", className)}
          role="region"
          aria-roledescription="carousel"
          {...props}
        >
          {children}
        </div>
      </CarouselContext.Provider>
    )
  }
)
Carousel.displayName = "Carousel"

const CarouselContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { carouselRef, orientation } = useCarousel()

  return (
    <div ref={carouselRef} className="overflow-hidden">
      <div
        ref={ref}
        className={cn(
          "flex",
          orientation === "horizontal" ? "-ml-4" : "-mt-4 flex-col",
          className
        )}
        {...props}
      />
    </div>
  )
})
CarouselContent.displayName = "CarouselContent"

const CarouselItem = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => {
  const { orientation } = useCarousel()

  return (
    <div
      ref={ref}
      role="group"
      aria-roledescription="slide"
      className={cn(
        "min-w-0 shrink-0 grow-0 basis-full",
        orientation === "horizontal" ? "pl-4" : "pt-4",
        className
      )}
      {...props}
    />
  )
})
CarouselItem.displayName = "CarouselItem"

const CarouselPrevious = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollPrev, canScrollPrev } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute  h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-left-12 top-1/2 -translate-y-1/2"
          : "-top-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollPrev}
      onClick={scrollPrev}
      {...props}
    >
      <ArrowLeftIcon className="h-4 w-4" />
      <span className="sr-only">Previous slide</span>
    </Button>
  )
})
CarouselPrevious.displayName = "CarouselPrevious"

const CarouselNext = React.forwardRef<
  HTMLButtonElement,
  React.ComponentProps<typeof Button>
>(({ className, variant = "outline", size = "icon", ...props }, ref) => {
  const { orientation, scrollNext, canScrollNext } = useCarousel()

  return (
    <Button
      ref={ref}
      variant={variant}
      size={size}
      className={cn(
        "absolute h-8 w-8 rounded-full",
        orientation === "horizontal"
          ? "-right-12 top-1/2 -translate-y-1/2"
          : "-bottom-12 left-1/2 -translate-x-1/2 rotate-90",
        className
      )}
      disabled={!canScrollNext}
      onClick={scrollNext}
      {...props}
    >
      <ArrowRightIcon className="h-4 w-4" />
      <span className="sr-only">Next slide</span>
    </Button>
  )
})
CarouselNext.displayName = "CarouselNext"

export {
  type CarouselApi,
  Carousel,
  CarouselContent,
  CarouselItem,
  CarouselPrevious,
  CarouselNext,
}

================
File: components/ui/chart.tsx
================
"use client"

import * as React from "react"
import * as RechartsPrimitive from "recharts"
import {
  NameType,
  Payload,
  ValueType,
} from "recharts/types/component/DefaultTooltipContent"

import { cn } from "@/lib/utils"

// Format: { THEME_NAME: CSS_SELECTOR }
const THEMES = { light: "", dark: ".dark" } as const

export type ChartConfig = {
  [k in string]: {
    label?: React.ReactNode
    icon?: React.ComponentType
  } & (
    | { color?: string; theme?: never }
    | { color?: never; theme: Record<keyof typeof THEMES, string> }
  )
}

type ChartContextProps = {
  config: ChartConfig
}

const ChartContext = React.createContext<ChartContextProps | null>(null)

function useChart() {
  const context = React.useContext(ChartContext)

  if (!context) {
    throw new Error("useChart must be used within a <ChartContainer />")
  }

  return context
}

const ChartContainer = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> & {
    config: ChartConfig
    children: React.ComponentProps<
      typeof RechartsPrimitive.ResponsiveContainer
    >["children"]
  }
>(({ id, className, children, config, ...props }, ref) => {
  const uniqueId = React.useId()
  const chartId = `chart-${id || uniqueId.replace(/:/g, "")}`

  return (
    <ChartContext.Provider value={{ config }}>
      <div
        data-chart={chartId}
        ref={ref}
        className={cn(
          "flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none",
          className
        )}
        {...props}
      >
        <ChartStyle id={chartId} config={config} />
        <RechartsPrimitive.ResponsiveContainer>
          {children}
        </RechartsPrimitive.ResponsiveContainer>
      </div>
    </ChartContext.Provider>
  )
})
ChartContainer.displayName = "Chart"

const ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {
  const colorConfig = Object.entries(config).filter(
    ([_, config]) => config.theme || config.color
  )

  if (!colorConfig.length) {
    return null
  }

  return (
    <style
      dangerouslySetInnerHTML={{
        __html: Object.entries(THEMES)
          .map(
            ([theme, prefix]) => `
${prefix} [data-chart=${id}] {
${colorConfig
  .map(([key, itemConfig]) => {
    const color =
      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||
      itemConfig.color
    return color ? `  --color-${key}: ${color};` : null
  })
  .join("\n")}
}
`
          )
          .join("\n"),
      }}
    />
  )
}

const ChartTooltip = RechartsPrimitive.Tooltip

const ChartTooltipContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &
    React.ComponentProps<"div"> & {
      hideLabel?: boolean
      hideIndicator?: boolean
      indicator?: "line" | "dot" | "dashed"
      nameKey?: string
      labelKey?: string
    }
>(
  (
    {
      active,
      payload,
      className,
      indicator = "dot",
      hideLabel = false,
      hideIndicator = false,
      label,
      labelFormatter,
      labelClassName,
      formatter,
      color,
      nameKey,
      labelKey,
    },
    ref
  ) => {
    const { config } = useChart()

    const tooltipLabel = React.useMemo(() => {
      if (hideLabel || !payload?.length) {
        return null
      }

      const [item] = payload
      const key = `${labelKey || item.dataKey || item.name || "value"}`
      const itemConfig = getPayloadConfigFromPayload(config, item, key)
      const value =
        !labelKey && typeof label === "string"
          ? config[label as keyof typeof config]?.label || label
          : itemConfig?.label

      if (labelFormatter) {
        return (
          <div className={cn("font-medium", labelClassName)}>
            {labelFormatter(value, payload)}
          </div>
        )
      }

      if (!value) {
        return null
      }

      return <div className={cn("font-medium", labelClassName)}>{value}</div>
    }, [
      label,
      labelFormatter,
      payload,
      hideLabel,
      labelClassName,
      config,
      labelKey,
    ])

    if (!active || !payload?.length) {
      return null
    }

    const nestLabel = payload.length === 1 && indicator !== "dot"

    return (
      <div
        ref={ref}
        className={cn(
          "grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl",
          className
        )}
      >
        {!nestLabel ? tooltipLabel : null}
        <div className="grid gap-1.5">
          {payload.map((item, index) => {
            const key = `${nameKey || item.name || item.dataKey || "value"}`
            const itemConfig = getPayloadConfigFromPayload(config, item, key)
            const indicatorColor = color || item.payload.fill || item.color

            return (
              <div
                key={item.dataKey}
                className={cn(
                  "flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground",
                  indicator === "dot" && "items-center"
                )}
              >
                {formatter && item?.value !== undefined && item.name ? (
                  formatter(item.value, item.name, item, index, item.payload)
                ) : (
                  <>
                    {itemConfig?.icon ? (
                      <itemConfig.icon />
                    ) : (
                      !hideIndicator && (
                        <div
                          className={cn(
                            "shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]",
                            {
                              "h-2.5 w-2.5": indicator === "dot",
                              "w-1": indicator === "line",
                              "w-0 border-[1.5px] border-dashed bg-transparent":
                                indicator === "dashed",
                              "my-0.5": nestLabel && indicator === "dashed",
                            }
                          )}
                          style={
                            {
                              "--color-bg": indicatorColor,
                              "--color-border": indicatorColor,
                            } as React.CSSProperties
                          }
                        />
                      )
                    )}
                    <div
                      className={cn(
                        "flex flex-1 justify-between leading-none",
                        nestLabel ? "items-end" : "items-center"
                      )}
                    >
                      <div className="grid gap-1.5">
                        {nestLabel ? tooltipLabel : null}
                        <span className="text-muted-foreground">
                          {itemConfig?.label || item.name}
                        </span>
                      </div>
                      {item.value && (
                        <span className="font-mono font-medium tabular-nums text-foreground">
                          {item.value.toLocaleString()}
                        </span>
                      )}
                    </div>
                  </>
                )}
              </div>
            )
          })}
        </div>
      </div>
    )
  }
)
ChartTooltipContent.displayName = "ChartTooltip"

const ChartLegend = RechartsPrimitive.Legend

const ChartLegendContent = React.forwardRef<
  HTMLDivElement,
  React.ComponentProps<"div"> &
    Pick<RechartsPrimitive.LegendProps, "payload" | "verticalAlign"> & {
      hideIcon?: boolean
      nameKey?: string
    }
>(
  (
    { className, hideIcon = false, payload, verticalAlign = "bottom", nameKey },
    ref
  ) => {
    const { config } = useChart()

    if (!payload?.length) {
      return null
    }

    return (
      <div
        ref={ref}
        className={cn(
          "flex items-center justify-center gap-4",
          verticalAlign === "top" ? "pb-3" : "pt-3",
          className
        )}
      >
        {payload.map((item) => {
          const key = `${nameKey || item.dataKey || "value"}`
          const itemConfig = getPayloadConfigFromPayload(config, item, key)

          return (
            <div
              key={item.value}
              className={cn(
                "flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground"
              )}
            >
              {itemConfig?.icon && !hideIcon ? (
                <itemConfig.icon />
              ) : (
                <div
                  className="h-2 w-2 shrink-0 rounded-[2px]"
                  style={{
                    backgroundColor: item.color,
                  }}
                />
              )}
              {itemConfig?.label}
            </div>
          )
        })}
      </div>
    )
  }
)
ChartLegendContent.displayName = "ChartLegend"

// Helper to extract item config from a payload.
function getPayloadConfigFromPayload(
  config: ChartConfig,
  payload: unknown,
  key: string
) {
  if (typeof payload !== "object" || payload === null) {
    return undefined
  }

  const payloadPayload =
    "payload" in payload &&
    typeof payload.payload === "object" &&
    payload.payload !== null
      ? payload.payload
      : undefined

  let configLabelKey: string = key

  if (
    key in payload &&
    typeof payload[key as keyof typeof payload] === "string"
  ) {
    configLabelKey = payload[key as keyof typeof payload] as string
  } else if (
    payloadPayload &&
    key in payloadPayload &&
    typeof payloadPayload[key as keyof typeof payloadPayload] === "string"
  ) {
    configLabelKey = payloadPayload[
      key as keyof typeof payloadPayload
    ] as string
  }

  return configLabelKey in config
    ? config[configLabelKey]
    : config[key as keyof typeof config]
}

export {
  ChartContainer,
  ChartTooltip,
  ChartTooltipContent,
  ChartLegend,
  ChartLegendContent,
  ChartStyle,
}

================
File: components/ui/collapsible.tsx
================
"use client"

import * as CollapsiblePrimitive from "@radix-ui/react-collapsible"

const Collapsible = CollapsiblePrimitive.Root

const CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger

const CollapsibleContent = CollapsiblePrimitive.CollapsibleContent

export { Collapsible, CollapsibleTrigger, CollapsibleContent }

================
File: components/ui/dialog.tsx
================
"use client"

import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { Cross2Icon } from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

================
File: components/ui/drawer.tsx
================
"use client"

import * as React from "react"
import { Drawer as DrawerPrimitive } from "vaul"

import { cn } from "@/lib/utils"

const Drawer = ({
  shouldScaleBackground = true,
  ...props
}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (
  <DrawerPrimitive.Root
    shouldScaleBackground={shouldScaleBackground}
    {...props}
  />
)
Drawer.displayName = "Drawer"

const DrawerTrigger = DrawerPrimitive.Trigger

const DrawerPortal = DrawerPrimitive.Portal

const DrawerClose = DrawerPrimitive.Close

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Overlay
    ref={ref}
    className={cn("fixed inset-0 z-50 bg-black/80", className)}
    {...props}
  />
))
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName

const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DrawerPortal>
    <DrawerOverlay />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn(
        "fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background",
        className
      )}
      {...props}
    >
      <div className="mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted" />
      {children}
    </DrawerPrimitive.Content>
  </DrawerPortal>
))
DrawerContent.displayName = "DrawerContent"

const DrawerHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("grid gap-1.5 p-4 text-center sm:text-left", className)}
    {...props}
  />
)
DrawerHeader.displayName = "DrawerHeader"

const DrawerFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn("mt-auto flex flex-col gap-2 p-4", className)}
    {...props}
  />
)
DrawerFooter.displayName = "DrawerFooter"

const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DrawerTitle.displayName = DrawerPrimitive.Title.displayName

const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DrawerDescription.displayName = DrawerPrimitive.Description.displayName

export {
  Drawer,
  DrawerPortal,
  DrawerOverlay,
  DrawerTrigger,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerFooter,
  DrawerTitle,
  DrawerDescription,
}

================
File: components/ui/dropdown-menu.tsx
================
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import {
  CheckIcon,
  ChevronRightIcon,
  DotFilledIcon,
} from "@radix-ui/react-icons"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRightIcon className="ml-auto h-4 w-4" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <CheckIcon className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <DotFilledIcon className="h-4 w-4 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

================
File: components/ui/form-component.tsx
================
/* eslint-disable @next/next/no-img-element */
// /components/ui/form-component.tsx
import React, { useState, useRef, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { ChatRequestOptions, CreateMessage, Message } from 'ai';
import { toast } from 'sonner';
import { Button } from '../ui/button';
import { Textarea } from '../ui/textarea';
import { HoverCard, HoverCardContent, HoverCardTrigger } from "./hover-card"
import useWindowSize from '@/hooks/use-window-size';
import { X, Zap, ScanEye, ChevronDown, LucideIcon } from 'lucide-react';
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import { cn, SearchGroup, SearchGroupId, searchGroups } from '@/lib/utils';

interface ModelSwitcherProps {
    selectedModel: string;
    setSelectedModel: (value: string) => void;
    className?: string;
}

const models = [
    { value: "gemini-2.0-flash-exp", label: "Mojo", icon: Zap, description: "Just Mojo being Mojo", color: "glossyblack", vision: true },
];

const getColorClasses = (color: string, isSelected: boolean = false) => {
    const baseClasses = "transition-colors duration-200";
    const selectedClasses = isSelected ? "!bg-opacity-90 dark:!bg-opacity-90" : "";

    switch (color) {
        case 'glossyblack':
            return isSelected
                ? `${baseClasses} ${selectedClasses} !bg-[#2D2D2D] dark:!bg-[#333333] !text-white hover:!text-white hover:!bg-[#1a1a1a] dark:hover:!bg-[#444444]`
                : `${baseClasses} !text-[#4A4A4A] dark:!text-[#F0F0F0] hover:!text-white hover:!bg-[#1a1a1a] dark:hover:!bg-[#333333]`;
        case 'offgray':
            return isSelected
                ? `${baseClasses} ${selectedClasses} !bg-[#4B5457] dark:!bg-[#707677] !text-white hover:!text-white hover:!bg-[#707677] dark:hover:!bg-[#4B5457]`
                : `${baseClasses} !text-[#5C6366] dark:!text-[#D1D5D6] hover:!text-white hover:!bg-[#707677] dark:hover:!bg-[#4B5457]`;
        default:
            return isSelected
                ? `${baseClasses} ${selectedClasses} !bg-neutral-500 dark:!bg-neutral-600 !text-white hover:!bg-neutral-600 dark:hover:!bg-neutral-700`
                : `${baseClasses} !text-neutral-700 dark:!text-neutral-300 hover:!bg-neutral-200 dark:hover:!bg-neutral-800/70`;
    }
}


const ModelSwitcher: React.FC<ModelSwitcherProps> = ({ selectedModel, setSelectedModel, className }) => {
    const selectedModelData = models.find(model => model.value === selectedModel) || models[0];
    const [isOpen, setIsOpen] = useState(false);

    return (
        <DropdownMenu onOpenChange={setIsOpen} modal={false}>
            <DropdownMenuTrigger
                className={cn(
                    "flex items-center justify-center w-8 h-8 rounded-full transition-all duration-300",
                    getColorClasses(selectedModelData.color, true),
                    "focus:outline-none focus:ring-2 focus:ring-opacity-50",
                    `!focus:ring-${selectedModelData.color}-500`,
                    className
                )}
            >
                <selectedModelData.icon className="w-4 h-4" />
            </DropdownMenuTrigger>
            <DropdownMenuContent className="w-[220px] p-1 !font-sans rounded-md bg-white dark:bg-neutral-800 ml-4 !mt-0 sm:m-auto !z-[52]">
                {models.map((model) => (
                    <DropdownMenuItem
                        key={model.value}
                        onSelect={() => setSelectedModel(model.value)}
                        className={cn(
                            "flex items-start gap-2 px-2 py-1.5 rounded-md text-xs mb-1 last:mb-0",
                            getColorClasses(model.color, selectedModel === model.value)
                        )}
                    >
                        <model.icon className={cn(
                            "w-4 h-4 mt-0.5",
                            selectedModel === model.value ? "text-white" : `text-${model.color}-500 dark:text-${model.color}-400`
                        )} />
                        <div>
                            <div className="font-bold">{model.label}</div>
                            <div className="text-xs opacity-70">{model.description}</div>
                        </div>
                    </DropdownMenuItem>
                ))}
            </DropdownMenuContent>
        </DropdownMenu>
    )
}


interface Attachment {
    name: string;
    contentType: string;
    url: string;
    size: number;
}

const ArrowUpIcon = ({ size = 16 }: { size?: number }) => {
    return (
        <svg
            height={size}
            strokeLinejoin="round"
            viewBox="0 0 16 16"
            width={size}
            style={{ color: "currentcolor" }}
        >
            <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M8.70711 1.39644C8.31659 1.00592 7.68342 1.00592 7.2929 1.39644L2.21968 6.46966L1.68935 6.99999L2.75001 8.06065L3.28034 7.53032L7.25001 3.56065V14.25V15H8.75001V14.25V3.56065L12.7197 7.53032L13.25 8.06065L14.3107 6.99999L13.7803 6.46966L8.70711 1.39644Z"
                fill="currentColor"
            ></path>
        </svg>
    );
};

const StopIcon = ({ size = 16 }: { size?: number }) => {
    return (
        <svg
            height={size}
            viewBox="0 0 16 16"
            width={size}
            style={{ color: "currentcolor" }}
        >
            <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M3 3H13V13H3V3Z"
                fill="currentColor"
            ></path>
        </svg>
    );
};

const PaperclipIcon = ({ size = 16 }: { size?: number }) => {
    return (
        <svg
            height={size}
            strokeLinejoin="round"
            viewBox="0 0 16 16"
            width={size}
            style={{ color: "currentcolor" }}
            className="-rotate-45"
        >
            <path
                fillRule="evenodd"
                clipRule="evenodd"
                d="M10.8591 1.70735C10.3257 1.70735 9.81417 1.91925 9.437 2.29643L3.19455 8.53886C2.56246 9.17095 2.20735 10.0282 2.20735 10.9222C2.20735 11.8161 2.56246 12.6734 3.19455 13.3055C3.82665 13.9376 4.68395 14.2927 5.57786 14.2927C6.47178 14.2927 7.32908 13.9376 7.96117 13.3055L14.2036 7.06304L14.7038 6.56287L15.7041 7.56321L15.204 8.06337L8.96151 14.3058C8.06411 15.2032 6.84698 15.7074 5.57786 15.7074C4.30875 15.7074 3.09162 15.2032 2.19422 14.3058C1.29682 13.4084 0.792664 12.1913 0.792664 10.9222C0.792664 9.65305 1.29682 8.43592 2.19422 7.53852L8.43666 1.29609C9.07914 0.653606 9.95054 0.292664 10.8591 0.292664C11.7678 0.292664 12.6392 0.653606 13.2816 1.29609C13.9241 1.93857 14.2851 2.80997 14.2851 3.71857C14.2851 4.62718 13.9241 5.49858 13.2816 6.14106L13.2814 6.14133L7.0324 12.3835C7.03231 12.3836 7.03222 12.3837 7.03213 12.3838C6.64459 12.7712 6.11905 12.9888 5.57107 12.9888C5.02297 12.9888 4.49731 12.7711 4.10974 12.3835C3.72217 11.9959 3.50444 11.4703 3.50444 10.9222C3.50444 10.3741 3.72217 9.8484 4.10974 9.46084L4.11004 9.46054L9.877 3.70039L10.3775 3.20051L11.3772 4.20144L10.8767 4.70131L5.11008 10.4612C5.11005 10.4612 5.11003 10.4612 5.11 10.4613C4.98779 10.5835 4.91913 10.7493 4.91913 10.9222C4.91913 11.0951 4.98782 11.2609 5.11008 11.3832C5.23234 11.5054 5.39817 11.5741 5.57107 11.5741C5.74398 11.5741 5.9098 11.5054 6.03206 11.3832L6.03233 11.3829L12.2813 5.14072C12.2814 5.14063 12.2815 5.14054 12.2816 5.14045C12.6586 4.7633 12.8704 4.25185 12.8704 3.71857C12.8704 3.18516 12.6585 2.6736 12.2813 2.29643C11.9041 1.91925 11.3926 1.70735 10.8591 1.70735Z"
                fill="currentColor"
            ></path>
        </svg>
    );
};


const MAX_IMAGES = 3;

const hasVisionSupport = (modelValue: string): boolean => {
    const selectedModel = models.find(model => model.value === modelValue);
    return selectedModel?.vision === true
};

const AttachmentPreview: React.FC<{ attachment: Attachment | UploadingAttachment, onRemove: () => void, isUploading: boolean }> = ({ attachment, onRemove, isUploading }) => {
    const formatFileSize = (bytes: number): string => {
        if (bytes < 1024) return bytes + ' bytes';
        else if (bytes < 1048576) return (bytes / 1024).toFixed(1) + ' KB';
        else return (bytes / 1048576).toFixed(1) + ' MB';
    };

    const isUploadingAttachment = (attachment: Attachment | UploadingAttachment): attachment is UploadingAttachment => {
        return 'progress' in attachment;
    };

    return (
        <motion.div
            layout
            initial={{ opacity: 0, scale: 0.8 }}
            animate={{ opacity: 1, scale: 1 }}
            exit={{ opacity: 0, scale: 0.8 }}
            transition={{ duration: 0.2 }}
            className="relative flex items-center bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 rounded-lg p-2 pr-8 gap-2 shadow-sm flex-shrink-0 z-0"
        >
            {isUploading ? (
                <div className="w-10 h-10 flex items-center justify-center">
                    <svg className="animate-spin h-5 w-5 text-neutral-500 dark:text-neutral-400" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </div>
            ) : isUploadingAttachment(attachment) ? (
                <div className="w-10 h-10 flex items-center justify-center">
                    <div className="relative w-8 h-8">
                        <svg className="w-full h-full" viewBox="0 0 100 100">
                            <circle
                                className="text-neutral-300 dark:text-neutral-600 stroke-current"
                                strokeWidth="10"
                                cx="50"
                                cy="50"
                                r="40"
                                fill="transparent"
                            ></circle>
                            <circle
                                className="text-primary stroke-current"
                                strokeWidth="10"
                                strokeLinecap="round"
                                cx="50"
                                cy="50"
                                r="40"
                                fill="transparent"
                                strokeDasharray={`${attachment.progress * 251.2}, 251.2`}
                                transform="rotate(-90 50 50)"
                            ></circle>
                        </svg>
                        <div className="absolute inset-0 flex items-center justify-center">
                            <span className="text-xs font-semibold text-neutral-800 dark:text-neutral-200">{Math.round(attachment.progress * 100)}%</span>
                        </div>
                    </div>
                </div>
            ) : (
                <img
                    src={(attachment as Attachment).url}
                    alt={`Preview of ${attachment.name}`}
                    width={40}
                    height={40}
                    className="rounded-lg h-10 w-10 object-cover"
                />
            )}
            <div className="flex-grow min-w-0">
                {!isUploadingAttachment(attachment) && (
                    <p className="text-sm font-medium truncate text-neutral-800 dark:text-neutral-200">{attachment.name}</p>
                )}
                <p className="text-xs text-neutral-500 dark:text-neutral-400">
                    {isUploadingAttachment(attachment)
                        ? 'Uploading...'
                        : formatFileSize((attachment as Attachment).size)}
                </p>
            </div>
            <motion.button
                whileHover={{ scale: 1.1 }}
                whileTap={{ scale: 0.9 }}
                onClick={(e) => { e.stopPropagation(); onRemove(); }}
                className="absolute -top-2 -right-2 p-0.5 m-0 rounded-full bg-white dark:bg-neutral-800 border border-neutral-200 dark:border-neutral-700 shadow-sm hover:bg-neutral-100 dark:hover:bg-neutral-700 transition-colors z-20"
            >
                <X className="h-4 w-4 text-neutral-500 dark:text-neutral-400" />
            </motion.button>
        </motion.div>
    );
};

interface UploadingAttachment {
    file: File;
    progress: number;
}

interface FormComponentProps {
    input: string;
    setInput: (input: string) => void;
    attachments: Array<Attachment>;
    setAttachments: React.Dispatch<React.SetStateAction<Array<Attachment>>>;
    hasSubmitted: boolean;
    setHasSubmitted: (value: boolean) => void;
    isLoading: boolean;
    handleSubmit: (
        event?: {
            preventDefault?: () => void;
        },
        chatRequestOptions?: ChatRequestOptions,
    ) => void;
    fileInputRef: React.RefObject<HTMLInputElement>;
    inputRef: React.RefObject<HTMLTextAreaElement>;
    stop: () => void;
    messages: Array<Message>;
    append: (
        message: Message | CreateMessage,
        chatRequestOptions?: ChatRequestOptions,
    ) => Promise<string | null | undefined>;
    selectedModel: string;
    setSelectedModel: (value: string) => void;
    resetSuggestedQuestions: () => void;
    lastSubmittedQueryRef: React.MutableRefObject<string>;
    selectedGroup: SearchGroupId;
    setSelectedGroup: React.Dispatch<React.SetStateAction<SearchGroupId>>;
}

interface GroupSelectorProps {
    selectedGroup: SearchGroupId;
    onGroupSelect: (group: SearchGroup) => void;
}

interface ToolbarButtonProps {
    group: SearchGroup;
    isSelected: boolean;
    onClick: () => void;
}

const ToolbarButton = ({ group, isSelected, onClick }: ToolbarButtonProps) => {
    const Icon = group.icon;

    return (
        <HoverCard openDelay={100} closeDelay={50}>
            <HoverCardTrigger asChild>
                <motion.button
                    whileHover={{ scale: 1.02 }}
                    whileTap={{ scale: 0.98 }}
                    onClick={onClick}
                    className={cn(
                        "relative flex items-center justify-center",
                        "size-8",
                        "rounded-full",
                        "transition-colors duration-300",
                        isSelected
                            ? "bg-neutral-500 dark:bg-neutral-600 text-white dark:text-neutral-300"
                            : "text-neutral-600 dark:text-neutral-300 hover:bg-neutral-100 dark:hover:bg-neutral-800/80"
                    )}
                    transition={{ duration: 0.3, ease: "easeInOut" }}
                >
                    <Icon className="size-4" />
                </motion.button>
            </HoverCardTrigger>
            <HoverCardContent
                side="bottom"
                align="center"
                sideOffset={6}
                className={cn(
                    "z-[100]",
                    "w-44 p-2 rounded-lg",
                    "border border-neutral-200 dark:border-neutral-700",
                    "bg-white dark:bg-neutral-800 shadow-md",
                    "transition-opacity duration-300"
                )}
            >
                <div className="space-y-0.5">
                    <h4 className="text-sm font-medium text-neutral-900 dark:text-neutral-100 font-dosis">
                        {group.name}
                    </h4>
                    <p className="text-xs text-neutral-500 dark:text-neutral-400 leading-normal font-lato">
                        {group.description}
                    </p>
                </div>
            </HoverCardContent>
        </HoverCard>
    );
};

const SelectionContent = ({ ...props }) => {
    const [isExpanded, setIsExpanded] = useState(false);

    return (
        <motion.div
            layout
            initial={false}
            animate={{
                width: isExpanded ? "auto" : "30px",
                gap: isExpanded ? "0.5rem" : 0,
                paddingRight: isExpanded ? "0.5rem" : 0,
            }}
            transition={{
                layout: { duration: 0.4 },
                duration: 0.4,
                ease: [0.4, 0.0, 0.2, 1],
                width: { type: "spring", stiffness: 300, damping: 30 },
                gap: { type: "spring", stiffness: 300, damping: 30 },
                paddingRight: { type: "spring", stiffness: 300, damping: 30 }
            }}
            style={{
                display: "flex",
                alignItems: "center",
                justifyContent: "flex-start"
            }}
            className={cn(
                "inline-flex items-center",
                "min-w-[38px]",
                "p-0.5",
                "rounded-full border border-neutral-200 dark:border-neutral-800",
                "bg-white dark:bg-neutral-900",
                "shadow-sm overflow-visible",
                "relative z-10"
            )}
            onMouseEnter={() => setIsExpanded(true)}
            onMouseLeave={() => setIsExpanded(false)}
        >
            <AnimatePresence>
                {searchGroups.map((group, index) => {
                    const showItem = isExpanded || props.selectedGroup === group.id;
                    return (
                        <motion.div
                            key={group.id}
                            animate={{
                                width: showItem ? "28px" : 0,
                                opacity: showItem ? 1 : 0,
                                x: showItem ? 0 : -10
                            }}
                            exit={{ opacity: 1, x: 0, transition: { duration: 0 } }}
                            transition={{
                                type: "spring",
                                stiffness: 400,
                                damping: 30,
                                delay: index * 0.05,
                                opacity: { duration: 0.2, delay: showItem ? index * 0.05 : 0 }
                            }}
                            style={{ margin: 0 }}
                        >
                            <ToolbarButton
                                group={group}
                                isSelected={props.selectedGroup === group.id}
                                onClick={() => props.onGroupSelect(group)}
                            />
                        </motion.div>
                    );
                })}
            </AnimatePresence>
        </motion.div>
    );
};

interface SearchGroupConfig {
    id: SearchGroupId;
    name: string;
    description: string;
    icon: LucideIcon;
}

const GroupSelector = ({ selectedGroup, onGroupSelect }: { selectedGroup: SearchGroupId, onGroupSelect: (group: SearchGroupId) => void }) => {
    const currentGroup = searchGroups.find(group => group.id === selectedGroup) as SearchGroupConfig;
    
    return (
        <DropdownMenu>
            <DropdownMenuTrigger asChild>
                <Button
                    variant="outline"
                    size="sm"
                    className={cn(
                        "h-8 gap-2 bg-white dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300",
                        "hover:bg-neutral-300 dark:hover:bg-neutral-600",
                        "min-w-[120px] justify-between",
                        "font-dosis"
                    )}
                >
                    <div className="flex items-center gap-2 truncate">
                        {currentGroup.icon && (
                            <div className="h-4 w-4 flex-shrink-0">
                                {React.createElement(currentGroup.icon)}
                            </div>
                        )}
                        <span className="truncate">{currentGroup.name}</span>
                    </div>
                    <ChevronDown className="h-4 w-4 opacity-50" />
                </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="start" className="w-[200px]">
                {searchGroups.map((group) => (
                    <DropdownMenuItem
                        key={group.id}
                        onClick={() => onGroupSelect(group.id)}
                        className="flex items-center gap-2 cursor-pointer"
                    >
                        {group.icon && (
                            <div className="h-4 w-4 flex-shrink-0">
                                {React.createElement(group.icon)}
                            </div>
                        )}
                        <span className="truncate">{group.name}</span>
                    </DropdownMenuItem>
                ))}
            </DropdownMenuContent>
        </DropdownMenu>
    );
};

const FormComponent: React.FC<FormComponentProps> = ({
    input,
    setInput,
    attachments,
    setAttachments,
    hasSubmitted,
    setHasSubmitted,
    isLoading,
    handleSubmit,
    fileInputRef,
    inputRef,
    stop,
    messages,
    append,
    selectedModel,
    setSelectedModel,
    resetSuggestedQuestions,
    lastSubmittedQueryRef,
    selectedGroup,
    setSelectedGroup,
}) => {
    const [uploadQueue, setUploadQueue] = useState<Array<string>>([]);
    const { width } = useWindowSize();
    const postSubmitFileInputRef = useRef<HTMLInputElement>(null);
    const [isFocused, setIsFocused] = useState(false);

    const MIN_HEIGHT = 56;
    const MAX_HEIGHT = 400;

    const autoResizeInput = (target: HTMLTextAreaElement) => {
        if (!target) return;
        requestAnimationFrame(() => {
            target.style.height = 'auto';
            let newHeight = target.scrollHeight;
            newHeight = Math.min(Math.max(newHeight, MIN_HEIGHT), MAX_HEIGHT);
            target.style.height = `${newHeight}px`;
            target.style.overflowY = newHeight >= MAX_HEIGHT ? 'auto' : 'hidden';
        });
    };

    const handleInput = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
        setInput(event.target.value);
        autoResizeInput(event.target);
    };

    const handleFocus = () => {
        setIsFocused(true);
    };

    const handleBlur = () => {
        setIsFocused(false);
    };

    const handleGroupSelect = useCallback((group: SearchGroup) => {
        setSelectedGroup(group.id);
        resetSuggestedQuestions();
        inputRef.current?.focus();
    }, [setSelectedGroup, resetSuggestedQuestions, inputRef]);

    const uploadFile = async (file: File): Promise<Attachment> => {
        const formData = new FormData();
        formData.append('file', file);

        try {
            const response = await fetch('/api/upload', {
                method: 'POST',
                body: formData,
            });

            if (response.ok) {
                const data = await response.json();
                return data;
            } else {
                throw new Error('Failed to upload file');
            }
        } catch (error) {
            console.error("Error uploading file:", error);
            toast.error("Failed to upload file, please try again!");
            throw error;
        }
    };

    const handleFileChange = useCallback(async (event: React.ChangeEvent<HTMLInputElement>) => {
        const files = Array.from(event.target.files || []);
        const totalAttachments = attachments.length + files.length;

        if (totalAttachments > MAX_IMAGES) {
            toast.error(`You can only attach up to ${MAX_IMAGES} images.`);
            return;
        }

        setUploadQueue(files.map((file) => file.name));

        try {
            const uploadPromises = files.map((file) => uploadFile(file));
            const uploadedAttachments = await Promise.all(uploadPromises);
            setAttachments((currentAttachments) => [
                ...currentAttachments,
                ...uploadedAttachments,
            ]);
        } catch (error) {
            console.error("Error uploading files!", error);
            toast.error("Failed to upload one or more files. Please try again.");
        } finally {
            setUploadQueue([]);
            event.target.value = '';
        }
    }, [attachments, setAttachments]);

    const removeAttachment = (index: number) => {
        setAttachments(prev => prev.filter((_, i) => i !== index));
    };

    const onSubmit = useCallback((event: React.FormEvent<HTMLFormElement>) => {
        event.preventDefault();
        event.stopPropagation();

        if (input.trim() || attachments.length > 0) {
            setHasSubmitted(true);
            lastSubmittedQueryRef.current = input.trim();

            handleSubmit(event, {
                experimental_attachments: attachments,
            });

            setAttachments([]);
            if (fileInputRef.current) {
                fileInputRef.current.value = '';
            }
        } else {
            toast.error("Please enter a search query or attach an image.");
        }
    }, [input, attachments, setHasSubmitted, handleSubmit, setAttachments, fileInputRef, lastSubmittedQueryRef]);

    const submitForm = useCallback(() => {
        onSubmit({ preventDefault: () => { }, stopPropagation: () => { } } as React.FormEvent<HTMLFormElement>);
        resetSuggestedQuestions();

        if (width && width > 768) {
            inputRef.current?.focus();
        }
    }, [onSubmit, resetSuggestedQuestions, width, inputRef]);

    const triggerFileInput = useCallback(() => {
        if (attachments.length >= MAX_IMAGES) {
            toast.error(`You can only attach up to ${MAX_IMAGES} images.`);
            return;
        }

        if (hasSubmitted) {
            postSubmitFileInputRef.current?.click();
        } else {
            fileInputRef.current?.click();
        }
    }, [attachments.length, hasSubmitted, fileInputRef]);

    const handleTouchStart = useCallback((event: React.TouchEvent<HTMLTextAreaElement>) => {
        event.preventDefault();
        event.currentTarget.focus();
    }, []);

    return (
        <div className={cn(
            "relative w-full flex flex-col gap-2 rounded-lg transition-all duration-300 !font-sans",
            hasSubmitted ?? "z-[51]",
            attachments.length > 0 || uploadQueue.length > 0
                ? "bg-gray-100/70 dark:bg-neutral-800 p-1"
                : "bg-transparent"
        )}>
            <input type="file" className="hidden" ref={fileInputRef} multiple onChange={handleFileChange} accept="image/*" tabIndex={-1} />
            <input type="file" className="hidden" ref={postSubmitFileInputRef} multiple onChange={handleFileChange} accept="image/*" tabIndex={-1} />

            {(attachments.length > 0 || uploadQueue.length > 0) && (
                <div className="flex flex-row gap-2 overflow-x-auto py-2 max-h-32 z-10">
                    {attachments.map((attachment, index) => (
                        <AttachmentPreview
                            key={attachment.url}
                            attachment={attachment}
                            onRemove={() => removeAttachment(index)}
                            isUploading={false}
                        />
                    ))}
                    {uploadQueue.map((filename) => (
                        <AttachmentPreview
                            key={filename}
                            attachment={{
                                url: "",
                                name: filename,
                                contentType: "",
                                size: 0,
                            } as Attachment}
                            onRemove={() => { }}
                            isUploading={true}
                        />
                    ))}
                </div>
            )}

            <div className="relative rounded-lg bg-neutral-100 dark:bg-neutral-900">
                <Textarea
                    ref={inputRef}
                    placeholder={hasSubmitted ? "Ask a new question..." : "Ask a question..."}
                    value={input}
                    onChange={handleInput}
                    disabled={isLoading}
                    onFocus={handleFocus}
                    onBlur={handleBlur}
                    onTouchStart={handleTouchStart}
                    className={cn(
                        "min-h-[56px] max-h-[400px] w-full resize-none rounded-lg",
                        "overflow-x-hidden",
                        "text-base leading-relaxed",
                        "bg-neutral-100 dark:bg-neutral-900",
                        "border border-neutral-200 dark:border-neutral-700",
                        "focus:border-neutral-300 dark:focus:border-neutral-600",
                        "text-neutral-900 dark:text-neutral-100",
                        "focus:!ring-1 focus:!ring-neutral-300 dark:focus:!ring-neutral-600",
                        "px-4 pt-3 pb-5",
                        "font-lato"
                    )}
                    rows={3}
                    autoFocus
                    onKeyDown={(event) => {
                        if (event.key === "Enter" && !event.shiftKey) {
                            event.preventDefault();
                            if (isLoading) {
                                toast.error("Please wait for the response to complete!");
                            } else {
                                submitForm();
                            }
                        }
                    }}
                />

                <div className={cn(
                    "absolute bottom-0 inset-x-0 flex justify-between items-center rounded-b-lg p-2",
                    "bg-neutral-100 dark:bg-neutral-900",
                    "!border !border-t-0 !border-neutral-200 dark:!border-neutral-700",
                    isFocused ? "!border-neutral-300 dark:!border-neutral-600" : "",
                    isLoading ? "!opacity-20 !cursor-not-allowed" : ""
                )}>
                    <div className="flex items-center gap-2">
                        {!hasSubmitted && (
                            <GroupSelector
                                selectedGroup={selectedGroup}
                                onGroupSelect={(id: SearchGroupId) => {
                                    const group = searchGroups.find(g => g.id === id);
                                    if (group) {
                                        handleGroupSelect(group);
                                    }
                                }}
                            />
                        )}
                    </div>

                    <div className="flex items-center gap-2">
                        <Button
                            className="rounded-full p-1.5 h-8 w-8 bg-white dark:bg-neutral-700 text-neutral-700 dark:text-neutral-300 hover:bg-neutral-300 dark:hover:bg-neutral-600"
                            onClick={(event) => {
                                event.preventDefault();
                                triggerFileInput();
                            }}
                            variant="outline"
                            disabled={isLoading}
                        >
                            <PaperclipIcon size={14} />
                        </Button>

                        {isLoading ? (
                            <Button
                                className="rounded-full p-1.5 h-8 w-8"
                                onClick={(event) => {
                                    event.preventDefault();
                                    stop();
                                }}
                                variant="destructive"
                                disabled={!isLoading}
                            >
                                <StopIcon size={14} />
                            </Button>
                        ) : (
                            <Button
                                className="rounded-full p-1.5 h-8 w-8"
                                onClick={(event) => {
                                    event.preventDefault();
                                    submitForm();
                                }}
                                disabled={input.length === 0 && attachments.length === 0 || uploadQueue.length > 0}
                            >
                                <ArrowUpIcon size={14} />
                            </Button>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default FormComponent;

================
File: components/ui/hover-card.tsx
================
"use client"

import * as React from "react"
import * as HoverCardPrimitive from "@radix-ui/react-hover-card"

import { cn } from "@/lib/utils"

const HoverCard = HoverCardPrimitive.Root

const HoverCardTrigger = HoverCardPrimitive.Trigger

const HoverCardContent = React.forwardRef<
  React.ElementRef<typeof HoverCardPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <HoverCardPrimitive.Content
    ref={ref}
    align={align}
    sideOffset={sideOffset}
    className={cn(
      "z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
HoverCardContent.displayName = HoverCardPrimitive.Content.displayName

export { HoverCard, HoverCardTrigger, HoverCardContent }

================
File: components/ui/input.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {}

const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-sm shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

================
File: components/ui/label.tsx
================
"use client"

import * as React from "react"
import * as LabelPrimitive from "@radix-ui/react-label"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const labelVariants = cva(
  "text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
)

const Label = React.forwardRef<
  React.ElementRef<typeof LabelPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &
    VariantProps<typeof labelVariants>
>(({ className, ...props }, ref) => (
  <LabelPrimitive.Root
    ref={ref}
    className={cn(labelVariants(), className)}
    {...props}
  />
))
Label.displayName = LabelPrimitive.Root.displayName

export { Label }

================
File: components/ui/navigation-menu.tsx
================
import * as React from "react"
import { ChevronDownIcon } from "@radix-ui/react-icons"
import * as NavigationMenuPrimitive from "@radix-ui/react-navigation-menu"
import { cva } from "class-variance-authority"

import { cn } from "@/lib/utils"

const NavigationMenu = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Root
    ref={ref}
    className={cn(
      "relative z-10 flex max-w-max flex-1 items-center justify-center",
      className
    )}
    {...props}
  >
    {children}
    <NavigationMenuViewport />
  </NavigationMenuPrimitive.Root>
))
NavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName

const NavigationMenuList = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.List
    ref={ref}
    className={cn(
      "group flex flex-1 list-none items-center justify-center space-x-1",
      className
    )}
    {...props}
  />
))
NavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName

const NavigationMenuItem = NavigationMenuPrimitive.Item

const navigationMenuTriggerStyle = cva(
  "group inline-flex h-9 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[active]:bg-accent/50 data-[state=open]:bg-accent/50"
)

const NavigationMenuTrigger = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <NavigationMenuPrimitive.Trigger
    ref={ref}
    className={cn(navigationMenuTriggerStyle(), "group", className)}
    {...props}
  >
    {children}{" "}
    <ChevronDownIcon
      className="relative top-[1px] ml-1 h-3 w-3 transition duration-300 group-data-[state=open]:rotate-180"
      aria-hidden="true"
    />
  </NavigationMenuPrimitive.Trigger>
))
NavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName

const NavigationMenuContent = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Content
    ref={ref}
    className={cn(
      "left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto ",
      className
    )}
    {...props}
  />
))
NavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName

const NavigationMenuLink = NavigationMenuPrimitive.Link

const NavigationMenuViewport = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>
>(({ className, ...props }, ref) => (
  <div className={cn("absolute left-0 top-full flex justify-center")}>
    <NavigationMenuPrimitive.Viewport
      className={cn(
        "origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]",
        className
      )}
      ref={ref}
      {...props}
    />
  </div>
))
NavigationMenuViewport.displayName =
  NavigationMenuPrimitive.Viewport.displayName

const NavigationMenuIndicator = React.forwardRef<
  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,
  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>
>(({ className, ...props }, ref) => (
  <NavigationMenuPrimitive.Indicator
    ref={ref}
    className={cn(
      "top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in",
      className
    )}
    {...props}
  >
    <div className="relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md" />
  </NavigationMenuPrimitive.Indicator>
))
NavigationMenuIndicator.displayName =
  NavigationMenuPrimitive.Indicator.displayName

export {
  navigationMenuTriggerStyle,
  NavigationMenu,
  NavigationMenuList,
  NavigationMenuItem,
  NavigationMenuContent,
  NavigationMenuTrigger,
  NavigationMenuLink,
  NavigationMenuIndicator,
  NavigationMenuViewport,
}

================
File: components/ui/popover.tsx
================
"use client"

import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

================
File: components/ui/scroll-area.tsx
================
"use client"

import * as React from "react"
import * as ScrollAreaPrimitive from "@radix-ui/react-scroll-area"

import { cn } from "@/lib/utils"

const ScrollArea = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>
>(({ className, children, ...props }, ref) => (
  <ScrollAreaPrimitive.Root
    ref={ref}
    className={cn("relative overflow-hidden", className)}
    {...props}
  >
    <ScrollAreaPrimitive.Viewport className="h-full w-full rounded-[inherit]">
      {children}
    </ScrollAreaPrimitive.Viewport>
    <ScrollBar />
    <ScrollAreaPrimitive.Corner />
  </ScrollAreaPrimitive.Root>
))
ScrollArea.displayName = ScrollAreaPrimitive.Root.displayName

const ScrollBar = React.forwardRef<
  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,
  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>
>(({ className, orientation = "vertical", ...props }, ref) => (
  <ScrollAreaPrimitive.ScrollAreaScrollbar
    ref={ref}
    orientation={orientation}
    className={cn(
      "flex touch-none select-none transition-colors",
      orientation === "vertical" &&
        "h-full w-2.5 border-l border-l-transparent p-[1px]",
      orientation === "horizontal" &&
        "h-2.5 flex-col border-t border-t-transparent p-[1px]",
      className
    )}
    {...props}
  >
    <ScrollAreaPrimitive.ScrollAreaThumb className="relative flex-1 rounded-full bg-border" />
  </ScrollAreaPrimitive.ScrollAreaScrollbar>
))
ScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName

export { ScrollArea, ScrollBar }

================
File: components/ui/separator.tsx
================
"use client"

import * as React from "react"
import * as SeparatorPrimitive from "@radix-ui/react-separator"

import { cn } from "@/lib/utils"

const Separator = React.forwardRef<
  React.ElementRef<typeof SeparatorPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>
>(
  (
    { className, orientation = "horizontal", decorative = true, ...props },
    ref
  ) => (
    <SeparatorPrimitive.Root
      ref={ref}
      decorative={decorative}
      orientation={orientation}
      className={cn(
        "shrink-0 bg-border",
        orientation === "horizontal" ? "h-[1px] w-full" : "h-full w-[1px]",
        className
      )}
      {...props}
    />
  )
)
Separator.displayName = SeparatorPrimitive.Root.displayName

export { Separator }

================
File: components/ui/sheet.tsx
================
"use client"

import * as React from "react"
import * as SheetPrimitive from "@radix-ui/react-dialog"
import { cva, type VariantProps } from "class-variance-authority"
import { cn } from "@/lib/utils"
import { Cross2Icon } from "@radix-ui/react-icons"

const Sheet = SheetPrimitive.Root

const SheetTrigger = SheetPrimitive.Trigger

const SheetClose = SheetPrimitive.Close

const SheetPortal = SheetPrimitive.Portal

const SheetOverlay = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Overlay
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
    ref={ref}
  />
))
SheetOverlay.displayName = SheetPrimitive.Overlay.displayName

const sheetVariants = cva(
  "fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=closed]:duration-300 data-[state=open]:duration-500 data-[state=open]:animate-in data-[state=closed]:animate-out",
  {
    variants: {
      side: {
        top: "inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top",
        bottom:
          "inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom",
        left: "inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm",
        right:
          "inset-y-0 right-0 h-full w-3/4 border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm",
      },
    },
    defaultVariants: {
      side: "right",
    },
  }
)

interface SheetContentProps
  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,
    VariantProps<typeof sheetVariants> {}

const SheetContent = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Content>,
  SheetContentProps
>(({ side = "right", className, children, ...props }, ref) => (
  <SheetPortal>
    <SheetOverlay />
    <SheetPrimitive.Content
      ref={ref}
      className={cn(sheetVariants({ side }), className)}
      {...props}
    >
      <SheetPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary">
        <Cross2Icon className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </SheetPrimitive.Close>
      {children}
    </SheetPrimitive.Content>
  </SheetPortal>
))
SheetContent.displayName = SheetPrimitive.Content.displayName

const SheetHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-2 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
SheetHeader.displayName = "SheetHeader"

const SheetFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
SheetFooter.displayName = "SheetFooter"

const SheetTitle = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Title
    ref={ref}
    className={cn("text-lg font-semibold text-foreground", className)}
    {...props}
  />
))
SheetTitle.displayName = SheetPrimitive.Title.displayName

const SheetDescription = React.forwardRef<
  React.ElementRef<typeof SheetPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>
>(({ className, ...props }, ref) => (
  <SheetPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
SheetDescription.displayName = SheetPrimitive.Description.displayName

export {
  Sheet,
  SheetPortal,
  SheetOverlay,
  SheetTrigger,
  SheetClose,
  SheetContent,
  SheetHeader,
  SheetFooter,
  SheetTitle,
  SheetDescription,
}

================
File: components/ui/skeleton.tsx
================
import { cn } from "@/lib/utils"

function Skeleton({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) {
  return (
    <div
      className={cn("animate-pulse rounded-md bg-primary/10", className)}
      {...props}
    />
  )
}

export { Skeleton }

================
File: components/ui/switch.tsx
================
"use client"

import * as React from "react"
import * as SwitchPrimitives from "@radix-ui/react-switch"

import { cn } from "@/lib/utils"

const Switch = React.forwardRef<
  React.ElementRef<typeof SwitchPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>
>(({ className, ...props }, ref) => (
  <SwitchPrimitives.Root
    className={cn(
      "peer inline-flex h-5 w-9 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent shadow-sm transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input",
      className
    )}
    {...props}
    ref={ref}
  >
    <SwitchPrimitives.Thumb
      className={cn(
        "pointer-events-none block h-4 w-4 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0"
      )}
    />
  </SwitchPrimitives.Root>
))
Switch.displayName = SwitchPrimitives.Root.displayName

export { Switch }

================
File: components/ui/table.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

const Table = React.forwardRef<
  HTMLTableElement,
  React.HTMLAttributes<HTMLTableElement>
>(({ className, ...props }, ref) => (
  <div className="relative w-full overflow-auto">
    <table
      ref={ref}
      className={cn("w-full caption-bottom text-sm", className)}
      {...props}
    />
  </div>
))
Table.displayName = "Table"

const TableHeader = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <thead ref={ref} className={cn("[&_tr]:border-b", className)} {...props} />
))
TableHeader.displayName = "TableHeader"

const TableBody = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tbody
    ref={ref}
    className={cn("[&_tr:last-child]:border-0", className)}
    {...props}
  />
))
TableBody.displayName = "TableBody"

const TableFooter = React.forwardRef<
  HTMLTableSectionElement,
  React.HTMLAttributes<HTMLTableSectionElement>
>(({ className, ...props }, ref) => (
  <tfoot
    ref={ref}
    className={cn(
      "border-t bg-muted/50 font-medium [&>tr]:last:border-b-0",
      className
    )}
    {...props}
  />
))
TableFooter.displayName = "TableFooter"

const TableRow = React.forwardRef<
  HTMLTableRowElement,
  React.HTMLAttributes<HTMLTableRowElement>
>(({ className, ...props }, ref) => (
  <tr
    ref={ref}
    className={cn(
      "border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted",
      className
    )}
    {...props}
  />
))
TableRow.displayName = "TableRow"

const TableHead = React.forwardRef<
  HTMLTableCellElement,
  React.ThHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <th
    ref={ref}
    className={cn(
      "h-10 px-2 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableHead.displayName = "TableHead"

const TableCell = React.forwardRef<
  HTMLTableCellElement,
  React.TdHTMLAttributes<HTMLTableCellElement>
>(({ className, ...props }, ref) => (
  <td
    ref={ref}
    className={cn(
      "p-2 align-middle [&:has([role=checkbox])]:pr-0 [&>[role=checkbox]]:translate-y-[2px]",
      className
    )}
    {...props}
  />
))
TableCell.displayName = "TableCell"

const TableCaption = React.forwardRef<
  HTMLTableCaptionElement,
  React.HTMLAttributes<HTMLTableCaptionElement>
>(({ className, ...props }, ref) => (
  <caption
    ref={ref}
    className={cn("mt-4 text-sm text-muted-foreground", className)}
    {...props}
  />
))
TableCaption.displayName = "TableCaption"

export {
  Table,
  TableHeader,
  TableBody,
  TableFooter,
  TableHead,
  TableRow,
  TableCell,
  TableCaption,
}

================
File: components/ui/tabs.tsx
================
"use client"

import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

================
File: components/ui/textarea.tsx
================
import * as React from "react"

import { cn } from "@/lib/utils"

export interface TextareaProps
  extends React.TextareaHTMLAttributes<HTMLTextAreaElement> {}

const Textarea = React.forwardRef<HTMLTextAreaElement, TextareaProps>(
  ({ className, ...props }, ref) => {
    return (
      <textarea
        className={cn(
          "flex min-h-[60px] w-full rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50",
          className
        )}
        ref={ref}
        dir="ltr"
        {...props}
      />
    )
  }
)
Textarea.displayName = "Textarea"

export { Textarea }

================
File: components/ui/tooltip.tsx
================
"use client"

import * as React from "react"
import * as TooltipPrimitive from "@radix-ui/react-tooltip"

import { cn } from "@/lib/utils"

const TooltipProvider = TooltipPrimitive.Provider

const Tooltip = TooltipPrimitive.Root

const TooltipTrigger = TooltipPrimitive.Trigger

const TooltipContent = React.forwardRef<
  React.ElementRef<typeof TooltipPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <TooltipPrimitive.Content
    ref={ref}
    sideOffset={sideOffset}
    className={cn(
      "z-50 overflow-hidden rounded-md bg-primary px-3 py-1.5 text-xs text-primary-foreground animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
TooltipContent.displayName = TooltipPrimitive.Content.displayName

export { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }

================
File: components/ui/tweet-grid.tsx
================
"use client"

import * as React from "react"
import { cva, type VariantProps } from "class-variance-authority"
import { Tweet } from "react-tweet"

import { cn } from "@/lib/utils"

const tweetGridVariants = cva("max-w-4xl md:max-w-6xl px-2", {
  variants: {
    columns: {
      1: "columns-1",
      2: "sm:columns-2",
      3: "md:columns-3",
      4: "lg:columns-4",
      5: "xl:columns-5",
    },
  },
  defaultVariants: {
    columns: 3,
  },
})

const tweetItemVariants = cva("break-inside-avoid", {
  variants: {
    spacing: {
      sm: "mb-2",
      md: "mb-4",
      lg: "mb-6",
    },
  },
  defaultVariants: {
    spacing: "md",
  },
})

export interface TweetGridProps
  extends VariantProps<typeof tweetGridVariants>,
    VariantProps<typeof tweetItemVariants> {
  tweets: string[]
  className?: string
}

export const TweetGrid: React.FC<TweetGridProps> = ({
  tweets,
  columns,
  spacing,
  className,
}) => {
  return (
    <div className={cn(tweetGridVariants({ columns }), className)}>
      {tweets.map((tweetId, i) => (
        <div
          key={`${tweetId}-${i}`}
          className={cn(tweetItemVariants({ spacing }))}
        >
          <Tweet id={tweetId} />
        </div>
      ))}
    </div>
  )
}

================
File: components/currency_conv.tsx
================
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Input } from "@/components/ui/input"; 
import { Loader2, TrendingUp, TrendingDown } from "lucide-react";
import { useState } from "react";
import { motion, AnimatePresence } from "framer-motion";

interface CurrencyConverterProps {
  toolInvocation: any;
  result: any;
}

export const CurrencyConverter = ({ toolInvocation, result }: CurrencyConverterProps) => {
  const [amount, setAmount] = useState<string>(toolInvocation.args.amount || "1");
  const [error, setError] = useState<string | null>(null);

  const handleAmountChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const value = e.target.value;
    if (/^\d*\.?\d*$/.test(value)) {
      setAmount(value);
      setError(null);
    } else {
      setError("Please enter a valid number");
    }
  };

  const convertedAmount = result ? parseFloat(result.rate) * parseFloat(amount) : null;
  const rate = result ? parseFloat(result.rate) : null;

  return (
    <Card className="w-full bg-white dark:bg-neutral-900 border-neutral-200 dark:border-neutral-800">
      <CardHeader className="pb-2">
        <CardTitle className="text-lg font-medium">
          Convert {toolInvocation.args.from} to {toolInvocation.args.to}
        </CardTitle>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Amount Input */}
        <div className="space-y-4">
          <div className="relative">
            <Input
              type="text"
              value={amount}
              onChange={handleAmountChange}
              className="pl-12 h-12 text-lg"
              placeholder="Amount"
            />
            <span className="absolute left-3 top-1/2 -translate-y-1/2 text-sm font-semibold text-neutral-500">
              {toolInvocation.args.from}
            </span>
          </div>

          <AnimatePresence>
            {error && (
              <motion.p
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0 }}
                className="text-sm text-red-500"
              >
                {error}
              </motion.p>
            )}
          </AnimatePresence>
        </div>

        {/* Result Display */}
        <div className="space-y-2">
          {!result ? (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="flex items-center gap-2 text-neutral-500"
            >
              <Loader2 className="h-5 w-5 animate-spin" />
              <span>Getting latest rates...</span>
            </motion.div>
          ) : (
            <motion.div
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
              className="space-y-2"
            >
              <div className="text-2xl font-semibold">
                {convertedAmount?.toFixed(2)} {toolInvocation.args.to}
              </div>
              <div className="flex items-center gap-2 text-sm text-neutral-500">
                <span>1 {toolInvocation.args.from} = {rate?.toFixed(4)} {toolInvocation.args.to}</span>
                {rate && rate > 1 ? (
                  <TrendingUp className="h-4 w-4 text-green-500" />
                ) : (
                  <TrendingDown className="h-4 w-4 text-red-500" />
                )}
              </div>
            </motion.div>
          )}
        </div>
      </CardContent>
    </Card>
  );
};

================
File: components/flight-tracker.tsx
================
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Plane, Clock, Terminal } from "lucide-react";
import { motion } from "framer-motion";

interface FlightApiResponse {
  data: Array<{
    flight_date: string;
    flight_status: string;
    departure: {
      airport: string;
      timezone: string;
      iata: string;
      terminal: string | null;
      gate: string | null;
      delay: number | null;
      scheduled: string;
    };
    arrival: {
      airport: string;
      timezone: string;
      iata: string;
      terminal: string | null;
      gate: string | null;
      delay: number | null;
      scheduled: string;
    };
    airline: {
      name: string;
      iata: string;
    };
    flight: {
      number: string;
      iata: string;
      duration: number | null;
    };
  }>;
}

interface FlightTrackerProps {
  data: FlightApiResponse;
}

export function FlightTracker({ data }: FlightTrackerProps) {
  if (!data?.data?.[0]) {
    return null;
  }

  const flight = data.data[0];

  const formatTime = (timestamp: string) => {
    const date = new Date(timestamp);
    return date.toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false,
      timeZone: 'UTC'
    }) + ' UTC';
  };

  const formatDate = (timestamp: string) => {
    return new Date(timestamp).toLocaleDateString('en-US', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });
  };

  const mapStatus = (status: string): "LANDED" | "DEPARTING ON TIME" | "DELAYED" | "SCHEDULED" => {
    switch (status.toLowerCase()) {
      case 'landed':
        return 'LANDED';
      case 'active':
        return flight.departure.delay ? 'DELAYED' : 'DEPARTING ON TIME';
      case 'scheduled':
        return 'SCHEDULED';
      default:
        return 'SCHEDULED';
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case "LANDED":
        return "bg-green-100 hover:bg-green-200 text-green-800 dark:bg-green-900 dark:hover:bg-green-800 dark:text-green-200";
      case "DEPARTING ON TIME":
        return "bg-green-100 hover:bg-green-200 text-green-800 dark:bg-green-900 dark:hover:bg-green-800 dark:text-green-200";
      case "DELAYED":
        return "bg-red-100 hover:bg-red-200 text-red-800 dark:bg-red-900 dark:hover:bg-red-800 dark:text-red-200";
      default:
        return "bg-neutral-100 hover:bg-neutral-200 text-neutral-800 dark:bg-neutral-900 dark:hover:bg-neutral-800 dark:text-neutral-200";
    }
  };

  const getPlanePosition = (status: string) => {
    switch (status.toLowerCase()) {
      case 'landed': return 'right-0';
      case 'active': return 'left-1/2 -translate-x-1/2';
      default: return 'left-0';
    }
  };

  const calculateDuration = (departureTime: string, arrivalTime: string): string => {
    const departure = new Date(departureTime);
    const arrival = new Date(arrivalTime);
    const durationInMinutes = Math.floor((arrival.getTime() - departure.getTime()) / (1000 * 60));

    if (durationInMinutes < 0) return 'N/A';

    const hours = Math.floor(durationInMinutes / 60);
    const minutes = durationInMinutes % 60;

    if (hours === 0) return `${minutes}m`;
    return `${hours}h ${minutes}m`;
  };

  const flightInfo = {
    flightNumber: flight.flight.iata,
    status: mapStatus(flight.flight_status),
    departure: {
      airport: flight.departure.airport,
      code: flight.departure.iata,
      time: formatTime(flight.departure.scheduled),
      date: formatDate(flight.departure.scheduled),
      terminal: flight.departure.terminal || undefined,
      gate: flight.departure.gate || undefined
    },
    arrival: {
      airport: flight.arrival.airport,
      code: flight.arrival.iata,
      time: formatTime(flight.arrival.scheduled),
      date: formatDate(flight.arrival.scheduled),
      terminal: flight.arrival.terminal || undefined,
      gate: flight.arrival.gate || undefined
    },
    duration: calculateDuration(flight.departure.scheduled, flight.arrival.scheduled),
    lastUpdated: new Date().toLocaleTimeString('en-US', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: true
    })
  };

  return (
    <Card className="w-full max-w-3xl bg-white/50 dark:bg-neutral-900/50 backdrop-blur-sm border-neutral-200/50 dark:border-neutral-800/50 shadow-none">
      <CardContent className="p-4 md:p-8">
        {/* Header */}
        <div className="flex flex-col md:flex-row md:items-center gap-4 md:gap-0 md:justify-between mb-6 pb-6 border-b border-neutral-200/50 dark:border-neutral-800/50">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 md:w-12 md:h-12 rounded-full bg-blue-500/10 dark:bg-blue-500/20 flex items-center justify-center">
              <Plane className="h-5 w-5 md:h-6 md:w-6 text-blue-600 dark:text-blue-400" />
            </div>
            <div>
              <h2 className="text-xl md:text-2xl font-bold tracking-tight">{flightInfo.flightNumber}</h2>
              <p className="text-sm text-neutral-500 dark:text-neutral-400">{flight.airline.name}</p>
            </div>
          </div>
          <Badge className={`${getStatusColor(flightInfo.status)} px-3 py-1 md:px-4 md:py-1.5 text-sm font-medium self-start md:self-aut shadow-none`}>
            {flightInfo.status}
          </Badge>
        </div>

        {/* Flight Route */}
        <div className="py-4 md:py-8">
          <div className="flex flex-col md:flex-row gap-6 md:gap-8 md:items-center">
            {/* Departure */}
            <div className="flex-1 min-w-0">
              <div className="text-2xl md:text-3xl font-mono font-bold mb-2 truncate">
                {flightInfo.departure.code}
              </div>
              <div className="space-y-0.5 md:space-y-1">
                <p className="font-medium text-sm truncate">{flightInfo.departure.airport}</p>
                <p className="text-lg md:text-xl font-bold">{flightInfo.departure.time}</p>
                <p className="text-xs text-neutral-500">{flightInfo.departure.date}</p>
              </div>
            </div>

            {/* Flight Path - Hidden on mobile */}
            <div className="hidden md:block flex-1 relative h-[2px] mx-4">
              <div className="absolute left-0 top-1/2 w-2 h-2 bg-blue-600 dark:bg-blue-400 rounded-full -translate-y-1/2" />
              <div className="w-full h-[2px] border-t-2 border-dotted border-blue-500/50 dark:border-blue-400/50" />
              <div className="absolute right-0 top-1/2 w-2 h-2 bg-blue-600 dark:bg-blue-400 rounded-full -translate-y-1/2" />
              <div className={`absolute top-1/2 -translate-y-1/2 ${getPlanePosition(flightInfo.status)} transition-all duration-1000`}>
                <div className="bg-white dark:bg-neutral-800 p-2 rounded-full border">
                  <Plane className="h-5 w-5 text-blue-600 dark:text-blue-400 transform rotate-45" />
                </div>
              </div>
            </div>

            {/* Mobile Flight Progress */}
            <div className="md:hidden relative w-[97%] h-8 flex items-center">
              {/* Background Track */}
              <div className="absolute inset-0 h-1 top-1/2 -translate-y-1/2 bg-neutral-100 dark:bg-neutral-800 rounded-full" />

              {/* Progress Bar */}
              <div
                className={`absolute h-1 top-1/2 -translate-y-1/2 bg-blue-500 rounded-full transition-all duration-1000 ${flightInfo.status === 'LANDED' ? 'w-full' :
                  flightInfo.status === 'DEPARTING ON TIME' ? 'w-[5%]' : 'w-1/2'
                  }`}
              />

              {/* Animated Plane */}
              <div
                className={`absolute top-1/2 -translate-y-1/2 transition-all duration-1000`}
                style={{
                  left: flightInfo.status === 'LANDED' ? '100%' :
                    flightInfo.status === 'DEPARTING ON TIME' ? '5%' : '50%',
                  transform: 'translate(-50%, -50%)'
                }}
              >
                <div className="bg-white dark:bg-neutral-800 p-1.5 rounded-full border">
                  <Plane className="h-4 w-4 text-blue-600 dark:text-blue-400 transform rotate-45" />
                </div>
              </div>
            </div>

            {/* Arrival */}
            <div className="flex-1 min-w-0 md:text-right">
              <div className="text-2xl md:text-3xl font-mono font-bold mb-2 truncate">
                {flightInfo.arrival.code}
              </div>
              <div className="space-y-0.5 md:space-y-1">
                <p className="font-medium text-sm truncate">{flightInfo.arrival.airport}</p>
                <p className="text-lg md:text-xl font-bold">{flightInfo.arrival.time}</p>
                <p className="text-xs text-neutral-500">{flightInfo.arrival.date}</p>
              </div>
            </div>
          </div>
        </div>

        {/* Flight Details */}
        <div className="mt-6 md:mt-8 grid grid-cols-1 md:grid-cols-2 gap-4 md:gap-8 bg-neutral-50/50 dark:bg-neutral-800/50 rounded-xl p-4">
          {/* Departure Details */}
          <div className="space-y-3 max-w-full">
            {flightInfo.departure.terminal && (
              <div className="flex items-center gap-2 overflow-hidden">
                <Terminal className="h-4 w-4 flex-shrink-0 text-neutral-500" />
                <span className="text-sm truncate">Terminal {flightInfo.departure.terminal}</span>
              </div>
            )}
            {flightInfo.departure.gate && (
              <div className="flex items-center gap-2 overflow-hidden">
                <div className="h-4 w-4 flex-shrink-0 rounded bg-blue-500/10 flex items-center justify-center text-[10px] text-blue-600">G</div>
                <span className="text-sm truncate">Gate {flightInfo.departure.gate}</span>
              </div>
            )}
          </div>

          {/* Arrival Details */}
          <div className="space-y-3 max-w-full">
            {flightInfo.arrival.terminal && (
              <div className="flex items-center gap-2 overflow-hidden">
                <Terminal className="h-4 w-4 flex-shrink-0 text-neutral-500" />
                <span className="text-sm truncate">Terminal {flightInfo.arrival.terminal}</span>
              </div>
            )}
            {flightInfo.arrival.gate && (
              <div className="flex items-center gap-2 overflow-hidden">
                <div className="h-4 w-4 flex-shrink-0 rounded bg-blue-500/10 flex items-center justify-center text-[10px] text-blue-600">G</div>
                <span className="text-sm truncate">Gate {flightInfo.arrival.gate}</span>
              </div>
            )}
          </div>
        </div>

        {/* Footer */}
        <div className="mt-4 md:mt-6 flex flex-col md:flex-row items-start md:items-center gap-2 md:gap-3 text-sm text-neutral-500">
          <div className="flex items-center gap-2">
            <Clock className="h-4 w-4" />
            <span>Flight duration: {flightInfo.duration}</span>
          </div>
          <span className="hidden md:inline text-neutral-300">‚Ä¢</span>
          <span>Last updated: {flightInfo.lastUpdated}</span>
        </div>
      </CardContent>
    </Card>
  );
}

================
File: components/InstallPrompt.tsx
================
import { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { X, Share, Plus, Download } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';

export function InstallPrompt() {
  const [showPrompt, setShowPrompt] = useState(false);
  const [platform, setPlatform] = useState<'ios' | 'android' | 'chrome' | 'other'>('other');
  const [deferredPrompt, setDeferredPrompt] = useState<any>(null);

  useEffect(() => {
    const isDismissed = localStorage.getItem('installPromptDismissed');
    if (isDismissed) return;

    // Detect platform
    const userAgent = navigator.userAgent.toLowerCase();
    const isIOSDevice = /ipad|iphone|ipod/.test(userAgent) && !(window as any).MSStream;
    const isAndroid = /android/.test(userAgent);
    const isChrome = /chrome/.test(userAgent) && /google inc/.test(navigator.vendor.toLowerCase());

    if (isIOSDevice) setPlatform('ios');
    else if (isAndroid) setPlatform('android');
    else if (isChrome) setPlatform('chrome');

    // Don't show if already installed
    if (window.matchMedia('(display-mode: standalone)').matches) return;

    // Handle PWA install prompt
    window.addEventListener('beforeinstallprompt', (e) => {
      e.preventDefault();
      setDeferredPrompt(e);
      setShowPrompt(true);
    });

    // Show prompt for iOS after delay
    if (isIOSDevice) {
      setTimeout(() => setShowPrompt(true), 2000);
    }
  }, []);

  const handleDismiss = () => {
    setShowPrompt(false);
    localStorage.setItem('installPromptDismissed', 'true');
  };

  const handleInstall = async () => {
    if (!deferredPrompt) return;

    try {
      await deferredPrompt.prompt();
      const choiceResult = await deferredPrompt.userChoice;

      if (choiceResult.outcome === 'accepted') {
        setShowPrompt(false);
        setDeferredPrompt(null);
      }
    } catch (error) {
      console.error('Install prompt error:', error);
    }
  };

  const getInstructions = () => {
    switch (platform) {
      case 'ios':
        return (
          <p className="text-neutral-600 dark:text-neutral-400">
            Tap <Share className="inline h-4 w-4 mx-1" /> and then{" "}
            <span className="whitespace-nowrap">
              &ldquo;Add to Home Screen&rdquo; <Plus className="inline h-4 w-4 ml-1" />
            </span>
          </p>
        );
      case 'android':
        return (
          <p className="text-neutral-600 dark:text-neutral-400">
            Tap the menu <span className="font-bold">‚ãÆ</span> and select &ldquo;Install app&rdquo;
          </p>
        );
      default:
        return (
          <p className="text-neutral-600 dark:text-neutral-400">
            Install our app for a better experience <Download className="inline h-4 w-4 ml-1" />
          </p>
        );
    }
  };

  return (
    <AnimatePresence>
      {showPrompt && (
        <motion.div
          initial={{ opacity: 0, y: 50 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: 50 }}
          className="fixed top-4 left-4 right-4 z-[100] md:left-auto md:right-4 md:w-96"
        >
          <Card className="p-4 bg-white dark:bg-neutral-900 border border-neutral-200 dark:border-neutral-800 shadow-lg">
            <div className="flex items-start justify-between">
              <div className="space-y-2">
                <h3 className="font-medium text-xl text-neutral-900 dark:text-neutral-100">
                  Install Mojo
                </h3>
                {getInstructions()}
              </div>
              <Button
                variant="ghost"
                size="icon"
                className="h-6 w-6"
                onClick={handleDismiss}
              >
                <X className="h-4 w-4" />
                <span className="sr-only">Dismiss</span>
              </Button>
            </div>

            {platform !== 'ios' && (
              <div className="mt-4 flex justify-end gap-2">
                <Button
                  variant="secondary"
                  size="sm"
                  onClick={handleDismiss}
                >
                  Maybe later
                </Button>
                <Button
                  size="sm"
                  onClick={handleInstall}
                >
                  Install
                </Button>
              </div>
            )}
          </Card>
        </motion.div>
      )}
    </AnimatePresence>
  );
}

================
File: components/interactive-charts.tsx
================
import React from 'react';
import ReactECharts, { EChartsOption } from 'echarts-for-react';
import { Card } from "@/components/ui/card";
import { useTheme } from 'next-themes';
import { motion } from 'framer-motion';

interface BaseChart {
  type: string;
  title: string;
  x_label?: string;
  y_label?: string;
  elements: any[];
}

export function InteractiveChart({ chart }: { chart: BaseChart }) {
  const { theme } = useTheme();
  const textColor = theme === 'dark' ? '#e5e5e5' : '#171717';
  const gridColor = theme === 'dark' ? '#404040' : '#e5e5e5';

  const sharedOptions: EChartsOption = {
    backgroundColor: 'transparent',
    grid: { top: 50, right: 20, bottom: 40, left: 40 },
    legend: {
      textStyle: { color: textColor },
      top: 8
    },
    tooltip: {
      backgroundColor: theme === 'dark' ? '#333' : '#fff',
      borderColor: gridColor,
      borderWidth: 1,
      textStyle: { color: textColor },
      trigger: 'axis',
      className: '!rounded-lg !border !border-neutral-200 dark:!border-neutral-800'
    },
  };

  const getChartOptions = (): EChartsOption => {
    if (chart.type === 'line' || chart.type === 'scatter') {
      const series = chart.elements.map((e) => ({
        name: e.label,
        type: chart.type,
        data: e.points.map((p: [number, number]) => [p[0], p[1]]),
        smooth: true,
        symbolSize: chart.type === 'scatter' ? 10 : 6
      }));

      return {
        ...sharedOptions,
        xAxis: {
          type: 'category',
          name: chart.x_label,
          nameLocation: 'middle',
          nameGap: 25,
          axisLabel: { color: textColor },
          axisLine: { lineStyle: { color: gridColor } }
        },
        yAxis: {
          name: chart.y_label,
          nameLocation: 'middle',
          nameGap: 30,
          axisLabel: { color: textColor },
          axisLine: { lineStyle: { color: gridColor } }
        },
        series
      };
    }

    if (chart.type === 'bar') {
      const data = Object.groupBy(chart.elements, ({ group }) => group);
      const series = Object.entries(data).map(([group, elements]) => ({
        name: group,
        type: 'bar',
        stack: 'total',
        data: elements?.map((e) => [e.label, e.value]),
        emphasis: {
          itemStyle: {
            shadowBlur: 10,
            shadowColor: 'rgba(0,0,0,0.3)'
          }
        }
      }));

      return {
        ...sharedOptions,
        xAxis: {
          type: 'category',
          name: chart.x_label,
          nameLocation: 'middle',
          nameGap: 25,
          axisLabel: { color: textColor },
          axisLine: { lineStyle: { color: gridColor } }
        },
        yAxis: {
          name: chart.y_label,
          nameLocation: 'middle',
          nameGap: 30,
          axisLabel: { color: textColor },
          axisLine: { lineStyle: { color: gridColor } }
        },
        series
      };
    }

    return sharedOptions;
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
    >
      <Card className="overflow-hidden bg-white dark:bg-neutral-900 border-neutral-200 dark:border-neutral-800">
        <div className="p-6">
          {chart.title && (
            <h3 className="text-lg font-medium text-neutral-900 dark:text-neutral-100 mb-4">
              {chart.title}
            </h3>
          )}
          <ReactECharts 
            option={getChartOptions()} 
            style={{ height: '400px', width: '100%' }}
            theme={theme === 'dark' ? 'dark' : undefined}
          />
        </div>
      </Card>
    </motion.div>
  );
}

export default InteractiveChart;

================
File: components/interactive-maps.tsx
================
import { clientEnv } from "@/env/client";
import { cn } from "@/lib/utils";
import mapboxgl from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import React, { useCallback, useEffect, useRef } from 'react';

interface Location {
  lat: number;
  lng: number;
}

interface Photo {
  thumbnail: string;
  small: string;
  medium: string;
  large: string;
  original: string;
  caption?: string;
}

interface Place {
  name: string;
  location: Location;
  place_id: string;
  vicinity: string;
  rating?: number;
  reviews_count?: number;
  price_level?: string;
  description?: string;
  photos?: Photo[];
  is_closed?: boolean;
  next_open_close?: string;
  type?: string;
  cuisine?: string;
  source?: string;
  phone?: string;
  website?: string;
  hours?: string[];
  timezone?: string;
}

mapboxgl.accessToken = clientEnv.NEXT_PUBLIC_MAPBOX_TOKEN || '';

interface InteractiveMapProps {
  center: Location;
  places: Place[];
  selectedPlace: Place | null;
  onPlaceSelect: (place: Place | null) => void;
  className?: string;
  viewMode?: 'map' | 'list';
}

const InteractiveMap: React.FC<InteractiveMapProps> = ({
  center,
  places,
  selectedPlace,
  onPlaceSelect,
  className,
  viewMode = 'map'
}) => {
  const mapContainerRef = useRef<HTMLDivElement>(null);
  const mapRef = useRef<mapboxgl.Map | null>(null);
  const markersRef = useRef<{ [key: string]: mapboxgl.Marker }>({});

  // Handler for marker clicks
  const handleMarkerClick = useCallback((place: Place) => {
    onPlaceSelect(place);
  }, [onPlaceSelect]);

  // Initialize map
  useEffect(() => {
    if (!mapContainerRef.current) return;

    mapRef.current = new mapboxgl.Map({
      container: mapContainerRef.current,
      style: 'mapbox://styles/mapbox/light-v11',
      center: [center.lng, center.lat],
      zoom: 14,
      attributionControl: false,
    });

    const map = mapRef.current;

    // Add minimal controls
    map.addControl(
      new mapboxgl.NavigationControl({ showCompass: false, showZoom: true }),
      'bottom-right'
    );

    // Compact attribution
    map.addControl(
      new mapboxgl.AttributionControl({ compact: true }),
      'bottom-left'
    );

    return () => {
      Object.values(markersRef.current).forEach(marker => marker.remove());
      map.remove();
    };
  }, [center.lat, center.lng]);

  // Update markers
  useEffect(() => {
    if (!mapRef.current) return;

    // Clear existing markers
    Object.values(markersRef.current).forEach(marker => marker.remove());
    markersRef.current = {};

    // Create markers with click handlers
    places.forEach((place, index) => {
      const isSelected = selectedPlace?.place_id === place.place_id;

      // Create marker element
      const el = document.createElement('div');
      el.className = cn(
        'w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium transition-all duration-300 cursor-pointer shadow-md',
        isSelected
          ? 'bg-black text-white scale-110'
          : 'bg-white text-black hover:scale-105'
      );
      el.style.border = '2px solid currentColor';
      el.innerHTML = `${index + 1}`;

      // Create and add marker
      const marker = new mapboxgl.Marker({
        element: el,
        anchor: 'center',
      })
        .setLngLat([place.location.lng, place.location.lat])
        .addTo(mapRef.current!);

      // Add click handler
      el.addEventListener('click', (e) => {
        e.stopPropagation(); // Prevent map click
        handleMarkerClick(place);
      });

      // Store marker reference
      markersRef.current[place.place_id] = marker;
    });
  }, [places, selectedPlace, handleMarkerClick]);

  // Handle map click to deselect
  useEffect(() => {
    const map = mapRef.current;
    if (!map) return;

    const handleMapClick = (e: mapboxgl.MapMouseEvent) => {
      // Check if click was on a marker
      const clickedMarker = Object.values(markersRef.current).some(marker => {
        const markerEl = marker.getElement();
        return e.originalEvent.target === markerEl || markerEl.contains(e.originalEvent.target as Node);
      });

      // If click wasn't on a marker, deselect
      if (!clickedMarker) {
        onPlaceSelect(null);
      }
    };

    map.on('click', handleMapClick);

    return () => {
      map.off('click', handleMapClick);
    };
  }, [onPlaceSelect]);

  // Fly to selected place with proper padding for list view
  useEffect(() => {
    if (!mapRef.current || !selectedPlace) return;

    const map = mapRef.current;
    const { clientWidth, clientHeight } = document.documentElement;

    // Calculate the actual width of list view (60% of viewport height in list mode)
    const listHeight = viewMode === 'list' ? clientHeight * 0.6 : 0;

    // Set padding based on view mode
    const padding = {
      top: viewMode === 'list' ? listHeight : 50,
      bottom: 50,
      left: 50,
      right: 50
    };

    // Get coordinates of the target location
    const coordinates: [number, number] = [selectedPlace.location.lng, selectedPlace.location.lat];

    // Calculate the optimal zoom level
    const currentZoom = map.getZoom();
    const targetZoom = currentZoom < 15 ? 15 : currentZoom;

    // Fly to location with padding
    map.flyTo({
      center: coordinates,
      zoom: targetZoom,
      padding: padding,
      duration: 1500,
      essential: true
    });

    // Ensure padding is maintained after animation
    setTimeout(() => {
      if (mapRef.current) {
        mapRef.current.setPadding(padding);
      }
    }, 1600);

  }, [selectedPlace, viewMode]);

  // Update map padding when view mode changes
  useEffect(() => {
    if (!mapRef.current) return;

    const { clientHeight } = document.documentElement;
    const listHeight = viewMode === 'list' ? clientHeight * 0.6 : 0;

    const padding = {
      top: viewMode === 'list' ? listHeight : 50,
      bottom: 50,
      left: 50,
      right: 50
    };

    mapRef.current.setPadding(padding);
  }, [viewMode]);

  return (
    <div className={cn("w-full h-full relative z-0", className)}>
      <div ref={mapContainerRef} className="w-full h-full" />
    </div>
  );
};

export default InteractiveMap;

================
File: components/interactive-stock-chart.tsx
================
import React, { useMemo } from 'react';
import ReactECharts, { EChartsOption } from 'echarts-for-react';
import { Badge } from "@/components/ui/badge";
import { useTheme } from 'next-themes';
import { cn } from '@/lib/utils';

interface StockChartProps {
  title: string;
  data: any[];
  chart: {
    type: string;
    x_label: string;
    y_label: string;
    x_scale: string;
    elements: Array<{ label: string; points: Array<[number, number]> }>;
  };
}

export function InteractiveStockChart({ title, data, chart }: StockChartProps) {
  const { theme } = useTheme();
  const textColor = theme === 'dark' ? '#e5e5e5' : '#171717';
  const gridColor = theme === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)';
  const tooltipBg = theme === 'dark' ? '#171717' : '#ffffff';

  const chartData = useMemo(() => {
    return chart.elements.flatMap(e => {
      return e.points.map(([dateString, price]) => {
        const parsed = Date.parse(String(dateString));
        const validDate = !Number.isNaN(parsed) ? new Date(parsed) : new Date();
        return {
          label: e.label,
          date: validDate,
          value: Number(price) || 0
        };
      });
    });
  }, [chart.elements]);

  const latestPrice = chartData[chartData.length - 1]?.value || 0;
  const firstPrice = chartData[0]?.value || 0;
  const priceChange = latestPrice - firstPrice;
  const percentChange = ((priceChange / firstPrice) * 100).toFixed(2);

  const options: EChartsOption = {
    backgroundColor: 'transparent',
    grid: {
      top: 16,
      right: 16,
      bottom: 24,
      left: 16,
      containLabel: true
    },
    tooltip: {
      trigger: 'axis',
      borderWidth: 0,
      backgroundColor: tooltipBg,
      padding: 0,
      className: 'echarts-tooltip',
      textStyle: { color: textColor },
      formatter: (params: any) => {
        const date = params[0].axisValue;
        const currentPrice = params[0].value;
        const prevPrice = chartData[params[0].dataIndex - 1]?.value || currentPrice;
        const change = currentPrice - prevPrice;
        const changePercent = ((change / prevPrice) * 100).toFixed(2);
        const isPositive = change >= 0;
        const changeColor = isPositive ? '#22c55e' : '#ef4444';
        const bgColor = tooltipBg;

        return `
          <div style="
            padding: 6px 10px;
            border-radius: 5px;
            border: 1px solid ${theme === 'dark' ? 'rgba(255,255,255,0.1)' : 'rgba(0,0,0,0.1)'};
            font-family: system-ui, -apple-system, sans-serif;
            display: flex;
            align-items: center;
            gap: 8px;
            background: ${bgColor};
          ">
            <span style="
              font-size: 13px;
              color: ${theme === 'dark' ? '#9ca3af' : '#6b7280'};
            ">${date}</span>
            <span style="
              font-size: 13px;
              font-weight: 500;
              color: ${theme === 'dark' ? '#f3f4f6' : '#111827'};
            ">$${currentPrice.toFixed(2)}</span>
            <span style="
              font-size: 13px;
              font-weight: 500;
              color: ${changeColor};
              display: flex;
              align-items: center;
              gap: 2px;
            ">${isPositive ? '‚Üë' : '‚Üì'}${changePercent}%</span>
          </div>
        `;
      }
    },
    xAxis: {
      type: 'category',
      data: chartData.map(d => d.date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' })),
      axisLine: { show: true, lineStyle: { color: gridColor } },
      axisTick: { show: false },
      axisLabel: {
        color: textColor,
        margin: 8,
        fontSize: 11,
        hideOverlap: true,
        interval: (index: number) => {
          const total = chartData.length;
          return total <= 10 ? true : index % Math.ceil(total / 8) === 0;
        }
      },
      splitLine: {
        show: true,
        lineStyle: { color: gridColor, type: 'dashed' }
      }
    },
    yAxis: {
      type: 'value',
      position: 'right',
      axisLine: { show: false },
      axisTick: { show: false },
      axisLabel: {
        formatter: (value: number) => `$${value.toFixed(2)}`,
        color: textColor,
        margin: 8
      },
      splitLine: {
        show: true,
        lineStyle: { color: gridColor, type: 'dashed' }
      }
    },
    series: chart.elements.map(e => ({
      name: e.label,
      type: 'line',
      smooth: true,
      showSymbol: false,
      data: chartData.filter(d => d.label === e.label).map(d => d.value),
      lineStyle: {
        color: priceChange >= 0 ? '#22c55e' : '#ef4444',
        width: 2
      },
      areaStyle: {
        color: {
          type: 'linear',
          x: 0,
          y: 0,
          x2: 0,
          y2: 1,
          colorStops: [
            {
              offset: 0,
              color: priceChange >= 0
                ? 'rgba(34, 197, 94, 0.15)'
                : 'rgba(239, 68, 68, 0.15)'
            },
            {
              offset: 1,
              color: theme === 'dark'
                ? 'rgba(23, 23, 23, 0)'
                : 'rgba(255, 255, 255, 0)'
            }
          ]
        }
      }
    }))
  };

  return (
    <div className="w-full bg-neutral-50 dark:bg-neutral-900 rounded-xl">
      <div className="mb-2 sm:mb-4 p-3">
        <h3 className="text-lg sm:text-xl font-bold text-neutral-800 dark:text-neutral-200">
          {title}
        </h3>
        <div className="flex items-center gap-2 mt-1">
          <span className="text-base sm:text-lg font-semibold text-neutral-800 dark:text-neutral-200">
            ${latestPrice.toFixed(2)}
          </span>
          <Badge
            className={cn(
              "rounded-full px-2 py-0.5 text-xs sm:text-sm font-medium shadow-none",
              priceChange >= 0
                ? "bg-green-100 text-green-800 dark:bg-green-900/30 dark:text-green-400 hover:bg-green-200"
                : "bg-red-100 text-red-800 dark:bg-red-900/30 dark:text-red-400 hover:bg-red-200"
            )}
          >
            {priceChange >= 0 ? '+' : ''}{priceChange.toFixed(2)} ({percentChange}%)
          </Badge>
        </div>
      </div>
      <div className="rounded-lg overflow-hidden  p-2 sm:p-4">
        <ReactECharts
          option={options}
          style={{ height: '300px', width: '100%' }}
          theme={theme === 'dark' ? 'dark' : undefined}
          notMerge={true}
        />
      </div>
    </div>
  );
}

export default InteractiveStockChart;

================
File: components/list-view.tsx
================
/* eslint-disable @next/next/no-img-element */
import React from 'react';
import { cn } from "@/lib/utils";
import { Button } from '@/components/ui/button';
import PlaceholderImage from './placeholder-image';


interface Location {
    lat: number;
    lng: number;
}

interface Photo {
    thumbnail: string;
    small: string;
    medium: string;
    large: string;
    original: string;
    caption?: string;
}

interface Place {
    name: string;
    location: Location;
    place_id: string;
    vicinity: string;
    rating?: number;
    reviews_count?: number;
    price_level?: string;
    description?: string;
    photos?: Photo[];
    is_closed?: boolean;
    next_open_close?: string;
    type?: string;
    cuisine?: string;
    source?: string;
    phone?: string;
    website?: string;
    hours?: string[];
    distance?: string;
    bearing?: string;
}

interface PlaceCardProps {
    place: Place;
    onClick: () => void;
    variant?: 'overlay' | 'list';
}

const PlaceCard: React.FC<PlaceCardProps> = ({
    place,
    onClick,
    variant = 'list'
}) => {
    const isOverlay = variant === 'overlay';

    return (
        <div
            onClick={onClick}
            className={cn(
                "bg-black text-white rounded-lg transition-transform",
                isOverlay ? 'bg-opacity-90 backdrop-blur-sm' : 'hover:bg-opacity-80',
                'cursor-pointer p-4'
            )}
        >
            <div className="flex gap-4">
                <div className="w-24 h-24 rounded-lg overflow-hidden flex-shrink-0">
                    {place.photos?.[0]?.medium ? (
                        <img
                            src={place.photos[0].medium}
                            alt={place.name}
                            className="w-full h-full object-cover"
                        />
                    ) : (
                        <PlaceholderImage />
                    )}
                </div>

                <div className="flex-1 min-w-0">
                    <h3 className="text-xl font-medium mb-1">{place.name}</h3>

                    <div className="flex items-center gap-2 mb-1">
                        <span className={cn(
                            "text-sm font-medium",
                            place.is_closed ? "text-red-500" : "text-green-500"
                        )}>
                            {place.is_closed ? "Closed" : "Open now"}
                        </span>
                        {place.next_open_close && (
                            <>
                                <span className="text-neutral-400">¬∑</span>
                                <span className="text-sm text-neutral-400">until {place.next_open_close}</span>
                            </>
                        )}
                        {place.type && (
                            <>
                                <span className="text-neutral-400">¬∑</span>
                                <span className="text-sm text-neutral-400 capitalize">{place.type}</span>
                            </>
                        )}
                    </div>

                    <div className="flex items-center gap-2 text-sm mb-2">
                        {place.rating && (
                            <span>{place.rating.toFixed(1)}</span>
                        )}
                        {place.reviews_count && (
                            <span className="text-neutral-400">({place.reviews_count} reviews)</span>
                        )}
                        {place.price_level && (
                            <>
                                <span className="text-neutral-400">¬∑</span>
                                <span>{place.price_level}</span>
                            </>
                        )}
                    </div>

                    {place.description && (
                        <p className="text-sm text-neutral-400 line-clamp-2 mb-3">
                            {place.description}
                        </p>
                    )}

                    <div className="flex gap-2">
                        <Button
                            variant="secondary"
                            size="sm"
                            className="bg-neutral-800 hover:bg-neutral-700 text-white"
                            onClick={(e) => {
                                e.stopPropagation();
                                window.open(
                                    `https://www.google.com/maps/dir/?api=1&destination=${place.location.lat},${place.location.lng}`,
                                    '_blank'
                                );
                            }}
                        >
                            Directions
                        </Button>
                        {place.website && (
                            <Button
                                variant="secondary"
                                size="sm"
                                className="bg-neutral-800 hover:bg-neutral-700 text-white"
                                onClick={(e) => {
                                    e.stopPropagation();
                                    window.open(place.website, '_blank');
                                }}
                            >
                                Website
                            </Button>
                        )}
                        {place.phone && (
                            <Button
                                variant="secondary"
                                size="sm"
                                className="bg-neutral-800 hover:bg-neutral-700 text-white"
                                onClick={(e) => {
                                    e.stopPropagation();
                                    window.open(`tel:${place.phone}`, '_blank');
                                }}
                            >
                                Call
                            </Button>
                        )}
                        {place.place_id && (
                            <Button
                                variant="secondary"
                                size="sm"
                                className="bg-neutral-800 hover:bg-neutral-700 text-white"
                                onClick={(e) => {
                                    e.stopPropagation();
                                    window.open(`https://www.tripadvisor.com/${place.place_id}`, '_blank');
                                }}
                            >
                                TripAdvisor
                            </Button>
                        )}
                    </div>
                </div>
            </div>
        </div>
    );
};

export default PlaceCard;

================
File: components/map-components.tsx
================
// /app/components/map-components.tsx
import { Skeleton } from "@/components/ui/skeleton";
import { clientEnv } from "@/env/client";
import mapboxgl from 'mapbox-gl';
import 'mapbox-gl/dist/mapbox-gl.css';
import React, { useEffect, useRef } from 'react';

mapboxgl.accessToken = clientEnv.NEXT_PUBLIC_MAPBOX_TOKEN || '';

interface Location {
  lat: number;
  lng: number;
}

export interface Place {
  name: string;
  location: Location;
  vicinity?: string;
}

interface MapProps {
  center: Location;
  places?: Place[];
  zoom?: number;
  onMarkerClick?: (place: Place) => void;
}

const MapComponent = ({ center, places = [], zoom = 14, onMarkerClick }: MapProps & { onMarkerClick?: (place: Place) => void }) => {
  const mapRef = useRef<HTMLDivElement>(null);
  const mapInstance = useRef<mapboxgl.Map | null>(null);
  const markersRef = useRef<mapboxgl.Marker[]>([]);

  useEffect(() => {
    if (!mapRef.current || mapInstance.current) return;
    if (!mapboxgl.accessToken) {
      console.error('Mapbox access token is not set');
      return;
    }

    mapInstance.current = new mapboxgl.Map({
      container: mapRef.current,
      style: 'mapbox://styles/mapbox/dark-v11',
      center: [center.lng, center.lat],
      zoom,
      attributionControl: false,
    });

    // Add zoom and rotation controls
    mapInstance.current.addControl(new mapboxgl.NavigationControl(), 'top-right');

    // Add attribution control in bottom-left
    mapInstance.current.addControl(
      new mapboxgl.AttributionControl({ compact: true }),
      'bottom-left'
    );

    // Add fullscreen control
    mapInstance.current.addControl(new mapboxgl.FullscreenControl(), 'top-right');

    return () => {
      mapInstance.current?.remove();
      mapInstance.current = null;
    };
  }, [center.lat, center.lng, zoom]);

  useEffect(() => {
    if (mapInstance.current) {
      mapInstance.current.flyTo({
        center: [center.lng, center.lat],
        zoom,
        essential: true,
        duration: 1000,
        padding: { top: 50, bottom: 50, left: 50, right: 50 }
      });
    }
  }, [center, zoom]);

  useEffect(() => {
    if (!mapInstance.current) return;

    markersRef.current.forEach((marker) => marker.remove());
    markersRef.current = [];

    places.forEach((place) => {
      // Create custom marker element
      const el = document.createElement('div');
      el.className = 'custom-marker';
      el.innerHTML = `
        <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center shadow-lg transform-gpu transition-transform hover:scale-110">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 text-white" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M5.05 4.05a7 7 0 119.9 9.9L10 18.9l-4.95-4.95a7 7 0 010-9.9zM10 11a2 2 0 100-4 2 2 0 000 4z" clip-rule="evenodd" />
          </svg>
        </div>
      `;

      const marker = new mapboxgl.Marker(el)
        .setLngLat([place.location.lng, place.location.lat])
        .setPopup(
          new mapboxgl.Popup({ offset: 25, closeButton: false })
        .setHTML(`
          <div class="p-2 min-w-[200px] bg-white dark:bg-neutral-800 m-0">
            <h3 class="font-semibold text-sm text-neutral-900 dark:text-white">${place.name}</h3>
            ${place.vicinity ? `<p class="text-xs mt-1 text-neutral-600 dark:text-neutral-300">${place.vicinity}</p>` : ''}
          </div>
        `)
        )
        .addTo(mapInstance.current!);

      marker.getElement().addEventListener('click', () => {
        if (onMarkerClick) {
          onMarkerClick(place);
        }
      });

      markersRef.current.push(marker);
    });
  }, [places, onMarkerClick]);

  return (
    <div className="w-full h-[60vh] rounded-t-xl overflow-hidden shadow-lg">
      <div ref={mapRef} className="w-full h-full" />
    </div>
  );
};

export default React.memo(MapComponent, (prevProps, nextProps) => {
  return (
    prevProps.center.lat === nextProps.center.lat &&
    prevProps.center.lng === nextProps.center.lng &&
    prevProps.zoom === nextProps.zoom &&
    JSON.stringify(prevProps.places) === JSON.stringify(nextProps.places)
  );
});

const MapSkeleton = () => (
  <Skeleton className="w-full h-64 bg-neutral-200 dark:bg-neutral-700" />
);

interface PlaceDetailsProps extends Place {
  onDirectionsClick?: () => void;
  onWebsiteClick?: () => void;
  onCallClick?: () => void;
}

interface MapContainerProps {
  title: string;
  center: Location;
  places?: Place[];
  loading?: boolean;
}

const MapContainer: React.FC<MapContainerProps> = ({
  title,
  center,
  places = [],
  loading = false,
}) => {
  if (loading) {
    return (
      <div className="my-4">
        <MapSkeleton />
        <p>Loading map...</p>
      </div>
    );
  }

  return (
    <div className="my-4">
      <h2 className="text-xl font-semibold mb-2">{title}</h2>
      <MapComponent center={center} places={places} />
    </div>
  );
};

export { MapComponent, MapContainer, MapSkeleton };

================
File: components/markdown-render.tsx
================
import React, { useState, useCallback, useMemo } from 'react';
import ReactMarkdown from 'react-markdown';
import Marked, { ReactRenderer } from 'marked-react';
import SyntaxHighlighter from 'react-syntax-highlighter';
import { oneDark } from 'react-syntax-highlighter/dist/esm/styles/prism';
import { HoverCard, HoverCardContent, HoverCardTrigger } from "@/components/ui/hover-card";
import { Button } from '@/components/ui/button';
import { Check, Copy } from 'lucide-react';
import Image from 'next/image';
import Link from 'next/link';
import { fetchMetadata } from '@/app/actions';

interface MarkdownRendererProps {
    content: string;
}

interface CitationLink {
    text: string;
    link: string;
}

interface LinkMetadata {
    title: string;
    description: string;
}

const isValidUrl = (str: string) => {
    try {
        new URL(str);
        return true;
    } catch {
        return false;
    }
};

const MarkdownRenderer: React.FC<MarkdownRendererProps> = ({ content }) => {
    const [metadataCache, setMetadataCache] = useState<Record<string, LinkMetadata>>({});

    const citationLinks = useMemo<CitationLink[]>(() => {
        return Array.from(content.matchAll(/\[([^\]]+)\]\(([^)]+)\)/g)).map(([_, text, link]) => ({
            text,
            link,
        }));
    }, [content]);

    const fetchMetadataWithCache = useCallback(async (url: string) => {
        if (metadataCache[url]) {
            return metadataCache[url];
        }

        const metadata = await fetchMetadata(url);
        if (metadata) {
            setMetadataCache(prev => ({ ...prev, [url]: metadata }));
        }
        return metadata;
    }, [metadataCache]);

    const CodeBlock = ({ language, children }: { language: string | undefined; children: string }) => {
        const [isCopied, setIsCopied] = useState(false);

        const handleCopy = async () => {
            await navigator.clipboard.writeText(children);
            setIsCopied(true);
            setTimeout(() => setIsCopied(false), 2000);
        };

        return (
            <div className="relative group">
                <SyntaxHighlighter
                    language={language || 'text'}
                    style={oneDark}
                    showLineNumbers
                    wrapLines
                    customStyle={{
                        margin: 0,
                        borderRadius: '0.375rem',
                        fontSize: '0.875rem',
                    }}
                >
                    {children}
                </SyntaxHighlighter>
                <Button
                    onClick={handleCopy}
                    className="absolute top-2 right-2 p-2 bg-neutral-700 dark:bg-neutral-600 bg-opacity-80 rounded-md opacity-0 group-hover:opacity-100 transition-opacity duration-200"
                    variant="ghost"
                    size="sm"
                >
                    {isCopied ? <Check size={16} className="text-green-500" /> : <Copy size={16} className="text-neutral-200" />}
                </Button>
            </div>
        );
    };

    const LinkPreview = ({ href }: { href: string }) => {
        const [metadata, setMetadata] = useState<LinkMetadata | null>(null);
        const [isLoading, setIsLoading] = useState(false);

        React.useEffect(() => {
            setIsLoading(true);
            fetchMetadataWithCache(href).then((data) => {
                setMetadata(data);
                setIsLoading(false);
            });
        }, [href]);

        if (isLoading) {
            return (
                <div className="flex items-center justify-center p-4">
                    <div className="animate-spin h-5 w-5 text-neutral-500 dark:text-neutral-400" />
                </div>
            );
        }

        const domain = new URL(href).hostname;

        return (
            <div className="flex flex-col space-y-2 bg-white dark:bg-neutral-800 rounded-md shadow-md overflow-hidden">
                <div className="flex items-center space-x-2 p-3 bg-neutral-100 dark:bg-neutral-700">
                    <Image
                        src={`https://www.google.com/s2/favicons?domain=${domain}&sz=256`}
                        alt="Favicon"
                        width={20}
                        height={20}
                        className="rounded-sm"
                    />
                    <span className="text-sm font-medium text-neutral-600 dark:text-neutral-300 truncate">{domain}</span>
                </div>
                <div className="px-3 pb-3">
                    <h3 className="text-base font-semibold text-neutral-800 dark:text-neutral-200 line-clamp-2">
                        {metadata?.title || "Untitled"}
                    </h3>
                    {metadata?.description && (
                        <p className="text-sm text-neutral-600 dark:text-neutral-400 mt-1 line-clamp-2">
                            {metadata.description}
                        </p>
                    )}
                </div>
            </div>
        );
    };

    const renderHoverCard = (href: string, text: React.ReactNode, isCitation: boolean = false) => {
        return (
            <HoverCard>
                <HoverCardTrigger asChild>
                    <Link
                        href={href}
                        target="_blank"
                        rel="noopener noreferrer"
                        className={isCitation ? "cursor-help text-sm text-primary py-0.5 px-1.5 m-0 bg-neutral-200 dark:bg-neutral-700 rounded-full no-underline" : "text-teal-600 dark:text-teal-400 no-underline hover:underline"}
                    >
                        {text}
                    </Link>
                </HoverCardTrigger>
                <HoverCardContent
                    side="top"
                    align="start"
                    className="w-80 p-0 shadow-lg"
                >
                    <LinkPreview href={href} />
                </HoverCardContent>
            </HoverCard>
        );
    };

    const renderer: Partial<ReactRenderer> = {
        paragraph(children) {
            return <p className="my-4 text-neutral-800 dark:text-neutral-200">{children}</p>;
        },
        code(children, language) {
            return <CodeBlock language={language}>{String(children)}</CodeBlock>;
        },
        link(href, text) {
            const citationIndex = citationLinks.findIndex(link => link.link === href);
            if (citationIndex !== -1) {
                return (
                    <sup>
                        {renderHoverCard(href, citationIndex + 1, true)}
                    </sup>
                );
            }
            return isValidUrl(href) ? renderHoverCard(href, text) : <a href={href} className="text-blue-600 dark:text-blue-400 hover:underline">{text}</a>;
        },
        heading(children, level) {
            const HeadingTag = `h${level}` as keyof JSX.IntrinsicElements;
            const className = `text-${4 - level}xl font-bold my-4 text-neutral-800 dark:text-neutral-100`;
            return <HeadingTag className={className}>{children}</HeadingTag>;
        },
        list(children, ordered) {
            const ListTag = ordered ? 'ol' : 'ul';
            return <ListTag className="list-inside list-disc my-4 pl-4 text-neutral-800 dark:text-neutral-200">{children}</ListTag>;
        },
        listItem(children) {
            return <li className="my-2 text-neutral-800 dark:text-neutral-200">{children}</li>;
        },
        blockquote(children) {
            return <blockquote className="border-l-4 border-neutral-300 dark:border-neutral-600 pl-4 italic my-4 text-neutral-700 dark:text-neutral-300">{children}</blockquote>;
        },
    };

    return (
        <div className="markdown-body dark:text-neutral-200">
            <Marked renderer={renderer}>{content}</Marked>
        </div>
    );
};

export default MarkdownRenderer;

================
File: components/movie-info.tsx
================
/* eslint-disable @next/next/no-img-element */
import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { Film, Tv, Star, Calendar, Clock, Users } from 'lucide-react';
import { useMediaQuery } from '@/hooks/use-media-query';
import { Dialog, DialogContent } from "@/components/ui/dialog";
import { Drawer, DrawerContent } from "@/components/ui/drawer";
import Image from 'next/image';

interface MediaDetails {
    id: number;
    media_type: 'movie' | 'tv';
    title?: string;
    name?: string;
    overview: string;
    poster_path: string | null;
    backdrop_path: string | null;
    vote_average: number;
    vote_count: number;
    release_date?: string;
    first_air_date?: string;
    runtime?: number;
    episode_run_time?: number[];
    genres: Array<{ id: number; name: string }>;
    credits: {
        cast: Array<{
            id: number;
            name: string;
            character: string;
            profile_path: string | null;
        }>;
    };
    origin_country?: string[];
    original_language: string;
    production_companies?: Array<{
        id: number;
        name: string;
        logo_path: string | null;
    }>;
}

interface TMDBResultProps {
    result: {
        result: MediaDetails | null;
    };
}

const TMDBResult = ({ result }: TMDBResultProps) => {
    const [showDetails, setShowDetails] = useState(false);
    const isMobile = useMediaQuery("(max-width: 768px)");

    if (!result.result) return null;
    const media = result.result;

    const formatDate = (dateStr: string) => {
        return new Date(dateStr).toLocaleDateString('en-US', {
            year: 'numeric',
            month: 'long',
            day: 'numeric'
        });
    };

    const formatRuntime = (minutes: number) => {
        const hours = Math.floor(minutes / 60);
        const mins = minutes % 60;
        return `${hours}h ${mins}m`;
    };

    const DetailContent = () => (
        <div className="flex flex-col max-h-[80vh] bg-white dark:bg-neutral-950">
            <div className="relative w-full aspect-[16/9] sm:aspect-[21/9]">
                {media.backdrop_path ? (
                    <Image
                        src={media.backdrop_path}
                        alt={media.title || media.name || ''}
                        fill
                        className="object-cover opacity-40 sm:opacity-60"
                        priority
                        unoptimized
                    />
                ) : (
                    <div className="w-full h-full bg-neutral-200 dark:bg-neutral-800" />
                )}
                <div className="absolute inset-0 bg-gradient-to-t from-white via-white/90 to-white/70 dark:from-neutral-950 dark:via-neutral-950/90 dark:to-neutral-950/70" />
                <div className="absolute bottom-0 left-0 right-0 p-3 sm:p-6">
                    <h2 className="text-xl sm:text-3xl font-bold text-black dark:text-white mb-1.5 sm:mb-2">
                        {media.title || media.name}
                    </h2>
                    <div className="flex flex-wrap items-center gap-3 text-black/90 dark:text-white/90">
                        <div className="flex items-center gap-2">
                            <Star className="w-4 h-4 text-yellow-400" />
                            <span>{media.vote_average.toFixed(1)}</span>
                        </div>
                        {(media.release_date || media.first_air_date) && (
                            <div className="flex items-center gap-2">
                                <Calendar className="w-4 h-4" />
                                <span>{formatDate(media.release_date || media.first_air_date || '')}</span>
                            </div>
                        )}
                        {(media.runtime || media.episode_run_time?.[0]) && (
                            <div className="flex items-center gap-2">
                                <Clock className="w-4 h-4" />
                                <span>{formatRuntime(media.runtime || media.episode_run_time?.[0] || 0)}</span>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            <div className="flex-1 overflow-y-auto">
                <div className="p-4 sm:p-6 space-y-6">
                    <div className="flex flex-wrap gap-2">
                        {media.genres.map(genre => (
                            <span
                                key={genre.id}
                                className="px-3 py-1 text-sm rounded-full bg-neutral-100 text-black dark:bg-neutral-900 dark:text-white"
                            >
                                {genre.name}
                            </span>
                        ))}
                    </div>

                    <p className="text-black/80 dark:text-white/80 text-base sm:text-lg leading-relaxed">
                        {media.overview}
                    </p>

                    {media.credits?.cast && media.credits.cast.length > 0 && (
                        <div className="space-y-4">
                            <h3 className="text-lg font-medium text-black/90 dark:text-white/90">Cast</h3>
                            <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
                                {media.credits.cast.slice(0, media.credits.cast.length).map(person => (
                                    <div
                                        key={person.id}
                                        className="bg-neutral-100 dark:bg-neutral-900 rounded-lg p-2 space-y-2"
                                    >
                                        {person.profile_path ? (
                                            <Image
                                                src={person.profile_path}
                                                alt={person.name}
                                                width={185}
                                                height={185}
                                                className="w-full aspect-square rounded-lg object-cover"
                                            />
                                        ) : (
                                            <div className="w-full aspect-square rounded-lg bg-neutral-200 dark:bg-neutral-800 flex items-center justify-center">
                                                <Users className="w-8 h-8 text-neutral-600 dark:text-neutral-400" />
                                            </div>
                                        )}
                                        <div>
                                            <p className="text-black dark:text-white font-medium truncate">{person.name}</p>
                                            <p className="text-black/60 dark:text-white/60 text-sm truncate">{person.character}</p>
                                        </div>
                                    </div>
                                ))}
                            </div>
                        </div>
                    )}
                </div>
            </div>
        </div>
    );

    return (
        <div className="my-4">
            <motion.div
                whileHover={{ scale: 1.02 }}
                whileTap={{ scale: 0.98 }}
                className="bg-neutral-100 dark:bg-neutral-900 rounded-xl overflow-hidden cursor-pointer"
                onClick={() => setShowDetails(true)}
            >
                <div className="flex flex-col sm:flex-row gap-3 p-3 sm:p-4">
                    <div className="w-[120px] sm:w-40 mx-auto sm:mx-0 aspect-[2/3] relative rounded-lg overflow-hidden">
                        {media.poster_path ? (
                            <Image
                                src={media.poster_path}
                                alt={media.title || media.name || ''}
                                fill
                                className="object-cover"
                            />
                        ) : (
                            <div className="w-full h-full bg-neutral-200 dark:bg-neutral-800 flex items-center justify-center">
                                {media.media_type === 'movie' ? (
                                    <Film className="w-8 h-8 text-neutral-600 dark:text-neutral-400" />
                                ) : (
                                    <Tv className="w-8 h-8 text-neutral-600 dark:text-neutral-400" />
                                )}
                            </div>
                        )}
                    </div>

                    <div className="flex-1 min-w-0 space-y-2">
                        <div>
                            <h3 className="text-lg sm:text-xl font-bold text-black dark:text-white mb-1.5">
                                {media.title || media.name}
                            </h3>
                            <div className="flex flex-wrap items-center gap-2 text-sm text-black/80 dark:text-white/80">
                                <span className="capitalize">{media.media_type}</span>
                                <div className="flex items-center gap-1">
                                    <Star className="w-4 h-4 text-yellow-400" />
                                    <span>{media.vote_average.toFixed(1)}</span>
                                </div>
                            </div>
                        </div>

                        <p className="text-sm sm:text-base text-black/70 dark:text-white/70 line-clamp-2 sm:line-clamp-3">
                            {media.overview}
                        </p>

                        {media.credits?.cast && (
                            <p className="text-xs sm:text-sm text-black/60 dark:text-white/60">
                                <span className="font-medium">Cast: </span>
                                {media.credits.cast.slice(0, 3).map(person => person.name).join(', ')}
                            </p>
                        )}
                    </div>
                </div>
            </motion.div>

            {isMobile ? (
                <Drawer open={showDetails} onOpenChange={setShowDetails}>
                    <DrawerContent className="h-[85vh] p-0 font-sans">
                        <DetailContent />
                    </DrawerContent>
                </Drawer>
            ) : (
                <Dialog open={showDetails} onOpenChange={setShowDetails}>
                    <DialogContent className="max-w-3xl p-0 overflow-hidden font-sans">
                        <DetailContent />
                    </DialogContent>
                </Dialog>
            )}
        </div>
    );
};

export default TMDBResult;

================
File: components/multi-search.tsx
================
// /components/multi-search.tsx
/* eslint-disable @next/next/no-img-element */
import React from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Globe, Search, ExternalLink, Calendar, ImageIcon, X, ChevronLeft, ChevronRight } from 'lucide-react';
import {
    Accordion,
    AccordionContent,
    AccordionItem,
    AccordionTrigger,
} from "@/components/ui/accordion";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Drawer, DrawerContent, DrawerHeader, DrawerTitle } from "@/components/ui/drawer";
import { useMediaQuery } from "@/hooks/use-media-query";
import { cn } from "@/lib/utils";
import MarkdownRenderer from "@/components/markdown-render";

type SearchImage = {
    url: string;
    description: string;
};

type SearchResult = {
    url: string;
    title: string;
    content: string;
    raw_content: string;
    published_date?: string;
};

type SearchQueryResult = {
    query: string;
    results: SearchResult[];
    images: SearchImage[];
};

type MultiSearchResponse = {
    searches: SearchQueryResult[];
    markdown: string;
    llmResponse: string;
};

type MultiSearchArgs = {
    queries: string[];
    maxResults: number[];
    topics: ("general" | "news")[];
    searchDepth: ("basic" | "advanced")[];
};

const PREVIEW_IMAGE_COUNT = 4;

// Loading state component
const SearchLoadingState = ({ queries }: { queries: string[] }) => (
    <div className="w-full space-y-4">
        <Accordion type="single" collapsible defaultValue="search" className="w-full">
            <AccordionItem value="search" className="border-none">
                <AccordionTrigger
                    className={cn(
                        "p-4 bg-white dark:bg-neutral-900 rounded-xl hover:no-underline border border-neutral-200 dark:border-neutral-800 shadow-sm",
                        "[&[data-state=open]]:rounded-b-none"
                    )}
                >
                    <div className="flex items-center gap-3">
                        <div className="p-2 rounded-lg bg-neutral-100 dark:bg-neutral-800">
                            <Globe className="h-4 w-4 text-neutral-500" />
                        </div>
                        <div>
                            <div className="flex items-center gap-2">
                                <h2 className="font-medium text-left">Running Web Search</h2>
                                <span className="flex gap-1">
                                    <span className="w-1 h-1 rounded-full bg-neutral-400 animate-bounce [animation-delay:-0.3s]" />
                                    <span className="w-1 h-1 rounded-full bg-neutral-400 animate-bounce [animation-delay:-0.15s]" />
                                    <span className="w-1 h-1 rounded-full bg-neutral-400 animate-bounce" />
                                </span>
                            </div>
                            <div className="flex items-center gap-2 mt-1.5">
                                <Badge variant="secondary" className="animate-pulse">
                                    Searching...
                                </Badge>
                            </div>
                        </div>
                    </div>
                </AccordionTrigger>
                <AccordionContent className="mt-0 pt-0 border-0">
                    <div className="py-3 px-4 bg-white dark:bg-neutral-900 rounded-b-xl border-t-0 border border-neutral-200 dark:border-neutral-800 shadow-sm">
                        <div className="flex overflow-x-auto gap-2 mb-3 no-scrollbar pb-1">
                            {queries.map((query, i) => (
                                <Badge
                                    key={i}
                                    variant="secondary"
                                    className="px-3 py-1.5 rounded-full bg-neutral-100 dark:bg-neutral-800 flex-shrink-0"
                                >
                                    <Search className="h-3 w-3 mr-1.5" />
                                    {query}
                                </Badge>
                            ))}
                        </div>
                        <div className="flex overflow-x-auto gap-3 no-scrollbar">
                            {[1, 2, 3].map((i) => (
                                <div key={i} className="w-[300px] flex-shrink-0 bg-white dark:bg-neutral-900 rounded-xl border border-neutral-200 dark:border-neutral-800 shadow-sm">
                                    <div className="p-4 animate-pulse">
                                        <div className="flex items-center gap-3 mb-3">
                                            <div className="w-20 h-8 rounded-sm bg-neutral-100 dark:bg-neutral-800" />
                                            <div className="space-y-2">
                                                <div className="h-4 w-32 bg-neutral-100 dark:bg-neutral-800 rounded" />
                                                <div className="h-3 w-24 bg-neutral-100 dark:bg-neutral-800 rounded" />
                                            </div>
                                        </div>
                                        <div className="space-y-2">
                                            <div className="h-3 w-full bg-neutral-100 dark:bg-neutral-800 rounded" />
                                            <div className="h-3 w-full bg-neutral-100 dark:bg-neutral-800 rounded" />
                                            <div className="h-3 w-2/3 bg-neutral-100 dark:bg-neutral-800 rounded" />
                                        </div>
                                    </div>
                                </div>
                            ))}
                        </div>
                    </div>
                </AccordionContent>
            </AccordionItem>
        </Accordion>

        <div className="grid grid-cols-2 sm:grid-cols-4 gap-3">
            {[1, 2, 3, 4].map((i) => (
                <div key={i} className="aspect-square rounded-xl bg-neutral-100 dark:bg-neutral-800 animate-pulse" />
            ))}
        </div>
    </div>
);

const ResultCard = ({ result }: { result: SearchResult }) => (
    <div className="w-[300px] flex-shrink-0 bg-white dark:bg-neutral-900 rounded-xl border border-neutral-200 dark:border-neutral-800 shadow-sm hover:shadow-md transition-all">
        <div className="p-4">
            <div className="flex items-center gap-2.5 mb-3">
                <div className="w-10 h-10 rounded-lg bg-neutral-100 dark:bg-neutral-800 flex items-center justify-center overflow-hidden">
                    <img
                        src={`https://www.google.com/s2/favicons?sz=128&domain=${new URL(result.url).hostname}`}
                        alt=""
                        className="w-6 h-6 object-contain"
                        onError={(e) => {
                            e.currentTarget.src = "data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 24 24' fill='none' stroke='currentColor' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Ccircle cx='12' cy='12' r='10'/%3E%3Cline x1='12' y1='8' x2='12' y2='16'/%3E%3Cline x1='8' y1='12' x2='16' y2='12'/%3E%3C/svg%3E";
                        }}
                    />
                </div>
                <div>
                    <h3 className="font-medium text-sm line-clamp-1">{result.title}</h3>
                    <a
                        href={result.url}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="text-xs text-neutral-500 hover:text-neutral-700 dark:hover:text-neutral-300 flex items-center gap-1"
                    >
                        {new URL(result.url).hostname}
                        <ExternalLink className="h-3 w-3" />
                    </a>
                </div>
            </div>

            <p className="text-sm text-neutral-600 dark:text-neutral-400 line-clamp-3 mb-3">
                {result.content}
            </p>

            {result.published_date && (
                <div className="pt-3 border-t border-neutral-100 dark:border-neutral-800">
                    <time className="text-xs text-neutral-500 flex items-center gap-1.5">
                        <Calendar className="h-3 w-3" />
                        {new Date(result.published_date).toLocaleDateString()}
                    </time>
                </div>
            )}
        </div>
    </div>
);

interface ImageGridProps {
    images: SearchImage[];
    showAll?: boolean;
}

const ImageGrid = ({ images, showAll = false }: ImageGridProps) => {
    const [isOpen, setIsOpen] = React.useState(false);
    const [selectedImage, setSelectedImage] = React.useState(0);
    const isDesktop = useMediaQuery("(min-width: 768px)");

    const displayImages = showAll ? images : images.slice(0, PREVIEW_IMAGE_COUNT);
    const hasMore = images.length > PREVIEW_IMAGE_COUNT;

    const ImageViewer = () => (
        <div className="relative w-full h-full rounded-xl">
            <div className="absolute right-4 top-4 z-50 flex items-center gap-2 rounded-xl">
                <span className="px-2 py-1 rounded-md bg-black/20 backdrop-blur-sm text-xs text-white">
                    {selectedImage + 1} / {images.length}
                </span>
                <Button
                    variant="ghost"
                    size="icon"
                    className="h-8 w-8 bg-black/20 backdrop-blur-sm text-white hover:bg-black/40"
                    onClick={() => setIsOpen(false)}
                >
                    <X className="h-4 w-4" />
                </Button>
            </div>

            <img
                src={images[selectedImage].url}
                alt={images[selectedImage].description}
                className="w-full h-full object-contain rounded-lg"
            />

            <div className="absolute inset-y-0 left-0 flex items-center px-4">
                <Button
                    variant="ghost"
                    size="icon"
                    className="h-8 w-8 bg-black/20 backdrop-blur-sm text-white hover:bg-black/40"
                    onClick={() => setSelectedImage(prev => prev === 0 ? images.length - 1 : prev - 1)}
                >
                    <ChevronLeft className="h-4 w-4" />
                </Button>
            </div>

            <div className="absolute inset-y-0 right-0 flex items-center px-4">
                <Button
                    variant="ghost"
                    size="icon"
                    className="h-8 w-8 bg-black/20 backdrop-blur-sm text-white hover:bg-black/40"
                    onClick={() => setSelectedImage(prev => prev === images.length - 1 ? 0 : prev + 1)}
                >
                    <ChevronRight className="h-4 w-4" />
                </Button>
            </div>

            {images[selectedImage].description && (
                <div className="absolute rounded-xl inset-x-0 bottom-0 p-4 bg-gradient-to-t from-black/60 via-black/40 to-transparent">
                    <p className="text-sm text-white">
                        {images[selectedImage].description}
                    </p>
                </div>
            )}
        </div>
    );

    {
        isDesktop ? (
            <Dialog open={isOpen} onOpenChange={setIsOpen}>
                <DialogContent className="max-w-4xl max-h-[85vh] p-0 rounded-xl overflow-hidden">
                    <DialogHeader className="sr-only">
                        <DialogTitle>Image Gallery</DialogTitle>
                    </DialogHeader>
                    <div className="rounded-xl overflow-hidden">
                        <ImageViewer />
                    </div>
                </DialogContent>
            </Dialog>
        ) : (
            <Drawer open={isOpen} onOpenChange={setIsOpen}>
                <DrawerContent className="p-0 rounded-t-xl overflow-hidden">
                    <DrawerHeader className="absolute top-0 left-0 right-0 z-50 bg-gradient-to-b from-black/60 to-transparent rounded-t-xl">
                        <DrawerTitle className="text-white">Image Gallery</DrawerTitle>
                    </DrawerHeader>
                    <div className="h-[calc(100vh-4rem)] rounded-t-xl overflow-hidden">
                        <ImageViewer />
                    </div>
                </DrawerContent>
            </Drawer>
        )
    }

    return (
        <div>
            <div className="grid grid-cols-2 sm:grid-cols-4 gap-3 mt-3">
                {displayImages.map((image, index) => (
                    // Update ImageGrid image container styles
                    <motion.button
                        key={index}
                        className="relative aspect-square rounded-lg overflow-hidden group hover:ring-2 hover:ring-neutral-400 hover:ring-offset-2 transition-all"
                        onClick={() => {
                            setSelectedImage(index);
                            setIsOpen(true);
                        }}
                        initial={{ opacity: 0, scale: 0.95 }}
                        animate={{ opacity: 1, scale: 1 }}
                        transition={{ duration: 0.3, delay: index * 0.1 }}
                    >
                        <img
                            src={image.url}
                            alt={image.description}
                            className="w-full h-full object-cover rounded-lg"
                        />
                        {image.description && (
                            <div className="absolute inset-0 bg-black/60 opacity-0 group-hover:opacity-100 transition-opacity duration-200 p-3">
                                <p className="text-xs text-white line-clamp-3">{image.description}</p>
                            </div>
                        )}
                        {!showAll && index === PREVIEW_IMAGE_COUNT - 1 && hasMore && (
                            <div className="absolute inset-0 flex items-center justify-center bg-black/60 rounded-lg">
                                <span className="text-xl font-medium text-white">+{images.length - PREVIEW_IMAGE_COUNT}</span>
                            </div>
                        )}
                    </motion.button>
                ))}
            </div>

            {isDesktop ? (
                <Dialog open={isOpen} onOpenChange={setIsOpen}>
                    <DialogContent className="max-w-4xl max-h-[85vh] p-0">
                        <DialogHeader className="sr-only">
                            <DialogTitle>Image Gallery</DialogTitle>
                        </DialogHeader>
                        <ImageViewer />
                    </DialogContent>
                </Dialog>
            ) : (
                <Drawer open={isOpen} onOpenChange={setIsOpen}>
                    <DrawerContent>
                        <DrawerHeader>
                            <DrawerTitle>Image Gallery</DrawerTitle>
                        </DrawerHeader>
                        <div className="p-4">
                            <ImageViewer />
                        </div>
                    </DrawerContent>
                </Drawer>
            )}
        </div>
    );
};

const MultiSearch: React.FC<{ result: MultiSearchResponse | null; args: MultiSearchArgs }> = ({
    result,
    args
}) => {
    if (!result) {
        return <SearchLoadingState queries={args.queries} />;
    }

    // Collect all images from all searches
    const allImages = result.searches.reduce<SearchImage[]>((acc, search) => {
        return [...acc, ...search.images];
    }, []);

    return (
        <div className="w-full space-y-4">
            {/* LLM Response Section */}
            {result.llmResponse && (
                <div className="bg-white dark:bg-neutral-900 rounded-xl border border-neutral-200 dark:border-neutral-800 shadow-sm p-4">
                    <div className="prose dark:prose-invert max-w-none">
                        <MarkdownRenderer content={result.llmResponse} />
                    </div>
                </div>
            )}

            {/* Search Results Accordion */}
            <Accordion type="single" collapsible defaultValue="search" className="w-full">
                <AccordionItem value="search" className="border-none">
                    <AccordionTrigger
                        className={cn(
                            "p-4 bg-white dark:bg-neutral-900 rounded-xl hover:no-underline border border-neutral-200 dark:border-neutral-800 shadow-sm",
                            "[&[data-state=open]]:rounded-b-none"
                        )}
                    >
                        <div className="flex items-center gap-3">
                            <div className="p-2 rounded-lg bg-neutral-100 dark:bg-neutral-800">
                                <Globe className="h-4 w-4 text-neutral-500" />
                            </div>
                            <div>
                                <h2 className="font-medium text-left">Web Search</h2>
                            </div>
                        </div>
                    </AccordionTrigger>

                    <AccordionContent className="mt-0 pt-0 border-0">
                        <div className="py-3 px-4 bg-white dark:bg-neutral-900 rounded-b-xl border-t-0 border border-neutral-200 dark:border-neutral-800 shadow-sm">
                            {/* Query badges */}
                            <div className="flex overflow-x-auto gap-2 mb-3 no-scrollbar pb-1">
                                {result.searches.map((search, i) => (
                                    <Badge
                                        key={i}
                                        variant="secondary"
                                        className="px-3 py-1.5 rounded-full bg-neutral-100 dark:bg-neutral-800 flex-shrink-0"
                                    >
                                        <Search className="h-3 w-3 mr-1.5" />
                                        {search.query}
                                    </Badge>
                                ))}
                            </div>

                            {/* Horizontal scrolling results */}
                            <div className="flex overflow-x-auto gap-3 no-scrollbar">
                                {result.searches.map(search =>
                                    search.results.map((result, resultIndex) => (
                                        <motion.div
                                            key={`${search.query}-${resultIndex}`}
                                            initial={{ opacity: 0, x: 20 }}
                                            animate={{ opacity: 1, x: 0 }}
                                            transition={{ duration: 0.3, delay: resultIndex * 0.1 }}
                                        >
                                            <ResultCard result={result} />
                                        </motion.div>
                                    ))
                                )}
                            </div>
                        </div>
                    </AccordionContent>
                </AccordionItem>
            </Accordion>

            {/* Images section outside accordion */}
            {allImages.length > 0 && <ImageGrid images={allImages} />}
        </div>
    );
};

export default MultiSearch;

================
File: components/nearby-search-map-view.tsx
================
/* eslint-disable @next/next/no-img-element */
import React, { useState } from 'react';
import { cn } from "@/lib/utils";
import dynamic from 'next/dynamic';
import PlaceCard from './place-card';
import { Badge } from './ui/badge';



interface Location {
  lat: number;
  lng: number;
}

interface Photo {
  thumbnail: string;
  small: string;
  medium: string;
  large: string;
  original: string;
  caption?: string;
}

interface Place {
  name: string;
  location: Location;
  place_id: string;
  vicinity: string;
  rating?: number;
  reviews_count?: number;
  price_level?: string;
  description?: string;
  photos?: Photo[];
  is_closed?: boolean;
  next_open_close?: string;
  type?: string;
  cuisine?: string;
  source?: string;
  phone?: string;
  website?: string;
  hours?: string[];
  distance?: number;
  bearing?: string;
  timezone?: string;
}

// Dynamic import for the map component
const InteractiveMap = dynamic(() => import('./interactive-maps'), { ssr: false });

interface NearbySearchMapViewProps {
  center: {
    lat: number;
    lng: number;
  };
  places: Place[];
  type: string;
}

const NearbySearchMapView: React.FC<NearbySearchMapViewProps> = ({
  center,
  places,
  type,
}) => {
  const [viewMode, setViewMode] = useState<'map' | 'list'>('map');
  const [selectedPlace, setSelectedPlace] = useState<Place | null>(null);

  return (
    <div className="relative w-full h-[70vh] bg-white dark:bg-neutral-900 rounded-lg overflow-hidden border border-neutral-200 dark:border-neutral-800">
      <Badge variant={"secondary"} className="absolute top-4 left-4 z-10">Beta</Badge>
      {/* View Toggle */}
      <div className="absolute top-4 right-4 z-10 flex rounded-full bg-white dark:bg-black border border-neutral-200 dark:border-neutral-700 p-0.5 shadow-lg">
        <button
          onClick={() => setViewMode('list')}
          className={cn(
            "px-4 py-1 rounded-full text-sm font-medium transition-colors",
            viewMode === 'list'
              ? "bg-black dark:bg-white text-white dark:text-black"
              : "text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white"
          )}
        >
          List
        </button>
        <button
          onClick={() => setViewMode('map')}
          className={cn(
            "px-4 py-1 rounded-full text-sm font-medium transition-colors",
            viewMode === 'map'
              ? "bg-black dark:bg-white text-white dark:text-black"
              : "text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-white"
          )}
        >
          Map
        </button>
      </div>

      <div className={cn(
        "w-full h-full flex flex-col",
        viewMode === 'list' ? 'divide-y divide-neutral-200 dark:divide-neutral-800' : ''
      )}>
        {/* Map Container */}
        <div className={cn(
          "w-full transition-all duration-300",
          viewMode === 'map' ? 'h-full' : 'h-[40%]'
        )}>
          <InteractiveMap
            center={center}
            places={places}
            selectedPlace={selectedPlace}
            onPlaceSelect={setSelectedPlace}
          />

          {/* Selected Place Overlay - Only show in map view */}
          {selectedPlace && viewMode === 'map' && (
            <div className="absolute left-4 right-4 bottom-4 z-0">
              <PlaceCard
                place={selectedPlace}
                onClick={() => {}}
                isSelected={true}
                variant="overlay"
              />
            </div>
          )}
        </div>

        {/* List Container */}
        {viewMode === 'list' && (
          <div className="h-[60%] bg-white dark:bg-neutral-900">
            <div className="h-full overflow-y-auto">
              <div className="max-w-3xl mx-auto p-4 space-y-4">
                {places.map((place, index) => (
                  <PlaceCard
                    key={index}
                    place={place}
                    onClick={() => setSelectedPlace(place)}
                    isSelected={selectedPlace?.place_id === place.place_id}
                    variant="list"
                  />
                ))}
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default NearbySearchMapView;

================
File: components/place-card.tsx
================
/* eslint-disable @next/next/no-img-element */
import React, { useState } from 'react';
import { DateTime } from 'luxon';
import { cn } from "@/lib/utils";
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card } from '@/components/ui/card';
import {
    MapPin, Star, ExternalLink, Navigation, Globe, Phone, ChevronDown, ChevronUp,
    Clock
} from 'lucide-react';

interface Location {
    lat: number;
    lng: number;
}

interface Photo {
    thumbnail: string;
    small: string;
    medium: string;
    large: string;
    original: string;
    caption?: string;
}

interface Place {
    name: string;
    location: Location;
    place_id: string;
    vicinity: string;
    rating?: number;
    reviews_count?: number;
    price_level?: string;
    description?: string;
    photos?: Photo[];
    is_closed?: boolean;
    next_open_close?: string;
    type?: string;
    cuisine?: string;
    source?: string;
    phone?: string;
    website?: string;
    hours?: string[];
    distance?: number;
    bearing?: string;
    timezone?: string;
}

interface PlaceCardProps {
    place: Place;
    onClick: () => void;
    isSelected?: boolean;
    variant?: 'overlay' | 'list';
}


const HoursSection: React.FC<{ hours: string[]; timezone?: string }> = ({ hours, timezone }) => {
    const [isOpen, setIsOpen] = useState(false);
    const now = timezone ?
        DateTime.now().setZone(timezone) :
        DateTime.now();
    const currentDay = now.weekdayLong;

    if (!hours?.length) return null;

    // Find today's hours
    const todayHours = hours.find(h => h.startsWith(currentDay!))?.split(': ')[1] || 'Closed';

    return (
        <div className="mt-4 border-t dark:border-neutral-800">
            <div
                onClick={(e) => {
                    e.stopPropagation();
                    setIsOpen(!isOpen);
                }}
                className={cn(
                    "mt-4 flex items-center gap-2 cursor-pointer transition-colors",
                    "text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-200"
                )}
            >
                <div className="flex items-center gap-2 text-sm">
                    <Clock className="h-4 w-4 flex-shrink-0" />
                    <span>Today: <span className="font-medium text-neutral-900 dark:text-neutral-100">{todayHours}</span></span>
                </div>
                <Button
                    variant="ghost"
                    size="sm"
                    onClick={(e) => {
                        e.stopPropagation();
                        setIsOpen(!isOpen);
                    }}
                    className="ml-auto p-0 h-8 w-8 hover:bg-neutral-100 dark:hover:bg-neutral-800"
                >
                    {isOpen ? (
                        <ChevronUp className="h-4 w-4" />
                    ) : (
                        <ChevronDown className="h-4 w-4" />
                    )}
                </Button>
            </div>

            <div className={cn(
                "grid transition-all duration-200 overflow-hidden",
                isOpen ? "grid-rows-[1fr] mt-2" : "grid-rows-[0fr]"
            )}>
                <div className="overflow-hidden">
                    <div className="rounded-md border dark:border-neutral-800 divide-y divide-neutral-100 dark:divide-neutral-800 bg-neutral-50 dark:bg-neutral-900">
                        {hours.map((timeSlot, idx) => {
                            const [day, hours] = timeSlot.split(': ');
                            const isToday = day === currentDay;

                            return (
                                <div
                                    key={idx}
                                    className={cn(
                                        "flex items-center justify-between py-2 px-3 text-sm rounded-md",
                                        isToday && "bg-white dark:bg-neutral-800"
                                    )}
                                >
                                    <span className={cn(
                                        "font-medium",
                                        isToday ? "text-primary" : "text-neutral-600 dark:text-neutral-400"
                                    )}>
                                        {day}
                                    </span>
                                    <span className={cn(
                                        isToday ? "font-medium" : "text-neutral-600 dark:text-neutral-400"
                                    )}>
                                        {hours}
                                    </span>
                                </div>
                            );
                        })}
                    </div>
                </div>
            </div>
        </div>
    );
};


const PlaceCard: React.FC<PlaceCardProps> = ({
    place,
    onClick,
    isSelected = false,
    variant = 'list'
}) => {
    const [showHours, setShowHours] = useState(false);
    const isOverlay = variant === 'overlay';

    const formatTime = (timeStr: string | undefined, timezone: string | undefined): string => {
        if (!timeStr || !timezone) return '';
        const hours = Math.floor(parseInt(timeStr) / 100);
        const minutes = parseInt(timeStr) % 100;
        return DateTime.now()
            .setZone(timezone)
            .set({ hour: hours, minute: minutes })
            .toFormat('h:mm a');
    };

    const getStatusDisplay = (): { text: string; color: string } | null => {
        if (!place.timezone || place.is_closed === undefined || !place.next_open_close) {
            return null;
        }

        const timeStr = formatTime(place.next_open_close, place.timezone);
        if (place.is_closed) {
            return {
                text: `Closed ¬∑ Opens ${timeStr}`,
                color: 'red-600 dark:text-red-400'
            };
        }
        return {
            text: `Open ¬∑ Closes ${timeStr}`,
            color: 'green-600 dark:text-green-400'
        };
    };

    const statusDisplay = getStatusDisplay();

    const cardContent = (
        <>
            <div className="flex gap-3">
                {/* Image with Price Badge */}
                {place.photos?.[0]?.medium && (
                    <div className="relative w-20 h-20 rounded-md overflow-hidden flex-shrink-0">
                        <img
                            src={place.photos[0].medium}
                            alt={place.name}
                            className="w-full h-full object-cover"
                        />
                        {place.price_level && (
                            <div className="absolute top-0 left-0 bg-black/80 text-white px-2 py-0.5 text-xs font-medium">
                                {place.price_level}
                            </div>
                        )}
                    </div>
                )}

                <div className="flex-1 min-w-0">
                    <div className="flex items-start justify-between gap-2">
                        <div className="flex-1 min-w-0">
                            <h3 className="font-semibold truncate pr-6">
                                {place.name}
                            </h3>

                            {/* Rating & Reviews */}
                            {place.rating && (
                                <div className="flex items-center gap-1 mt-1">
                                    <Star className="w-4 h-4 text-yellow-500 fill-yellow-500" />
                                    <span className="font-medium">{place.rating.toFixed(1)}</span>
                                    {place.reviews_count && (
                                        <span className="text-neutral-500">({place.reviews_count})</span>
                                    )}
                                </div>
                            )}

                            {/* Status */}
                            {statusDisplay && (
                                <div className={`text-sm text-${statusDisplay.color} mt-1`}>
                                    {statusDisplay.text}
                                </div>
                            )}

                            {/* Address */}
                            {place.vicinity && (
                                <div className="flex items-center text-sm text-neutral-600 dark:text-neutral-400 mt-1">
                                    <MapPin className="w-4 h-4 mr-1 flex-shrink-0" />
                                    <span className="truncate">{place.vicinity}</span>
                                </div>
                            )}
                        </div>
                    </div>

                    {/* Action Buttons */}
                    <div className="flex flex-wrap gap-2 mt-3">
                        <Button
                            variant="default"
                            size="sm"
                            className="h-8"
                            onClick={(e) => {
                                e.stopPropagation();
                                window.open(
                                    `https://www.google.com/maps/dir/?api=1&destination=${place.location.lat},${place.location.lng}`,
                                    '_blank'
                                );
                            }}
                        >
                            <Navigation className="w-4 h-4 mr-2" />
                            Directions
                        </Button>

                        {place.phone && (
                            <Button
                                variant="outline"
                                size="sm"
                                className="h-8"
                                onClick={(e) => {
                                    e.stopPropagation();
                                    window.open(`tel:${place.phone}`, '_blank');
                                }}
                            >
                                <Phone className="w-4 h-4 mr-2" />
                                Call
                            </Button>
                        )}

                        {place.website && (
                            <Button
                                variant="outline"
                                size="sm"
                                className="h-8"
                                onClick={(e) => {
                                    e.stopPropagation();
                                    window.open(place.website, '_blank');
                                }}
                            >
                                <Globe className="w-4 h-4 mr-2" />
                                Website
                            </Button>
                        )}

                        {place.place_id && !isOverlay && (
                            <Button
                                variant="outline"
                                size="sm"
                                className="h-8"
                                onClick={(e) => {
                                    e.stopPropagation();
                                    window.open(`https://www.tripadvisor.com/${place.place_id}`, '_blank');
                                }}
                            >
                                <ExternalLink className="w-4 h-4 mr-2" />
                                More Info
                            </Button>
                        )}
                    </div>
                </div>
            </div>

            {/* Hours Section - Only show if has hours */}
            {place.hours && place.hours.length > 0 && (
                <HoursSection hours={place.hours} timezone={place.timezone} />
            )}
        </>
    );

    if (isOverlay) {
        return (
            <div
                className="bg-white/95 dark:bg-black/95 backdrop-blur-sm p-4 rounded-lg shadow-lg border border-neutral-200 dark:border-neutral-800"
                onClick={onClick}
            >
                {cardContent}
            </div>
        );
    }

    return (
        <Card
            onClick={onClick}
            className={cn(
                "w-full transition-all duration-200 cursor-pointer p-4",
                "hover:bg-neutral-50 dark:hover:bg-neutral-800",
                isSelected && "ring-2 ring-primary"
            )}
        >
            {cardContent}
        </Card>
    );
};

export default PlaceCard;

================
File: components/placeholder-image.tsx
================
import React from 'react';
import { ImageIcon } from 'lucide-react';
import { cn } from '@/lib/utils';

interface PlaceholderImageProps {
  className?: string;
}

const PlaceholderImage: React.FC<PlaceholderImageProps> = ({ className }) => {
  return (
    <div 
      className={cn(
        "w-full h-full flex items-center justify-center bg-neutral-100 dark:bg-neutral-800",
        className
      )}
    >
      <ImageIcon className="w-8 h-8 text-neutral-400 dark:text-neutral-600" />
    </div>
  );
};

export default PlaceholderImage;

================
File: components/search-groups.tsx
================
import React from 'react'
import { Button } from "@/components/ui/button"
import { Card, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { searchGroups, type SearchGroup } from '@/lib/utils'
import { cn } from '@/lib/utils'

interface SearchGroupsProps {
  selectedGroup: string
  onGroupSelect: (group: SearchGroup) => void
}

export function SearchGroups({ selectedGroup, onGroupSelect }: SearchGroupsProps) {
  return (
    <div className="w-full grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mt-4">
      {searchGroups.map((group) => {
        const Icon = group.icon
        const isSelected = selectedGroup === group.id
        
        return (
          <Card
            key={group.id}
            className={cn(
              "cursor-pointer transition-all duration-200 hover:scale-[1.02]",
              "border border-neutral-200 dark:border-neutral-800",
              isSelected && "ring-2 ring-primary ring-offset-2 dark:ring-offset-neutral-950"
            )}
            onClick={() => onGroupSelect(group)}
          >
            <CardHeader>
              <div className="flex items-start gap-4">
                <div className={cn(
                  "p-2 rounded-lg",
                  isSelected ? "bg-primary text-primary-foreground" : "bg-neutral-100 dark:bg-neutral-800"
                )}>
                  <Icon className="w-6 h-6" />
                </div>
                <div className="flex-1">
                  <CardTitle className="text-lg">{group.name}</CardTitle>
                  <CardDescription className="mt-1">
                    {group.description}
                  </CardDescription>
                </div>
              </div>
            </CardHeader>
          </Card>
        )
      })}
    </div>
  )
}

================
File: components/trending-tv-movies-results.tsx
================
/* eslint-disable @next/next/no-img-element */
import React, { useMemo, useState } from 'react';
import { motion } from 'framer-motion';
import { Film, Tv, Star, Calendar, ChevronRight, X } from 'lucide-react';
import { useMediaQuery } from '@/hooks/use-media-query';
import { Dialog, DialogContent } from '@/components/ui/dialog';
import { Drawer, DrawerContent } from '@/components/ui/drawer';

interface TrendingItem {
  id: number;
  title?: string;
  name?: string;
  overview: string;
  poster_path: string | null;
  backdrop_path: string | null;
  vote_average: number;
  release_date?: string;
  first_air_date?: string;
  genre_ids: number[];
  popularity: number;
}

interface TrendingResultsProps {
  result: {
    results: TrendingItem[];
  };
  type: 'movie' | 'tv';
}

const TrendingResults = ({ result, type }: TrendingResultsProps) => {
  const [selectedItem, setSelectedItem] = useState<TrendingItem | null>(null);
  const [showAll, setShowAll] = useState(false);
  const isMobile = useMediaQuery('(max-width: 768px)');

  const displayedResults = useMemo(() => {
    return showAll ? result.results : result.results.slice(0, isMobile ? 4 : 10);
  }, [result.results, showAll, isMobile]);

  const genreMap: Record<number, string> = {
    28: 'Action',
    12: 'Adventure',
    16: 'Animation',
    35: 'Comedy',
    80: 'Crime',
    99: 'Documentary',
    18: 'Drama',
    10751: 'Family',
    14: 'Fantasy',
    36: 'History',
    27: 'Horror',
    10402: 'Music',
    9648: 'Mystery',
    10749: 'Romance',
    878: 'Sci-Fi',
    53: 'Thriller',
    10752: 'War',
    37: 'Western',
    10759: 'Action & Adventure',
    10765: 'Sci-Fi & Fantasy',
    10768: 'War & Politics',
  };

  const formatDate = (dateStr: string) => {
    return new Date(dateStr).toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
    });
  };

  const DetailView = () => {
    if (!selectedItem) return null;

    const content = (
      <div className="flex flex-col">
        <div className="relative aspect-[16/9] sm:aspect-[21/9] w-full">
          {selectedItem.backdrop_path ? (
            <>
              <img
                src={selectedItem.backdrop_path}
                alt={selectedItem.title || selectedItem.name}
                className="w-full h-full object-cover"
              />
              <div className="absolute inset-0 bg-gradient-to-t from-black via-black/50 to-transparent" />
            </>
          ) : (
            <div className="w-full h-full bg-gradient-to-br from-neutral-900 to-neutral-800" />
          )}
          <div className="absolute bottom-0 left-0 right-0 p-4 sm:p-6">
            <h2 className="text-xl sm:text-3xl font-bold text-white line-clamp-2">
              {selectedItem.title || selectedItem.name}
            </h2>
            <div className="flex items-center gap-3 mt-2">
              <div className="flex items-center gap-1.5 text-yellow-400">
                <Star className="w-4 h-4 fill-current" />
                <span className="font-medium">{selectedItem.vote_average.toFixed(1)}</span>
              </div>
              {(selectedItem.release_date || selectedItem.first_air_date) && (
                <div className="flex items-center gap-1.5 text-neutral-300">
                  <Calendar className="w-4 h-4" />
                  <span>{formatDate(selectedItem.release_date || selectedItem.first_air_date || '')}</span>
                </div>
              )}
            </div>
          </div>
        </div>

        <div className="p-4 sm:p-6 space-y-3 sm:space-y-4">
          <div className="flex flex-wrap gap-2">
            {selectedItem.genre_ids.map((genreId) => (
              <span
                key={genreId}
                className="px-3 py-1 text-xs font-medium rounded-full bg-neutral-100 dark:bg-neutral-800 text-neutral-800 dark:text-neutral-200"
              >
                {genreMap[genreId]}
              </span>
            ))}
          </div>

          <p className="text-neutral-700 dark:text-neutral-300 leading-relaxed">{selectedItem.overview}</p>
        </div>
      </div>
    );

    if (isMobile) {
      return (
        <Drawer open={!!selectedItem} onOpenChange={() => setSelectedItem(null)}>
          <DrawerContent className="max-h-[85vh] overflow-y-auto">
            {content}
          </DrawerContent>
        </Drawer>
      );
    }

    return (
      <Dialog open={!!selectedItem} onOpenChange={() => setSelectedItem(null)}>
        <DialogContent className="max-w-3xl p-0 overflow-hidden">{content}</DialogContent>
      </Dialog>
    );
  };

  return (
    <div className="w-full my-4 sm:my-6">
      <header className="flex items-center justify-between mb-4 sm:mb-6 px-4 sm:px-0">
        <div className="flex items-center gap-2 sm:gap-3">
          <div className="p-1.5 sm:p-2 bg-neutral-100 dark:bg-neutral-800 rounded-xl">
            {type === 'movie' ? (
              <Film className="w-4 h-4 sm:w-5 sm:h-5 text-neutral-900 dark:text-neutral-100" />
            ) : (
              <Tv className="w-4 h-4 sm:w-5 sm:h-5 text-neutral-900 dark:text-neutral-100" />
            )}
          </div>
          <div>
            <h2 className="text-lg sm:text-xl font-semibold">
              Trending {type === 'movie' ? 'Movies' : 'Shows'}
            </h2>
            <p className="text-xs sm:text-sm text-neutral-600 dark:text-neutral-400">Top picks for today</p>
          </div>
        </div>
        <button
          onClick={() => setShowAll(!showAll)}
          className="flex items-center gap-1 text-sm text-neutral-600 dark:text-neutral-400 hover:text-neutral-900 dark:hover:text-neutral-100"
        >
          {showAll ? 'Show Less' : 'View All'}
          <ChevronRight className="w-4 h-4" />
        </button>
      </header>

      <div
        className={`grid ${
          isMobile
            ? 'grid-cols-2 gap-2'
            : 'grid-cols-2 sm:grid-cols-3 lg:grid-cols-5 gap-3 sm:gap-4'
        } px-4 sm:px-0`}
      >
        {displayedResults.map((item, index) => (
          <motion.div
            key={item.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.3, delay: index * 0.1 }}
            className="group cursor-pointer"
            onClick={() => setSelectedItem(item)}
          >
            <div className="relative aspect-[2/3] rounded-lg sm:rounded-xl overflow-hidden bg-neutral-100 dark:bg-neutral-800">
              {item.poster_path ? (
                <img
                  src={item.poster_path}
                  alt={item.title || item.name}
                  className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center">
                  {type === 'movie' ? (
                    <Film className="w-8 h-8 text-neutral-400" />
                  ) : (
                    <Tv className="w-8 h-8 text-neutral-400" />
                  )}
                </div>
              )}
              <div
                className="absolute inset-0 bg-gradient-to-t
                  from-black/90 via-black/40 to-transparent 
                  opacity-0 group-hover:opacity-100 
                  transition-opacity duration-300
                  flex flex-col justify-end p-3 sm:p-4"
              >
                <div className="transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
                  <div className="flex items-center gap-1.5 text-yellow-400 mb-1.5">
                    <Star className="w-3 h-3 sm:w-4 sm:h-4 fill-current" />
                    <span className="text-xs sm:text-sm font-medium text-white">
                      {item.vote_average.toFixed(1)}
                    </span>
                  </div>
                  <h3 className="text-white text-sm sm:text-base font-medium line-clamp-2 mb-1">
                    {item.title || item.name}
                  </h3>
                  <p className="text-neutral-300 text-xs sm:text-sm">
                    {formatDate(item.release_date || item.first_air_date || '')}
                  </p>
                </div>
              </div>
            </div>
          </motion.div>
        ))}
      </div>

      {isMobile && showAll && (
        <Drawer open={showAll} onOpenChange={() => setShowAll(false)}>
          <DrawerContent className="bg-white dark:bg-neutral-900">
            <div className="flex flex-col h-[90vh]">
              <div className="flex items-center justify-between p-4 border-b border-neutral-200 dark:border-neutral-800">
                <h3 className="text-lg font-semibold">
                  All Trending {type === 'movie' ? 'Movies' : 'Shows'}
                </h3>
                <button
                  onClick={() => setShowAll(false)}
                  className="p-2 hover:bg-neutral-100 dark:hover:bg-neutral-800 rounded-full"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
              <div className="flex-1 overflow-y-auto">
                <div className="grid grid-cols-2 gap-2 p-4">
                  {result.results.map((item, index) => (
                    <motion.div
                      key={item.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ duration: 0.3, delay: index * 0.1 }}
                      className="group cursor-pointer"
                      onClick={() => {
                        setSelectedItem(item);
                        setShowAll(false);
                      }}
                    >
                      <div className="relative aspect-[2/3] rounded-lg overflow-hidden bg-neutral-100 dark:bg-neutral-800">
                        {item.poster_path ? (
                          <img
                            src={item.poster_path}
                            alt={item.title || item.name}
                            className="w-full h-full object-cover transition-transform duration-500 group-hover:scale-105"
                          />
                        ) : (
                          <div className="w-full h-full flex items-center justify-center">
                            {type === 'movie' ? (
                              <Film className="w-8 h-8 text-neutral-400" />
                            ) : (
                              <Tv className="w-8 h-8 text-neutral-400" />
                            )}
                          </div>
                        )}
                        <div
                          className="absolute inset-0 bg-gradient-to-t
                           from-black/90 via-black/40 to-transparent
                           opacity-0 group-hover:opacity-100
                           transition-opacity duration-300
                           flex flex-col justify-end p-3"
                        >
                          <div className="transform translate-y-4 group-hover:translate-y-0 transition-transform duration-300">
                            <div className="flex items-center gap-1.5 text-yellow-400 mb-1.5">
                              <Star className="w-3 h-3 fill-current" />
                              <span className="text-xs font-medium text-white">
                                {item.vote_average.toFixed(1)}
                              </span>
                            </div>
                            <h3 className="text-white text-sm font-medium line-clamp-2 mb-1">
                              {item.title || item.name}
                            </h3>
                            <p className="text-neutral-300 text-xs">
                              {formatDate(item.release_date || item.first_air_date || '')}
                            </p>
                          </div>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            </div>
          </DrawerContent>
        </Drawer>
      )}

      <DetailView />
    </div>
  );
};

export default TrendingResults;

================
File: components/weather-chart.tsx
================
import React, { useMemo } from 'react';
import { Line, LineChart, CartesianGrid, XAxis, YAxis, ResponsiveContainer } from "recharts";
import { Card, CardHeader, CardContent, CardTitle, CardDescription, CardFooter } from "@/components/ui/card";
import { ChartConfig, ChartContainer, ChartTooltip, ChartTooltipContent } from "@/components/ui/chart";

interface WeatherDataPoint {
    date: string;
    minTemp: number;
    maxTemp: number;
}

interface WeatherChartProps {
    result: any;
}

const WeatherChart: React.FC<WeatherChartProps> = React.memo(({ result }) => {
    const { chartData, minTemp, maxTemp } = useMemo(() => {
        const weatherData: WeatherDataPoint[] = result.list.map((item: any) => ({
            date: new Date(item.dt * 1000).toLocaleDateString(),
            minTemp: Number((item.main.temp_min - 273.15).toFixed(1)),
            maxTemp: Number((item.main.temp_max - 273.15).toFixed(1)),
        }));

        const groupedData: { [key: string]: WeatherDataPoint } = weatherData.reduce((acc, curr) => {
            if (!acc[curr.date]) {
                acc[curr.date] = { ...curr };
            } else {
                acc[curr.date].minTemp = Math.min(acc[curr.date].minTemp, curr.minTemp);
                acc[curr.date].maxTemp = Math.max(acc[curr.date].maxTemp, curr.maxTemp);
            }
            return acc;
        }, {} as { [key: string]: WeatherDataPoint });

        const chartData = Object.values(groupedData);

        const minTemp = Math.min(...chartData.map(d => d.minTemp));
        const maxTemp = Math.max(...chartData.map(d => d.maxTemp));

        return { chartData, minTemp, maxTemp };
    }, [result]);

    const chartConfig: ChartConfig = useMemo(() => ({
        minTemp: {
            label: "Min Temp.",
            color: "hsl(var(--chart-1))",
        },
        maxTemp: {
            label: "Max Temp.",
            color: "hsl(var(--chart-2))",
        },
    }), []);

    return (
        <Card className="my-4 shadow-none bg-white dark:bg-neutral-800 border-neutral-200 dark:border-neutral-700">
            <CardHeader>
                <CardTitle className="text-neutral-800 dark:text-neutral-100">Weather Forecast for {result.city.name}</CardTitle>
                <CardDescription className="text-neutral-600 dark:text-neutral-400">
                    Showing min and max temperatures for the next 5 days
                </CardDescription>
            </CardHeader>
            <CardContent>
                <ChartContainer config={chartConfig}>
                    <ResponsiveContainer width="100%" height={300}>
                        <LineChart
                            data={chartData}
                            margin={{ top: 10, right: 30, left: 0, bottom: 0 }}
                        >
                            <CartesianGrid strokeDasharray="3 3" stroke="#374151" />
                            <XAxis
                                dataKey="date"
                                tickFormatter={(value) => new Date(value).toLocaleDateString(undefined, { month: 'short', day: 'numeric' })}
                                stroke="#9CA3AF"
                            />
                            <YAxis
                                domain={[Math.floor(minTemp) - 2, Math.ceil(maxTemp) + 2]}
                                tickFormatter={(value) => `${value}¬∞C`}
                                stroke="#9CA3AF"
                            />
                            <ChartTooltip content={<ChartTooltipContent />} />
                            <Line
                                type="monotone"
                                dataKey="minTemp"
                                stroke="var(--color-minTemp)"
                                strokeWidth={2}
                                dot={false}
                                name="Min Temp."
                            />
                            <Line
                                type="monotone"
                                dataKey="maxTemp"
                                stroke="var(--color-maxTemp)"
                                strokeWidth={2}
                                dot={false}
                                name="Max Temp."
                            />
                        </LineChart>
                    </ResponsiveContainer>
                </ChartContainer>
            </CardContent>
            <CardFooter>
                <div className="flex w-full items-start gap-2 text-sm">
                    <div className="grid gap-2">
                        <div className="flex items-center gap-2 font-medium leading-none text-neutral-800 dark:text-neutral-100">
                            {result.city.name}, {result.city.country}
                        </div>
                        <div className="flex items-center gap-2 leading-none text-neutral-600 dark:text-neutral-400">
                            Next 5 days forecast
                        </div>
                    </div>
                </div>
            </CardFooter>
        </Card>
    );
});

WeatherChart.displayName = 'WeatherChart';

export default WeatherChart;

================
File: env/client.ts
================
// https://env.t3.gg/docs/nextjs#create-your-schema
import { createEnv } from '@t3-oss/env-nextjs'
import { z } from 'zod'

export const clientEnv = createEnv({
  client: {
    NEXT_PUBLIC_MAPBOX_TOKEN: z.string().min(1),
    NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: z.string().min(1),
  },
  runtimeEnv: {
    NEXT_PUBLIC_MAPBOX_TOKEN: process.env.NEXT_PUBLIC_MAPBOX_TOKEN,
    NEXT_PUBLIC_GOOGLE_MAPS_API_KEY: process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY,
  },
})

================
File: env/server.ts
================
// https://env.t3.gg/docs/nextjs#create-your-schema
import { createEnv } from '@t3-oss/env-nextjs'
import { z } from 'zod'

export const serverEnv = createEnv({
  server: {
    GOOGLE_GENERATIVE_AI_API_KEY: z.string().min(1),
    KV_REST_REST_URL: z.string().min(1).url(),
    KV_REST_REST_TOKEN: z.string().min(1),
    ELEVENLABS_API_KEY: z.string().min(1),
    TAVILY_API_KEY: z.string().min(1),
    EXA_API_KEY: z.string().min(1),
    TMDB_API_KEY: z.string().min(1),
    YT_ENDPOINT: z.string().min(1),
    FIRECRAWL_API_KEY: z.string().min(1),
    OPENWEATHER_API_KEY: z.string().min(1),
    SANDBOX_TEMPLATE_ID: z.string().min(1),
    GOOGLE_MAPS_API_KEY: z.string().min(1),
    MAPBOX_ACCESS_TOKEN: z.string().min(1),
    TRIPADVISOR_API_KEY: z.string().min(1),
    AVIATION_STACK_API_KEY: z.string().min(1),
    CRON_SECRET: z.string().min(1),
    BLOB_READ_WRITE_TOKEN: z.string().min(1),
    YELP_API_KEY: z.string().min(1),
  },
  experimental__runtimeEnv: process.env,
})

================
File: hooks/use-media-query.tsx
================
// hooks/use-media-query.ts
import { useEffect, useState } from 'react'

export function useMediaQuery(query: string) {
  const [matches, setMatches] = useState(false)

  useEffect(() => {
    const media = window.matchMedia(query)
    if (media.matches !== matches) {
      setMatches(media.matches)
    }
    const listener = () => setMatches(media.matches)
    media.addEventListener('change', listener)
    return () => media.removeEventListener('change', listener)
  }, [matches, query])

  return matches
}

================
File: hooks/use-window-size.tsx
================
"use client";

import { useState, useEffect } from "react";

interface WindowSize {
  width: number | undefined;
  height: number | undefined;
}

function useWindowSize(): WindowSize {
  const [windowSize, setWindowSize] = useState<WindowSize>({
    width: undefined,
    height: undefined,
  });

  useEffect(() => {
    // Handler to call on window resize
    function handleResize() {
      // Set window width/height to state
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    }

    // Add event listener
    window.addEventListener("resize", handleResize);

    // Call handler right away so state gets updated with initial window size
    handleResize();

    // Remove event listener on cleanup
    return () => window.removeEventListener("resize", handleResize);
  }, []); // Empty array ensures that effect is only run on mount and unmount

  return windowSize;
}

export default useWindowSize;

================
File: lib/utils.ts
================
// /lib/utils.ts
import { type ClassValue, clsx } from "clsx"
import { twMerge } from "tailwind-merge"
import { Globe, Book, YoutubeIcon, Pen } from 'lucide-react'
import { Brain, Code } from '@phosphor-icons/react'

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

export type SearchGroupId = 'web' | 'academic' | 'youtube' | 'analysis' | 'fun';

export const searchGroups = [
  {
    id: 'web' as const,
    name: 'Web',
    description: 'Search across the entire internet',
    icon: Globe,
  },
  {
    id: 'analysis' as const,
    name: 'Analysis',
    description: 'Code, stock and currency stuff',
    icon: Code,
  },
  {
    id: 'fun' as const,
    name: 'Fun',
    description: 'Talk to Mojo like a digital friend',
    icon: Pen,
  },
  {
    id: 'academic' as const,
    name: 'Academic',
    description: 'Search academic papers and research powered by Exa',
    icon: Book,
  },
  {
    id: 'youtube' as const,
    name: 'YouTube',
    description: 'Search YouTube videos in real-time powered by Exa',
    icon: YoutubeIcon,
  },
] as const;

export type SearchGroup = typeof searchGroups[number];

================
File: public/Launch_SVG_Dark.svg
================
<svg width="160" height="48" viewBox="0 0 160 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_17395_113912)">
<g clip-path="url(#clip1_17395_113912)">
<path d="M10.0646 7.26C1.84461 19.92 4.18461 37.62 16.7246 47.16C16.9646 47.4 17.0846 47.7 16.9646 47.88C16.8446 48.06 16.4846 48.06 16.2446 47.82C10.2945 43.1109 6.36702 36.3076 5.26461 28.8C4.12461 21.24 5.80461 13.56 10.0646 7.26ZM10.7246 42.9C8.98461 44.4 5.50461 43.14 3.76461 39.66C5.86461 38.64 8.68461 40.26 10.7246 42.9ZM12.5846 35.04C13.7246 37.38 13.7246 40.32 11.9846 41.88C9.94461 39.24 10.5446 36 12.5846 35.04ZM7.48461 37.68C5.50461 38.88 2.38461 36.96 1.36461 33.24C3.58461 32.7 5.98461 34.8 7.48461 37.68ZM10.9046 30.48C11.5646 33 10.9646 35.88 8.92461 36.96H8.86461C7.42461 34.02 8.68461 31.02 10.9046 30.48ZM5.38461 32.1C3.16461 32.82 0.524609 30.36 0.224609 26.52C2.50461 26.4 4.48461 28.98 5.38461 32.1ZM10.1246 25.74C10.3046 28.32 9.10461 30.96 6.88461 31.68V31.62C6.04461 28.5 7.78461 25.86 10.1246 25.74ZM0.404609 19.68C2.68461 20.1 4.12461 22.98 4.36461 26.16C2.08461 26.46 -0.0753906 23.52 0.404609 19.68ZM10.2446 20.94C9.88461 23.52 8.26461 25.8 5.98461 26.1L5.92461 26.04C5.74461 22.86 7.96461 20.58 10.2446 20.94ZM11.2646 16.26C10.4846 18.72 8.38461 20.64 6.10461 20.4C6.46461 17.22 9.10461 15.42 11.2646 16.26ZM1.84461 13.02C3.94461 13.86 4.84461 16.92 4.54461 20.04L4.48461 20.22H4.42461C2.20461 19.92 0.704609 16.8 1.78461 13.2L1.84461 13.02ZM13.1846 11.76C11.8646 14.04 9.52461 15.54 7.30461 14.88C8.26461 11.82 11.2046 10.5 13.1846 11.76ZM4.60461 6.72C6.52461 7.98 6.76461 11.28 5.80461 14.4C3.58461 13.74 2.62461 10.14 4.60461 6.72ZM16.0046 7.68C14.2046 9.72 11.5646 10.74 9.52461 9.66C11.1446 6.78 14.3846 6.06 16.0046 7.68ZM8.56461 0.96C10.2446 2.64 9.76461 6 8.14461 8.82C6.16461 7.74 5.92461 4.02 8.56461 0.96ZM16.9646 0C15.8846 2.82 13.6046 5.04 10.8446 6.12C10.8446 3.24 13.9646 0.06 16.9646 0Z" fill="#00AA45"/>
</g>
<path d="M30.3407 20C30.1447 20 30.0467 19.93 30.0467 19.79C30.0467 19.636 30.1867 19.538 30.4667 19.496L30.8867 19.433C31.1947 19.391 31.4047 19.321 31.5167 19.223C31.6427 19.111 31.7337 18.908 31.7897 18.614L34.6457 6.266C34.7157 5.972 34.7157 5.776 34.6457 5.678C34.5757 5.58 34.4007 5.503 34.1207 5.447L33.7007 5.363C33.5187 5.321 33.4277 5.244 33.4277 5.132C33.4277 4.964 33.5537 4.88 33.8057 4.88H37.6067C37.8167 4.88 37.9007 4.964 37.8587 5.132C37.8307 5.258 37.7397 5.335 37.5857 5.363L36.9977 5.447C36.6897 5.489 36.4797 5.566 36.3677 5.678C36.2557 5.79 36.1647 5.993 36.0947 6.287L33.3647 18.047C33.2527 18.551 33.3227 18.915 33.5747 19.139C33.8267 19.363 34.1907 19.475 34.6667 19.475C35.1987 19.475 35.7447 19.272 36.3047 18.866C36.8647 18.46 37.3267 17.823 37.6907 16.955L38.3207 15.485C38.3907 15.303 38.5027 15.212 38.6567 15.212C38.8667 15.212 38.9367 15.331 38.8667 15.569L37.6907 19.517C37.6067 19.839 37.3967 20 37.0607 20H30.3407ZM41.367 20.189C40.863 20.189 40.471 19.972 40.191 19.538C39.911 19.104 39.771 18.467 39.771 17.627C39.771 16.829 39.883 16.031 40.107 15.233C40.331 14.421 40.639 13.651 41.031 12.923C41.423 12.195 41.864 11.551 42.354 10.991C42.858 10.431 43.383 9.99 43.929 9.668C44.489 9.332 45.042 9.164 45.588 9.164C45.854 9.164 46.106 9.22 46.344 9.332C46.582 9.43 46.778 9.591 46.932 9.815C47.016 9.941 47.1 10.004 47.184 10.004C47.268 10.004 47.352 9.941 47.436 9.815C47.59 9.591 47.716 9.451 47.814 9.395C47.912 9.325 48.003 9.29 48.087 9.29C48.269 9.29 48.339 9.388 48.297 9.584L46.428 17.627C46.218 18.537 46.358 18.992 46.848 18.992C47.17 18.992 47.457 18.775 47.709 18.341C47.975 17.907 48.241 17.235 48.507 16.325C48.549 16.171 48.64 16.094 48.78 16.094C48.878 16.094 48.941 16.136 48.969 16.22C48.997 16.304 48.997 16.402 48.969 16.514C48.703 17.83 48.346 18.775 47.898 19.349C47.45 19.909 46.911 20.189 46.281 20.189C45.735 20.189 45.343 19.958 45.105 19.496C44.881 19.034 44.86 18.404 45.042 17.606L45.315 16.451C45.343 16.353 45.322 16.297 45.252 16.283C45.196 16.269 45.147 16.304 45.105 16.388C44.335 17.802 43.649 18.789 43.047 19.349C42.459 19.909 41.899 20.189 41.367 20.189ZM41.892 19.118C42.228 19.118 42.599 18.915 43.005 18.509C43.411 18.103 43.81 17.578 44.202 16.934C44.608 16.29 44.979 15.597 45.315 14.855C45.651 14.113 45.917 13.399 46.113 12.713C46.323 12.027 46.428 11.446 46.428 10.97C46.428 10.116 46.127 9.689 45.525 9.689C45.161 9.689 44.776 9.857 44.37 10.193C43.964 10.515 43.572 10.956 43.194 11.516C42.83 12.076 42.494 12.713 42.186 13.427C41.892 14.127 41.654 14.862 41.472 15.632C41.29 16.388 41.199 17.13 41.199 17.858C41.199 18.348 41.255 18.684 41.367 18.866C41.493 19.034 41.668 19.118 41.892 19.118ZM51.8593 20.189C51.3413 20.189 50.9843 19.958 50.7883 19.496C50.6063 19.02 50.6203 18.397 50.8303 17.627L52.4893 11.537C52.6013 11.131 52.6293 10.816 52.5733 10.592C52.5173 10.368 52.3913 10.256 52.1953 10.256C51.8733 10.256 51.5443 10.501 51.2083 10.991C50.8863 11.481 50.6063 12.16 50.3683 13.028C50.3263 13.182 50.2353 13.259 50.0953 13.259C49.8993 13.259 49.8363 13.119 49.9063 12.839C50.2283 11.663 50.6483 10.76 51.1663 10.13C51.6983 9.486 52.2793 9.164 52.9093 9.164C53.4133 9.164 53.7493 9.395 53.9173 9.857C54.0853 10.319 54.0573 10.949 53.8333 11.747L52.1533 17.837C51.8873 18.803 51.9783 19.286 52.4263 19.286C52.7063 19.286 53.0283 19.097 53.3923 18.719C53.7563 18.341 54.1343 17.823 54.5263 17.165C54.9323 16.507 55.3313 15.758 55.7233 14.918C56.1153 14.078 56.4723 13.196 56.7943 12.272C57.1163 11.348 57.3823 10.431 57.5923 9.521C57.6343 9.367 57.7323 9.29 57.8863 9.29H58.7263C58.9223 9.29 58.9993 9.381 58.9573 9.563L56.9833 18.005C56.8293 18.663 56.9483 18.992 57.3403 18.992C57.9283 18.992 58.5443 18.103 59.1883 16.325C59.2443 16.143 59.3423 16.052 59.4823 16.052C59.5663 16.052 59.6223 16.087 59.6503 16.157C59.6923 16.227 59.6923 16.318 59.6503 16.43C59.2723 17.62 58.8243 18.544 58.3063 19.202C57.7883 19.86 57.2423 20.189 56.6683 20.189C55.6603 20.189 55.3243 19.454 55.6603 17.984L56.2063 15.653C56.2343 15.555 56.2133 15.499 56.1433 15.485C56.0873 15.471 56.0383 15.506 55.9963 15.59C55.1843 17.27 54.4353 18.46 53.7493 19.16C53.0633 19.846 52.4333 20.189 51.8593 20.189ZM61.2214 19.727L63.2164 11.348C63.2864 11.04 63.2934 10.802 63.2374 10.634C63.1954 10.452 63.0694 10.361 62.8594 10.361C62.6074 10.361 62.3274 10.55 62.0194 10.928C61.7254 11.292 61.3894 11.992 61.0114 13.028C60.9554 13.21 60.8574 13.301 60.7174 13.301C60.5074 13.301 60.4514 13.175 60.5494 12.923C60.8574 11.957 61.1794 11.201 61.5154 10.655C61.8654 10.109 62.2154 9.724 62.5654 9.5C62.9154 9.276 63.2374 9.164 63.5314 9.164C63.9934 9.164 64.3224 9.339 64.5184 9.689C64.7144 10.025 64.7214 10.585 64.5394 11.369L64.0144 13.637C64.0004 13.735 64.0214 13.791 64.0774 13.805C64.1334 13.819 64.1824 13.784 64.2244 13.7C64.7704 12.566 65.2954 11.67 65.7994 11.012C66.3034 10.34 66.7794 9.864 67.2274 9.584C67.6754 9.304 68.0814 9.164 68.4454 9.164C68.9634 9.164 69.3414 9.374 69.5794 9.794C69.8174 10.214 69.8174 10.858 69.5794 11.726L67.9834 17.816C67.8854 18.208 67.8784 18.502 67.9624 18.698C68.0464 18.894 68.2004 18.992 68.4244 18.992C68.7044 18.992 68.9774 18.81 69.2434 18.446C69.5234 18.068 69.8104 17.361 70.1044 16.325C70.1464 16.171 70.2374 16.094 70.3774 16.094C70.4894 16.094 70.5524 16.136 70.5664 16.22C70.5944 16.304 70.5944 16.402 70.5664 16.514C70.3004 17.466 70.0134 18.215 69.7054 18.761C69.3974 19.293 69.0824 19.664 68.7604 19.874C68.4524 20.084 68.1374 20.189 67.8154 20.189C67.3114 20.189 66.9334 19.979 66.6814 19.559C66.4294 19.139 66.4154 18.488 66.6394 17.606L68.2564 11.516C68.4104 10.97 68.4314 10.592 68.3194 10.382C68.2214 10.172 68.0744 10.067 67.8784 10.067C67.5704 10.067 67.2204 10.263 66.8284 10.655C66.4364 11.033 66.0374 11.558 65.6314 12.23C65.2254 12.888 64.8264 13.637 64.4344 14.477C64.0424 15.317 63.6854 16.192 63.3634 17.102C63.0554 18.012 62.8034 18.901 62.6074 19.769C62.5654 19.923 62.4674 20 62.3134 20H61.4524C61.2564 20 61.1794 19.909 61.2214 19.727ZM74.0416 20.189C73.2716 20.189 72.6346 19.874 72.1306 19.244C71.6266 18.6 71.3746 17.781 71.3746 16.787C71.3746 15.849 71.5216 14.932 71.8156 14.036C72.1236 13.126 72.5296 12.307 73.0336 11.579C73.5516 10.837 74.1186 10.249 74.7346 9.815C75.3646 9.381 75.9946 9.164 76.6246 9.164C77.2966 9.164 77.8636 9.346 78.3256 9.71C78.3956 9.766 78.4376 9.815 78.4516 9.857C78.4656 9.885 78.4586 9.955 78.4306 10.067L77.8636 12.818C77.8216 13.014 77.7306 13.112 77.5906 13.112C77.4366 13.112 77.3456 13.007 77.3176 12.797L77.2126 11.306C77.1706 10.662 77.0726 10.242 76.9186 10.046C76.7786 9.85 76.5686 9.752 76.2886 9.752C75.8966 9.752 75.4976 9.948 75.0916 10.34C74.6856 10.718 74.3076 11.236 73.9576 11.894C73.6216 12.538 73.3486 13.259 73.1386 14.057C72.9426 14.841 72.8446 15.639 72.8446 16.451C72.8446 18.215 73.4186 19.097 74.5666 19.097C75.1126 19.097 75.6026 18.845 76.0366 18.341C76.4846 17.837 76.8976 17.053 77.2756 15.989C77.3176 15.849 77.4156 15.779 77.5696 15.779C77.6536 15.779 77.7026 15.814 77.7166 15.884C77.7306 15.94 77.7166 16.059 77.6746 16.241C77.5346 17.011 77.2826 17.69 76.9186 18.278C76.5546 18.866 76.1206 19.335 75.6166 19.685C75.1266 20.021 74.6016 20.189 74.0416 20.189ZM85.1839 20.189C84.6799 20.189 84.3019 19.979 84.0499 19.559C83.7979 19.139 83.7839 18.488 84.0079 17.606L85.6249 11.516C85.7789 10.97 85.7999 10.592 85.6879 10.382C85.5899 10.172 85.4429 10.067 85.2469 10.067C84.9389 10.067 84.5889 10.263 84.1969 10.655C83.8189 11.033 83.4199 11.558 82.9999 12.23C82.5939 12.888 82.1949 13.637 81.8029 14.477C81.4249 15.303 81.0749 16.178 80.7529 17.102C80.4309 18.012 80.1719 18.901 79.9759 19.769C79.9339 19.923 79.8359 20 79.6819 20H78.7999C78.6039 20 78.5269 19.909 78.5689 19.727L81.6349 6.56C81.7049 6.308 81.7049 6.133 81.6349 6.035C81.5789 5.937 81.4529 5.881 81.2569 5.867L80.6269 5.804C80.4169 5.79 80.3259 5.699 80.3539 5.531C80.3819 5.405 80.4799 5.328 80.6479 5.3C81.1519 5.216 81.5999 5.118 81.9919 5.006C82.3839 4.88 82.6989 4.719 82.9369 4.523C83.0489 4.439 83.1539 4.397 83.2519 4.397C83.4199 4.397 83.4829 4.502 83.4409 4.712L81.3829 13.637C81.3689 13.735 81.3899 13.791 81.4459 13.805C81.5019 13.819 81.5509 13.784 81.5929 13.7C82.1529 12.552 82.6849 11.649 83.1889 10.991C83.6929 10.333 84.1619 9.864 84.5959 9.584C85.0439 9.304 85.4499 9.164 85.8139 9.164C86.3319 9.164 86.7099 9.374 86.9479 9.794C87.1859 10.214 87.1859 10.858 86.9479 11.726L85.3519 17.816C85.2539 18.208 85.2469 18.502 85.3309 18.698C85.4149 18.894 85.5689 18.992 85.7929 18.992C86.0729 18.992 86.3459 18.81 86.6119 18.446C86.8779 18.068 87.1649 17.361 87.4729 16.325C87.5149 16.171 87.6059 16.094 87.7459 16.094C87.8579 16.094 87.9209 16.136 87.9349 16.22C87.9629 16.304 87.9629 16.402 87.9349 16.514C87.6689 17.466 87.3819 18.215 87.0739 18.761C86.7659 19.293 86.4509 19.664 86.1289 19.874C85.8209 20.084 85.5059 20.189 85.1839 20.189ZM91.1182 20.189C90.3762 20.189 89.7812 19.902 89.3332 19.328C88.8852 18.74 88.6612 17.914 88.6612 16.85C88.6612 15.926 88.8222 15.009 89.1442 14.099C89.4802 13.189 89.9142 12.363 90.4462 11.621C90.9782 10.879 91.5592 10.284 92.1892 9.836C92.8332 9.388 93.4562 9.164 94.0582 9.164C94.7162 9.164 95.1852 9.325 95.4652 9.647C95.7592 9.955 95.9062 10.375 95.9062 10.907C95.9062 11.537 95.6822 12.167 95.2342 12.797C94.8002 13.413 94.1842 13.966 93.3862 14.456C92.6022 14.946 91.6782 15.31 90.6142 15.548C90.3062 15.618 90.1452 15.793 90.1312 16.073C90.1172 16.171 90.1102 16.276 90.1102 16.388C90.1102 16.486 90.1102 16.584 90.1102 16.682C90.1102 17.48 90.2432 18.082 90.5092 18.488C90.7892 18.894 91.1672 19.097 91.6432 19.097C92.1752 19.097 92.6862 18.852 93.1762 18.362C93.6802 17.872 94.1002 17.179 94.4362 16.283C94.4782 16.157 94.5622 16.094 94.6882 16.094C94.7722 16.094 94.8212 16.129 94.8352 16.199C94.8632 16.269 94.8632 16.353 94.8352 16.451C94.3872 17.683 93.8412 18.614 93.1972 19.244C92.5672 19.874 91.8742 20.189 91.1182 20.189ZM90.3412 14.75C90.3132 14.848 90.3272 14.932 90.3832 15.002C90.4532 15.058 90.5372 15.072 90.6352 15.044C91.5032 14.806 92.2312 14.449 92.8192 13.973C93.4072 13.483 93.8482 12.937 94.1422 12.335C94.4502 11.733 94.6042 11.145 94.6042 10.571C94.6042 9.983 94.3732 9.689 93.9112 9.689C93.5052 9.689 93.0642 9.927 92.5882 10.403C92.1122 10.879 91.6712 11.502 91.2652 12.272C90.8592 13.042 90.5512 13.868 90.3412 14.75ZM97.6 20.189C97.082 20.189 96.683 19.972 96.403 19.538C96.123 19.104 95.983 18.467 95.983 17.627C95.983 16.829 96.095 16.031 96.319 15.233C96.543 14.421 96.851 13.651 97.243 12.923C97.635 12.195 98.076 11.551 98.566 10.991C99.07 10.431 99.595 9.99 100.141 9.668C100.701 9.332 101.254 9.164 101.8 9.164C102.178 9.164 102.507 9.262 102.787 9.458C102.983 9.584 103.102 9.542 103.144 9.332L103.816 6.56C103.886 6.308 103.886 6.133 103.816 6.035C103.76 5.937 103.634 5.881 103.438 5.867L102.808 5.804C102.598 5.79 102.507 5.699 102.535 5.531C102.563 5.405 102.661 5.328 102.829 5.3C103.333 5.216 103.781 5.118 104.173 5.006C104.565 4.88 104.88 4.719 105.118 4.523C105.23 4.439 105.335 4.397 105.433 4.397C105.601 4.397 105.664 4.502 105.622 4.712L102.64 17.627C102.43 18.537 102.57 18.992 103.06 18.992C103.382 18.992 103.669 18.775 103.921 18.341C104.187 17.907 104.453 17.235 104.719 16.325C104.761 16.171 104.852 16.094 104.992 16.094C105.09 16.094 105.153 16.136 105.181 16.22C105.209 16.304 105.209 16.402 105.181 16.514C104.915 17.83 104.544 18.775 104.068 19.349C103.606 19.909 103.06 20.189 102.43 20.189C101.884 20.189 101.492 19.958 101.254 19.496C101.03 19.034 101.009 18.404 101.191 17.606L101.422 16.64C101.45 16.542 101.429 16.486 101.359 16.472C101.303 16.458 101.254 16.493 101.212 16.577C100.54 17.893 99.903 18.824 99.301 19.37C98.699 19.916 98.132 20.189 97.6 20.189ZM98.104 19.118C98.44 19.118 98.811 18.915 99.217 18.509C99.623 18.103 100.022 17.578 100.414 16.934C100.82 16.29 101.191 15.597 101.527 14.855C101.863 14.113 102.129 13.399 102.325 12.713C102.535 12.027 102.64 11.446 102.64 10.97C102.64 10.116 102.339 9.689 101.737 9.689C101.373 9.689 100.988 9.857 100.582 10.193C100.176 10.515 99.784 10.956 99.406 11.516C99.042 12.076 98.706 12.713 98.398 13.427C98.104 14.127 97.866 14.862 97.684 15.632C97.502 16.388 97.411 17.13 97.411 17.858C97.411 18.348 97.474 18.684 97.6 18.866C97.74 19.034 97.908 19.118 98.104 19.118ZM112.459 20.189C111.591 20.189 110.905 19.832 110.401 19.118C109.897 18.39 109.645 17.41 109.645 16.178C109.645 15.268 109.792 14.393 110.086 13.553C110.38 12.713 110.765 11.964 111.241 11.306C111.731 10.648 112.27 10.13 112.858 9.752C113.46 9.36 114.062 9.164 114.664 9.164C115.532 9.164 116.218 9.521 116.722 10.235C117.226 10.949 117.478 11.929 117.478 13.175C117.478 14.085 117.331 14.96 117.037 15.8C116.743 16.64 116.351 17.389 115.861 18.047C115.385 18.705 114.846 19.23 114.244 19.622C113.656 20 113.061 20.189 112.459 20.189ZM112.417 19.685C112.865 19.685 113.299 19.468 113.719 19.034C114.153 18.6 114.545 18.026 114.895 17.312C115.245 16.598 115.525 15.807 115.735 14.939C115.945 14.057 116.05 13.175 116.05 12.293C116.05 10.543 115.595 9.668 114.685 9.668C114.251 9.668 113.817 9.885 113.383 10.319C112.949 10.739 112.557 11.306 112.207 12.02C111.871 12.734 111.598 13.532 111.388 14.414C111.178 15.282 111.073 16.157 111.073 17.039C111.073 18.803 111.521 19.685 112.417 19.685ZM119.033 19.727L121.028 11.348C121.098 11.04 121.105 10.802 121.049 10.634C121.007 10.452 120.881 10.361 120.671 10.361C120.419 10.361 120.139 10.55 119.831 10.928C119.537 11.292 119.201 11.992 118.823 13.028C118.767 13.21 118.669 13.301 118.529 13.301C118.319 13.301 118.263 13.175 118.361 12.923C118.669 11.957 118.991 11.201 119.327 10.655C119.677 10.109 120.027 9.724 120.377 9.5C120.727 9.276 121.049 9.164 121.343 9.164C121.805 9.164 122.134 9.339 122.33 9.689C122.526 10.025 122.533 10.585 122.351 11.369L121.826 13.637C121.812 13.735 121.833 13.791 121.889 13.805C121.945 13.819 121.994 13.784 122.036 13.7C122.582 12.566 123.107 11.67 123.611 11.012C124.115 10.34 124.591 9.864 125.039 9.584C125.487 9.304 125.893 9.164 126.257 9.164C126.775 9.164 127.153 9.374 127.391 9.794C127.629 10.214 127.629 10.858 127.391 11.726L125.795 17.816C125.697 18.208 125.69 18.502 125.774 18.698C125.858 18.894 126.012 18.992 126.236 18.992C126.516 18.992 126.789 18.81 127.055 18.446C127.335 18.068 127.622 17.361 127.916 16.325C127.958 16.171 128.049 16.094 128.189 16.094C128.301 16.094 128.364 16.136 128.378 16.22C128.406 16.304 128.406 16.402 128.378 16.514C128.112 17.466 127.825 18.215 127.517 18.761C127.209 19.293 126.894 19.664 126.572 19.874C126.264 20.084 125.949 20.189 125.627 20.189C125.123 20.189 124.745 19.979 124.493 19.559C124.241 19.139 124.227 18.488 124.451 17.606L126.068 11.516C126.222 10.97 126.243 10.592 126.131 10.382C126.033 10.172 125.886 10.067 125.69 10.067C125.382 10.067 125.032 10.263 124.64 10.655C124.248 11.033 123.849 11.558 123.443 12.23C123.037 12.888 122.638 13.637 122.246 14.477C121.854 15.317 121.497 16.192 121.175 17.102C120.867 18.012 120.615 18.901 120.419 19.769C120.377 19.923 120.279 20 120.125 20H119.264C119.068 20 118.991 19.909 119.033 19.727Z" fill="white"/>
<path d="M32.8181 35.7381C32.8181 36.4259 32.6408 37.0212 32.2863 37.5238C31.9371 38.0265 31.4398 38.4153 30.7943 38.6905C30.154 38.9656 29.3974 39.1032 28.5244 39.1032C27.9424 39.1032 27.4107 39.0423 26.9292 38.9206C26.4477 38.7989 26.0271 38.627 25.6673 38.4048L25.7784 37.6984C25.9689 37.8307 26.1752 37.9418 26.3974 38.0317C26.6197 38.1164 26.8551 38.1825 27.1038 38.2302C27.3525 38.2725 27.6117 38.2936 27.8816 38.2936C28.3683 38.2936 28.8022 38.1931 29.1831 37.9921C29.5641 37.791 29.863 37.4947 30.08 37.1032C30.2969 36.7116 30.4054 36.2354 30.4054 35.6746C30.4054 35.0238 30.2757 34.4603 30.0165 33.9841C29.7625 33.5079 29.4027 33.1376 28.9371 32.873C28.4715 32.6085 27.9239 32.4762 27.2943 32.4762H26.6673V41.4762C26.6673 41.5926 26.699 41.6931 26.7625 41.7778C26.826 41.8571 26.9265 41.9074 27.0641 41.9286L27.7546 42.0238C27.8868 42.0503 27.9821 42.0952 28.0403 42.1587C28.0985 42.2222 28.1276 42.3148 28.1276 42.4365C28.1276 42.5476 28.0879 42.6376 28.0085 42.7063C27.9345 42.7698 27.8154 42.8016 27.6514 42.8016H23.5085C23.3445 42.8016 23.2228 42.7698 23.1435 42.7063C23.0641 42.6376 23.0244 42.5476 23.0244 42.4365C23.0244 42.2354 23.1355 42.1005 23.3577 42.0317L23.8181 41.9286C23.945 41.8915 24.0403 41.836 24.1038 41.7619C24.1726 41.6878 24.207 41.5926 24.207 41.4762V33.0159C24.207 32.8995 24.1726 32.8042 24.1038 32.7302C24.0403 32.6561 23.945 32.6005 23.8181 32.5635L23.3577 32.4603C23.1355 32.3915 23.0244 32.2566 23.0244 32.0556C23.0244 31.9392 23.0641 31.8492 23.1435 31.7857C23.2228 31.7222 23.3445 31.6905 23.5085 31.6905H27.3577C28.5112 31.6905 29.4953 31.8651 30.3101 32.2143C31.1249 32.5582 31.7466 33.037 32.1752 33.6508C32.6038 34.2593 32.8181 34.955 32.8181 35.7381Z" fill="white"/>
<path d="M40.482 38.1111C40.482 38.3915 40.4026 38.6085 40.2439 38.7619C40.0852 38.91 39.8524 38.9841 39.5455 38.9841H34.5931V38.3809H37.8391C38.109 38.3809 38.2439 38.2593 38.2439 38.0159C38.2439 37.3175 38.1169 36.7884 37.8629 36.4286C37.609 36.0635 37.2677 35.881 36.8391 35.881C36.5111 35.881 36.2201 35.9815 35.9661 36.1825C35.7122 36.3836 35.5137 36.672 35.3709 37.0476C35.228 37.418 35.1566 37.8677 35.1566 38.3968C35.1566 39.418 35.3947 40.1852 35.8709 40.6984C36.3524 41.2116 36.9926 41.4682 37.7915 41.4682C38.2571 41.4682 38.6645 41.3757 39.0137 41.1905C39.3682 41.0053 39.6434 40.7407 39.8391 40.3968C39.9344 40.291 40.0084 40.2196 40.0614 40.1825C40.1196 40.1455 40.1778 40.127 40.236 40.127C40.3206 40.127 40.3815 40.1667 40.4185 40.246C40.4555 40.3201 40.4741 40.41 40.4741 40.5159C40.4529 40.9603 40.2942 41.373 39.9979 41.754C39.7016 42.1296 39.3021 42.4312 38.7995 42.6587C38.2968 42.8862 37.7201 43 37.0693 43C36.3021 43 35.6222 42.8439 35.0296 42.5317C34.437 42.2143 33.9714 41.7725 33.6328 41.2063C33.2995 40.6349 33.1328 39.9683 33.1328 39.2063C33.1328 38.4074 33.2915 37.6984 33.609 37.0794C33.9317 36.4603 34.3921 35.9762 34.9899 35.627C35.5878 35.2778 36.3021 35.1032 37.1328 35.1032C37.8418 35.1032 38.445 35.2328 38.9423 35.4921C39.445 35.746 39.8259 36.1005 40.0852 36.5556C40.3497 37.0053 40.482 37.5238 40.482 38.1111Z" fill="white"/>
<path d="M48.6281 38.1111C48.6281 38.3915 48.5487 38.6085 48.39 38.7619C48.2312 38.91 47.9984 38.9841 47.6916 38.9841H42.7392V38.3809H45.9852C46.2551 38.3809 46.39 38.2593 46.39 38.0159C46.39 37.3175 46.263 36.7884 46.009 36.4286C45.7551 36.0635 45.4138 35.881 44.9852 35.881C44.6572 35.881 44.3662 35.9815 44.1122 36.1825C43.8582 36.3836 43.6598 36.672 43.517 37.0476C43.3741 37.418 43.3027 37.8677 43.3027 38.3968C43.3027 39.418 43.5408 40.1852 44.017 40.6984C44.4984 41.2116 45.1387 41.4682 45.9376 41.4682C46.4032 41.4682 46.8106 41.3757 47.1598 41.1905C47.5143 41.0053 47.7894 40.7407 47.9852 40.3968C48.0805 40.291 48.1545 40.2196 48.2074 40.1825C48.2656 40.1455 48.3238 40.127 48.382 40.127C48.4667 40.127 48.5275 40.1667 48.5646 40.246C48.6016 40.3201 48.6201 40.41 48.6201 40.5159C48.599 40.9603 48.4402 41.373 48.1439 41.754C47.8477 42.1296 47.4482 42.4312 46.9455 42.6587C46.4429 42.8862 45.8662 43 45.2154 43C44.4482 43 43.7683 42.8439 43.1757 42.5317C42.5831 42.2143 42.1175 41.7725 41.7789 41.2063C41.4455 40.6349 41.2789 39.9683 41.2789 39.2063C41.2789 38.4074 41.4376 37.6984 41.7551 37.0794C42.0778 36.4603 42.5381 35.9762 43.136 35.627C43.7339 35.2778 44.4482 35.1032 45.2789 35.1032C45.9879 35.1032 46.591 35.2328 47.0884 35.4921C47.591 35.746 47.972 36.1005 48.2312 36.5556C48.4958 37.0053 48.6281 37.5238 48.6281 38.1111Z" fill="white"/>
<path d="M52.3297 38.5952C52.3297 37.828 52.4382 37.1852 52.6551 36.6667C52.872 36.1481 53.1577 35.7593 53.5122 35.5C53.8667 35.2354 54.2477 35.1032 54.6551 35.1032C55.1577 35.1032 55.5466 35.246 55.8218 35.5317C56.0969 35.8175 56.2345 36.2275 56.2345 36.7619C56.2345 37.2381 56.1366 37.5926 55.9408 37.8254C55.7451 38.0582 55.4911 38.1746 55.1789 38.1746C54.8615 38.1746 54.6207 38.0899 54.4567 37.9206C54.2927 37.7513 54.2107 37.5159 54.2107 37.2143V36.9286C54.2054 36.7593 54.1657 36.6349 54.0916 36.5556C54.0175 36.4709 53.8958 36.4286 53.7265 36.4286C53.5413 36.4286 53.3615 36.5053 53.1869 36.6587C53.0175 36.8122 52.8773 37.045 52.7662 37.3571C52.6604 37.6693 52.6075 38.0688 52.6075 38.5556L52.3297 38.5952ZM52.4805 35.6508L52.6075 37.4524V41.5238C52.6075 41.6772 52.6366 41.791 52.6948 41.8651C52.7583 41.9339 52.8694 41.9815 53.0281 42.0079L53.7107 42.1111C53.8324 42.1323 53.9223 42.172 53.9805 42.2302C54.044 42.2884 54.0757 42.3677 54.0757 42.4682C54.0757 42.5741 54.0361 42.6561 53.9567 42.7143C53.8826 42.7725 53.7742 42.8016 53.6313 42.8016H49.9249C49.7768 42.8016 49.6683 42.7725 49.5995 42.7143C49.5308 42.6561 49.4964 42.5767 49.4964 42.4762C49.4964 42.3968 49.5202 42.3307 49.5678 42.2778C49.6154 42.2196 49.6895 42.172 49.79 42.1349L50.0996 42.0556C50.1948 42.0238 50.2636 41.9709 50.3059 41.8968C50.3535 41.8175 50.3773 41.6958 50.3773 41.5317V37C50.3773 36.8624 50.3562 36.7645 50.3138 36.7063C50.2768 36.6481 50.2133 36.6111 50.1234 36.5952L49.7027 36.5635C49.6075 36.5423 49.5387 36.5079 49.4964 36.4603C49.454 36.4127 49.4329 36.3518 49.4329 36.2778C49.4329 36.1878 49.4593 36.1164 49.5122 36.0635C49.5652 36.0106 49.6604 35.9577 49.798 35.9048L51.2424 35.381C51.5017 35.2804 51.6921 35.2169 51.8138 35.1905C51.9355 35.1587 52.0308 35.1429 52.0995 35.1429C52.216 35.1429 52.3033 35.1825 52.3615 35.2619C52.4197 35.336 52.4593 35.4656 52.4805 35.6508Z" fill="white"/>
<path d="M59.8934 31.5079V41.5317C59.8934 41.6958 59.9146 41.8175 59.9569 41.8968C60.0046 41.9709 60.076 42.0238 60.1712 42.0556L60.4728 42.1349C60.5733 42.1667 60.6474 42.2116 60.695 42.2698C60.7426 42.3227 60.7665 42.3915 60.7665 42.4762C60.7665 42.5767 60.7321 42.6561 60.6633 42.7143C60.5945 42.7725 60.4834 42.8016 60.33 42.8016H57.203C57.0548 42.8016 56.9464 42.7725 56.8776 42.7143C56.8088 42.6561 56.7744 42.5767 56.7744 42.4762C56.7744 42.3968 56.7982 42.3307 56.8458 42.2778C56.8934 42.2196 56.9675 42.172 57.068 42.1349L57.3776 42.0556C57.4728 42.0185 57.5416 41.963 57.5839 41.8889C57.6315 41.8148 57.6553 41.6958 57.6553 41.5317V32.8413C57.6553 32.709 57.6342 32.6138 57.5919 32.5556C57.5548 32.4974 57.4913 32.4603 57.4014 32.4444L56.9807 32.4127C56.8855 32.3862 56.8167 32.3492 56.7744 32.3016C56.7321 32.254 56.7109 32.1931 56.7109 32.119C56.7109 32.0344 56.7374 31.9656 56.7903 31.9127C56.8432 31.8598 56.9384 31.8069 57.076 31.754L58.5522 31.2143C58.7638 31.1349 58.9305 31.0794 59.0522 31.0476C59.1739 31.0159 59.2797 31 59.3696 31C59.5442 31 59.6739 31.0476 59.7585 31.1429C59.8485 31.2328 59.8934 31.3545 59.8934 31.5079Z" fill="white"/>
<path d="M64.6448 35.6429V41.5317C64.6448 41.6958 64.666 41.8175 64.7083 41.8968C64.7559 41.9709 64.8273 42.0238 64.9226 42.0556L65.2242 42.1349C65.3247 42.1667 65.3988 42.2116 65.4464 42.2698C65.494 42.3227 65.5178 42.3915 65.5178 42.4762C65.5178 42.5767 65.4834 42.6561 65.4146 42.7143C65.3459 42.7725 65.2348 42.8016 65.0813 42.8016H61.9543C61.8062 42.8016 61.6977 42.7725 61.6289 42.7143C61.5602 42.6561 61.5258 42.5767 61.5258 42.4762C61.5258 42.3968 61.5496 42.3307 61.5972 42.2778C61.6448 42.2196 61.7189 42.172 61.8194 42.1349L62.1289 42.0556C62.2242 42.0185 62.293 41.963 62.3353 41.8889C62.3829 41.8148 62.4067 41.6958 62.4067 41.5317V36.9841C62.4067 36.8466 62.3855 36.7487 62.3432 36.6905C62.3062 36.6323 62.2427 36.5952 62.1527 36.5794L61.7321 36.5476C61.6369 36.5265 61.5681 36.4921 61.5258 36.4444C61.4834 36.3968 61.4623 36.336 61.4623 36.2619C61.4623 36.172 61.4861 36.1005 61.5337 36.0476C61.5866 35.9947 61.6845 35.9418 61.8273 35.8889L63.3035 35.3492C63.5099 35.2751 63.6739 35.2222 63.7956 35.1905C63.9226 35.1587 64.0284 35.1429 64.1131 35.1429C64.293 35.1429 64.4252 35.1905 64.5099 35.2857C64.5998 35.3757 64.6448 35.4947 64.6448 35.6429ZM63.3512 33.9286C62.9279 33.9286 62.5866 33.8201 62.3273 33.6032C62.0734 33.381 61.9464 33.0926 61.9464 32.7381C61.9464 32.3836 62.0734 32.1005 62.3273 31.8889C62.5866 31.672 62.9279 31.5635 63.3512 31.5635C63.7797 31.5635 64.121 31.672 64.375 31.8889C64.6342 32.1005 64.7639 32.3836 64.7639 32.7381C64.7639 33.0926 64.6342 33.381 64.375 33.6032C64.121 33.8201 63.7797 33.9286 63.3512 33.9286Z" fill="white"/>
<path d="M69.3493 35.8175C68.9842 35.8175 68.6985 35.9101 68.4921 36.0952C68.2911 36.2751 68.1906 36.5053 68.1906 36.7857C68.1906 36.9603 68.2276 37.119 68.3017 37.2619C68.381 37.3995 68.5292 37.5265 68.7461 37.6429C68.963 37.7593 69.2805 37.8677 69.6985 37.9683C70.5133 38.1376 71.1429 38.3492 71.5874 38.6032C72.0318 38.8571 72.3414 39.1508 72.516 39.4841C72.6906 39.8122 72.7779 40.1799 72.7779 40.5873C72.7779 41.3227 72.5186 41.91 72.0001 42.3492C71.4816 42.7831 70.7276 43 69.7382 43C69.389 43 69.1033 42.9682 68.881 42.9048C68.6588 42.8466 68.4763 42.7884 68.3334 42.7302C68.1906 42.6667 68.0636 42.6349 67.9525 42.6349C67.8414 42.6349 67.7488 42.6667 67.6747 42.7302C67.6059 42.7884 67.5398 42.8466 67.4763 42.9048C67.4128 42.9682 67.3281 43 67.2223 43C67.1271 43 67.0556 42.9735 67.008 42.9206C66.9604 42.8677 66.9154 42.7698 66.8731 42.627L66.3493 41.0317C66.2911 40.8466 66.2726 40.6958 66.2937 40.5794C66.3202 40.463 66.3916 40.3809 66.508 40.3333C66.6297 40.291 66.7355 40.2936 66.8255 40.3413C66.9154 40.3836 67.0001 40.4656 67.0795 40.5873C67.3175 41 67.5715 41.3307 67.8414 41.5794C68.1112 41.8227 68.3943 42 68.6906 42.1111C68.9922 42.2222 69.299 42.2778 69.6112 42.2778C70.0662 42.2778 70.4048 42.1852 70.6271 42C70.8546 41.8148 70.9683 41.5688 70.9683 41.2619C70.9683 41.0767 70.9207 40.91 70.8255 40.7619C70.7302 40.6085 70.553 40.4709 70.2937 40.3492C70.0345 40.2222 69.6588 40.1032 69.1668 39.9921C68.4842 39.8439 67.9392 39.6534 67.5318 39.4206C67.1297 39.1825 66.8387 38.8968 66.6588 38.5635C66.4842 38.2302 66.3969 37.8439 66.3969 37.4048C66.3969 36.9444 66.516 36.5423 66.7541 36.1984C66.9922 35.8545 67.3228 35.5873 67.7461 35.3968C68.1694 35.2011 68.6588 35.1032 69.2144 35.1032C69.5742 35.1032 69.8625 35.1349 70.0795 35.1984C70.2964 35.2619 70.4736 35.328 70.6112 35.3968C70.7541 35.4603 70.8837 35.4921 71.0001 35.4921C71.1271 35.4921 71.2276 35.4603 71.3017 35.3968C71.3757 35.328 71.4472 35.2619 71.516 35.1984C71.5847 35.1349 71.6694 35.1032 71.7699 35.1032C71.8493 35.1032 71.9154 35.1323 71.9683 35.1905C72.0265 35.2434 72.0689 35.3386 72.0953 35.4762L72.4842 36.9921C72.5213 37.1878 72.5292 37.3413 72.508 37.4524C72.4921 37.5635 72.4234 37.6429 72.3017 37.6905C72.1853 37.7381 72.0821 37.7328 71.9921 37.6746C71.9022 37.6164 71.8123 37.5132 71.7223 37.3651C71.3943 36.8042 71.0213 36.4074 70.6033 36.1746C70.1906 35.9365 69.7726 35.8175 69.3493 35.8175Z" fill="white"/>
<path d="M74.0522 36.0635L73.6871 35.9524C73.5601 35.9101 73.4702 35.8624 73.4172 35.8095C73.3643 35.7513 73.3379 35.6852 73.3379 35.6111C73.3379 35.5053 73.3723 35.4259 73.4411 35.373C73.5151 35.3148 73.613 35.2857 73.7347 35.2857H74.2188C74.3458 35.2857 74.4516 35.2619 74.5363 35.2143C74.6209 35.1667 74.7082 35.082 74.7982 34.9603L75.6633 33.746C75.7744 33.6085 75.8802 33.5079 75.9807 33.4444C76.0813 33.381 76.1818 33.3492 76.2823 33.3492C76.3934 33.3492 76.4807 33.3836 76.5442 33.4524C76.6077 33.5212 76.6395 33.6217 76.6395 33.754V40.5397C76.6395 40.91 76.7109 41.1931 76.8538 41.3889C77.0019 41.5847 77.2056 41.6825 77.4649 41.6825C77.6606 41.6825 77.8114 41.6455 77.9172 41.5714C78.0284 41.4921 78.1157 41.4021 78.1791 41.3016C78.2426 41.2011 78.3035 41.1138 78.3617 41.0397C78.4252 40.9603 78.5045 40.918 78.5998 40.9127C78.6791 40.9127 78.74 40.9391 78.7823 40.9921C78.8299 41.045 78.8537 41.1323 78.8537 41.254C78.8485 41.5556 78.7479 41.836 78.5522 42.0952C78.3617 42.3545 78.0945 42.5661 77.7506 42.7302C77.4067 42.8889 77.0151 42.9682 76.576 42.9682C75.8987 42.9682 75.367 42.7989 74.9807 42.4603C74.5998 42.1164 74.4093 41.6005 74.4093 40.9127V36.5317C74.4093 36.3942 74.3802 36.2936 74.322 36.2302C74.2691 36.1614 74.1791 36.1058 74.0522 36.0635ZM75.7585 36.0714V35.2857H78.3855C78.5072 35.2857 78.6024 35.3122 78.6712 35.3651C78.7453 35.4127 78.7823 35.4841 78.7823 35.5794C78.7823 35.7169 78.7135 35.8333 78.576 35.9286C78.4384 36.0238 78.2162 36.0714 77.9093 36.0714H75.7585Z" fill="white"/>
<line x1="83.7139" y1="31.1875" x2="83.7139" y2="42.8125" stroke="white" stroke-width="0.375" stroke-linecap="round"/>
<path d="M92.8256 36.7955L91.9221 37.0511C91.8653 36.9006 91.7815 36.7543 91.6707 36.6122C91.5628 36.4673 91.415 36.348 91.2275 36.2543C91.04 36.1605 90.8 36.1136 90.5074 36.1136C90.1068 36.1136 89.773 36.206 89.5059 36.3906C89.2417 36.5724 89.1096 36.804 89.1096 37.0852C89.1096 37.3352 89.2006 37.5327 89.3824 37.6776C89.5642 37.8224 89.8483 37.9432 90.2346 38.0398L91.2062 38.2784C91.7915 38.4205 92.2275 38.6378 92.5145 38.9304C92.8014 39.2202 92.9449 39.5938 92.9449 40.0511C92.9449 40.4261 92.8369 40.7614 92.621 41.0568C92.4079 41.3523 92.1096 41.5852 91.7261 41.7557C91.3426 41.9261 90.8966 42.0114 90.3881 42.0114C89.7204 42.0114 89.1679 41.8665 88.7304 41.5767C88.2929 41.2869 88.0159 40.8636 87.8994 40.3068L88.854 40.0682C88.9449 40.4205 89.1167 40.6847 89.3696 40.8608C89.6253 41.0369 89.9591 41.125 90.371 41.125C90.8398 41.125 91.2119 41.0256 91.4875 40.8267C91.7659 40.625 91.9051 40.3835 91.9051 40.1023C91.9051 39.875 91.8256 39.6847 91.6665 39.5313C91.5074 39.375 91.2631 39.2585 90.9335 39.1818L89.8426 38.9261C89.2432 38.7841 88.8028 38.5639 88.5216 38.2656C88.2432 37.9645 88.104 37.5881 88.104 37.1364C88.104 36.767 88.2077 36.4403 88.415 36.1563C88.6253 35.8722 88.9108 35.6491 89.2716 35.4872C89.6352 35.3253 90.0471 35.2443 90.5074 35.2443C91.1551 35.2443 91.6636 35.3864 92.0329 35.6705C92.4051 35.9545 92.6693 36.3295 92.8256 36.7955Z" fill="#F6F8FA"/>
<path d="M94.4587 44.3295V35.3295H95.4303V36.3693H95.5496C95.6235 36.2557 95.7258 36.1108 95.8564 35.9347C95.99 35.7557 96.1803 35.5966 96.4275 35.4574C96.6775 35.3153 97.0155 35.2443 97.4417 35.2443C97.9928 35.2443 98.4786 35.3821 98.8991 35.6577C99.3195 35.9332 99.6476 36.3239 99.8834 36.8295C100.119 37.3352 100.237 37.9318 100.237 38.6193C100.237 39.3125 100.119 39.9134 99.8834 40.4219C99.6476 40.9276 99.3209 41.3196 98.9033 41.598C98.4857 41.8736 98.0042 42.0114 97.4587 42.0114C97.0383 42.0114 96.7016 41.9418 96.4488 41.8026C96.1959 41.6605 96.0013 41.5 95.865 41.321C95.7286 41.1392 95.6235 40.9886 95.5496 40.8693H95.4644V44.3295H94.4587ZM95.4474 38.6023C95.4474 39.0966 95.5198 39.5327 95.6647 39.9105C95.8096 40.2855 96.0212 40.5795 96.2996 40.7926C96.578 41.0028 96.9189 41.108 97.3224 41.108C97.7428 41.108 98.0937 40.9972 98.3749 40.7756C98.659 40.5511 98.8721 40.25 99.0141 39.8722C99.159 39.4915 99.2314 39.0682 99.2314 38.6023C99.2314 38.142 99.1604 37.7273 99.0184 37.358C98.8792 36.9858 98.6675 36.6918 98.3834 36.4759C98.1022 36.2571 97.7485 36.1477 97.3224 36.1477C96.9133 36.1477 96.5695 36.2514 96.2911 36.4588C96.0127 36.6634 95.8025 36.9503 95.6604 37.3196C95.5184 37.6861 95.4474 38.1136 95.4474 38.6023Z" fill="#F6F8FA"/>
<path d="M104.43 42.0114C103.839 42.0114 103.321 41.8707 102.875 41.5895C102.432 41.3082 102.085 40.9148 101.835 40.4091C101.588 39.9034 101.464 39.3125 101.464 38.6364C101.464 37.9545 101.588 37.3594 101.835 36.8509C102.085 36.3423 102.432 35.9474 102.875 35.6662C103.321 35.3849 103.839 35.2443 104.43 35.2443C105.021 35.2443 105.538 35.3849 105.981 35.6662C106.427 35.9474 106.774 36.3423 107.021 36.8509C107.271 37.3594 107.396 37.9545 107.396 38.6364C107.396 39.3125 107.271 39.9034 107.021 40.4091C106.774 40.9148 106.427 41.3082 105.981 41.5895C105.538 41.8707 105.021 42.0114 104.43 42.0114ZM104.43 41.108C104.879 41.108 105.248 40.9929 105.538 40.7628C105.828 40.5327 106.043 40.2301 106.182 39.8551C106.321 39.4801 106.391 39.0739 106.391 38.6364C106.391 38.1989 106.321 37.7912 106.182 37.4134C106.043 37.0355 105.828 36.7301 105.538 36.4972C105.248 36.2642 104.879 36.1477 104.43 36.1477C103.981 36.1477 103.612 36.2642 103.322 36.4972C103.033 36.7301 102.818 37.0355 102.679 37.4134C102.54 37.7912 102.47 38.1989 102.47 38.6364C102.47 39.0739 102.54 39.4801 102.679 39.8551C102.818 40.2301 103.033 40.5327 103.322 40.7628C103.612 40.9929 103.981 41.108 104.43 41.108Z" fill="#F6F8FA"/>
<path d="M111.778 35.3295V36.1818H108.386V35.3295H111.778ZM109.375 33.7614H110.38V40C110.38 40.2841 110.421 40.4972 110.504 40.6392C110.589 40.7784 110.697 40.8722 110.828 40.9205C110.961 40.9659 111.102 40.9886 111.25 40.9886C111.36 40.9886 111.451 40.983 111.522 40.9716C111.593 40.9574 111.65 40.946 111.693 40.9375L111.897 41.8409C111.829 41.8665 111.734 41.892 111.612 41.9176C111.49 41.946 111.335 41.9602 111.147 41.9602C110.863 41.9602 110.585 41.8991 110.312 41.777C110.042 41.6548 109.818 41.4688 109.639 41.2188C109.463 40.9688 109.375 40.6534 109.375 40.2727V33.7614Z" fill="#F6F8FA"/>
<path d="M114.437 33.1477V41.875H113.431V33.1477H114.437Z" fill="#F6F8FA"/>
<path d="M116.279 41.875V35.3295H117.285V41.875H116.279ZM116.79 34.2386C116.594 34.2386 116.425 34.1719 116.283 34.0384C116.144 33.9048 116.074 33.7443 116.074 33.5568C116.074 33.3693 116.144 33.2088 116.283 33.0753C116.425 32.9418 116.594 32.875 116.79 32.875C116.986 32.875 117.154 32.9418 117.293 33.0753C117.435 33.2088 117.506 33.3693 117.506 33.5568C117.506 33.7443 117.435 33.9048 117.293 34.0384C117.154 34.1719 116.986 34.2386 116.79 34.2386Z" fill="#F6F8FA"/>
<path d="M121.769 44.4659C121.283 44.4659 120.865 44.4034 120.516 44.2784C120.166 44.1563 119.875 43.9943 119.642 43.7926C119.412 43.5938 119.229 43.3807 119.093 43.1534L119.894 42.5909C119.985 42.7102 120.1 42.8466 120.239 43C120.378 43.1563 120.568 43.2912 120.81 43.4048C121.054 43.5213 121.374 43.5795 121.769 43.5795C122.297 43.5795 122.733 43.4517 123.077 43.196C123.421 42.9403 123.593 42.5398 123.593 41.9943V40.6648H123.507C123.434 40.7841 123.328 40.9318 123.192 41.108C123.059 41.2813 122.865 41.4361 122.612 41.5724C122.362 41.706 122.024 41.7727 121.598 41.7727C121.07 41.7727 120.595 41.6477 120.175 41.3977C119.757 41.1477 119.426 40.7841 119.182 40.3068C118.941 39.8295 118.82 39.25 118.82 38.5682C118.82 37.8977 118.938 37.3139 119.174 36.8168C119.409 36.3168 119.737 35.9304 120.158 35.6577C120.578 35.3821 121.064 35.2443 121.615 35.2443C122.041 35.2443 122.38 35.3153 122.63 35.4574C122.882 35.5966 123.076 35.7557 123.209 35.9347C123.345 36.1108 123.451 36.2557 123.524 36.3693H123.627V35.3295H124.598V42.0625C124.598 42.625 124.47 43.0824 124.215 43.4347C123.962 43.7898 123.621 44.0497 123.192 44.2145C122.766 44.3821 122.291 44.4659 121.769 44.4659ZM121.735 40.8693C122.138 40.8693 122.479 40.777 122.757 40.5923C123.036 40.4077 123.247 40.142 123.392 39.7955C123.537 39.4489 123.61 39.0341 123.61 38.5511C123.61 38.0795 123.539 37.6634 123.397 37.3026C123.255 36.9418 123.044 36.6591 122.766 36.4545C122.487 36.25 122.144 36.1477 121.735 36.1477C121.309 36.1477 120.953 36.2557 120.669 36.4716C120.388 36.6875 120.176 36.9773 120.034 37.3409C119.895 37.7045 119.826 38.108 119.826 38.5511C119.826 39.0057 119.897 39.4077 120.039 39.7571C120.184 40.1037 120.397 40.3764 120.678 40.5753C120.962 40.7713 121.314 40.8693 121.735 40.8693Z" fill="#F6F8FA"/>
<path d="M127.445 37.9375V41.875H126.439V33.1477H127.445V36.3523H127.53C127.684 36.0142 127.914 35.7457 128.22 35.5469C128.53 35.3452 128.942 35.2443 129.456 35.2443C129.902 35.2443 130.293 35.3338 130.628 35.5128C130.963 35.6889 131.223 35.9602 131.408 36.3267C131.595 36.6903 131.689 37.1534 131.689 37.7159V41.875H130.684V37.7841C130.684 37.2642 130.549 36.8622 130.279 36.5781C130.012 36.2912 129.641 36.1477 129.166 36.1477C128.837 36.1477 128.541 36.2173 128.28 36.3565C128.022 36.4957 127.817 36.6989 127.666 36.9659C127.519 37.233 127.445 37.5568 127.445 37.9375Z" fill="#F6F8FA"/>
<path d="M136.376 35.3295V36.1818H132.984V35.3295H136.376ZM133.972 33.7614H134.978V40C134.978 40.2841 135.019 40.4972 135.101 40.6392C135.187 40.7784 135.295 40.8722 135.425 40.9205C135.559 40.9659 135.699 40.9886 135.847 40.9886C135.958 40.9886 136.049 40.983 136.12 40.9716C136.191 40.9574 136.248 40.946 136.29 40.9375L136.495 41.8409C136.427 41.8665 136.332 41.892 136.209 41.9176C136.087 41.946 135.932 41.9602 135.745 41.9602C135.461 41.9602 135.182 41.8991 134.91 41.777C134.64 41.6548 134.415 41.4688 134.236 41.2188C134.06 40.9688 133.972 40.6534 133.972 40.2727V33.7614Z" fill="#F6F8FA"/>
<g clip-path="url(#clip2_17395_113912)">
<path d="M149.609 7.26C157.829 19.92 155.489 37.62 142.949 47.16C142.709 47.4 142.589 47.7 142.709 47.88C142.829 48.06 143.189 48.06 143.429 47.82C149.379 43.1109 153.307 36.3076 154.409 28.8C155.549 21.24 153.869 13.56 149.609 7.26ZM148.949 42.9C150.689 44.4 154.169 43.14 155.909 39.66C153.809 38.64 150.989 40.26 148.949 42.9ZM147.089 35.04C145.949 37.38 145.949 40.32 147.689 41.88C149.729 39.24 149.129 36 147.089 35.04ZM152.189 37.68C154.169 38.88 157.289 36.96 158.309 33.24C156.089 32.7 153.689 34.8 152.189 37.68ZM148.769 30.48C148.109 33 148.709 35.88 150.749 36.96H150.809C152.249 34.02 150.989 31.02 148.769 30.48ZM154.289 32.1C156.509 32.82 159.149 30.36 159.449 26.52C157.169 26.4 155.189 28.98 154.289 32.1ZM149.549 25.74C149.369 28.32 150.569 30.96 152.789 31.68V31.62C153.629 28.5 151.889 25.86 149.549 25.74ZM159.269 19.68C156.989 20.1 155.549 22.98 155.309 26.16C157.589 26.46 159.749 23.52 159.269 19.68ZM149.429 20.94C149.789 23.52 151.409 25.8 153.689 26.1L153.749 26.04C153.929 22.86 151.709 20.58 149.429 20.94ZM148.409 16.26C149.189 18.72 151.289 20.64 153.569 20.4C153.209 17.22 150.569 15.42 148.409 16.26ZM157.829 13.02C155.729 13.86 154.829 16.92 155.129 20.04L155.189 20.22H155.249C157.469 19.92 158.969 16.8 157.889 13.2L157.829 13.02ZM146.489 11.76C147.809 14.04 150.149 15.54 152.369 14.88C151.409 11.82 148.469 10.5 146.489 11.76ZM155.069 6.72C153.149 7.98 152.909 11.28 153.869 14.4C156.089 13.74 157.049 10.14 155.069 6.72ZM143.669 7.68C145.469 9.72 148.109 10.74 150.149 9.66C148.529 6.78 145.289 6.06 143.669 7.68ZM151.109 0.96C149.429 2.64 149.909 6 151.529 8.82C153.509 7.74 153.749 4.02 151.109 0.96ZM142.709 0C143.789 2.82 146.069 5.04 148.829 6.12C148.829 3.24 145.709 0.06 142.709 0Z" fill="#00AA45"/>
</g>
</g>
<defs>
<clipPath id="clip0_17395_113912">
<rect x="0.224609" width="159.225" height="48" rx="8" fill="white"/>
</clipPath>
<clipPath id="clip1_17395_113912">
<rect width="16.8" height="48" fill="white" transform="translate(0.224609)"/>
</clipPath>
<clipPath id="clip2_17395_113912">
<rect width="16.8" height="48" fill="white" transform="matrix(-1 0 0 1 159.449 0)"/>
</clipPath>
</defs>
</svg>

================
File: public/Launch_SVG_Light.svg
================
<svg width="160" height="48" viewBox="0 0 160 48" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_17395_112294)">
<g clip-path="url(#clip1_17395_112294)">
<path d="M9.84 7.26C1.62 19.92 3.96 37.62 16.5 47.16C16.74 47.4 16.86 47.7 16.74 47.88C16.62 48.06 16.26 48.06 16.02 47.82C10.0699 43.1109 6.14241 36.3076 5.04 28.8C3.9 21.24 5.58 13.56 9.84 7.26ZM10.5 42.9C8.76 44.4 5.28 43.14 3.54 39.66C5.64 38.64 8.46 40.26 10.5 42.9ZM12.36 35.04C13.5 37.38 13.5 40.32 11.76 41.88C9.72 39.24 10.32 36 12.36 35.04ZM7.26 37.68C5.28 38.88 2.16 36.96 1.14 33.24C3.36 32.7 5.76 34.8 7.26 37.68ZM10.68 30.48C11.34 33 10.74 35.88 8.7 36.96H8.64C7.2 34.02 8.46 31.02 10.68 30.48ZM5.16 32.1C2.94 32.82 0.3 30.36 0 26.52C2.28 26.4 4.26 28.98 5.16 32.1ZM9.9 25.74C10.08 28.32 8.88 30.96 6.66 31.68V31.62C5.82 28.5 7.56 25.86 9.9 25.74ZM0.18 19.68C2.46 20.1 3.9 22.98 4.14 26.16C1.86 26.46 -0.3 23.52 0.18 19.68ZM10.02 20.94C9.66 23.52 8.04 25.8 5.76 26.1L5.7 26.04C5.52 22.86 7.74 20.58 10.02 20.94ZM11.04 16.26C10.26 18.72 8.16 20.64 5.88 20.4C6.24 17.22 8.88 15.42 11.04 16.26ZM1.62 13.02C3.72 13.86 4.62 16.92 4.32 20.04L4.26 20.22H4.2C1.98 19.92 0.48 16.8 1.56 13.2L1.62 13.02ZM12.96 11.76C11.64 14.04 9.3 15.54 7.08 14.88C8.04 11.82 10.98 10.5 12.96 11.76ZM4.38 6.72C6.3 7.98 6.54 11.28 5.58 14.4C3.36 13.74 2.4 10.14 4.38 6.72ZM15.78 7.68C13.98 9.72 11.34 10.74 9.3 9.66C10.92 6.78 14.16 6.06 15.78 7.68ZM8.34 0.96C10.02 2.64 9.54 6 7.92 8.82C5.94 7.74 5.7 4.02 8.34 0.96ZM16.74 0C15.66 2.82 13.38 5.04 10.62 6.12C10.62 3.24 13.74 0.06 16.74 0Z" fill="#00AA45"/>
</g>
<path d="M30.1161 20C29.9201 20 29.8221 19.93 29.8221 19.79C29.8221 19.636 29.9621 19.538 30.2421 19.496L30.6621 19.433C30.9701 19.391 31.1801 19.321 31.2921 19.223C31.4181 19.111 31.5091 18.908 31.5651 18.614L34.4211 6.266C34.4911 5.972 34.4911 5.776 34.4211 5.678C34.3511 5.58 34.1761 5.503 33.8961 5.447L33.4761 5.363C33.2941 5.321 33.2031 5.244 33.2031 5.132C33.2031 4.964 33.3291 4.88 33.5811 4.88H37.3821C37.5921 4.88 37.6761 4.964 37.6341 5.132C37.6061 5.258 37.5151 5.335 37.3611 5.363L36.7731 5.447C36.4651 5.489 36.2551 5.566 36.1431 5.678C36.0311 5.79 35.9401 5.993 35.8701 6.287L33.1401 18.047C33.0281 18.551 33.0981 18.915 33.3501 19.139C33.6021 19.363 33.9661 19.475 34.4421 19.475C34.9741 19.475 35.5201 19.272 36.0801 18.866C36.6401 18.46 37.1021 17.823 37.4661 16.955L38.0961 15.485C38.1661 15.303 38.2781 15.212 38.4321 15.212C38.6421 15.212 38.7121 15.331 38.6421 15.569L37.4661 19.517C37.3821 19.839 37.1721 20 36.8361 20H30.1161ZM41.1424 20.189C40.6384 20.189 40.2464 19.972 39.9664 19.538C39.6864 19.104 39.5464 18.467 39.5464 17.627C39.5464 16.829 39.6584 16.031 39.8824 15.233C40.1064 14.421 40.4144 13.651 40.8064 12.923C41.1984 12.195 41.6394 11.551 42.1294 10.991C42.6334 10.431 43.1584 9.99 43.7044 9.668C44.2644 9.332 44.8174 9.164 45.3634 9.164C45.6294 9.164 45.8814 9.22 46.1194 9.332C46.3574 9.43 46.5534 9.591 46.7074 9.815C46.7914 9.941 46.8754 10.004 46.9594 10.004C47.0434 10.004 47.1274 9.941 47.2114 9.815C47.3654 9.591 47.4914 9.451 47.5894 9.395C47.6874 9.325 47.7784 9.29 47.8624 9.29C48.0444 9.29 48.1144 9.388 48.0724 9.584L46.2034 17.627C45.9934 18.537 46.1334 18.992 46.6234 18.992C46.9454 18.992 47.2324 18.775 47.4844 18.341C47.7504 17.907 48.0164 17.235 48.2824 16.325C48.3244 16.171 48.4154 16.094 48.5554 16.094C48.6534 16.094 48.7164 16.136 48.7444 16.22C48.7724 16.304 48.7724 16.402 48.7444 16.514C48.4784 17.83 48.1214 18.775 47.6734 19.349C47.2254 19.909 46.6864 20.189 46.0564 20.189C45.5104 20.189 45.1184 19.958 44.8804 19.496C44.6564 19.034 44.6354 18.404 44.8174 17.606L45.0904 16.451C45.1184 16.353 45.0974 16.297 45.0274 16.283C44.9714 16.269 44.9224 16.304 44.8804 16.388C44.1104 17.802 43.4244 18.789 42.8224 19.349C42.2344 19.909 41.6744 20.189 41.1424 20.189ZM41.6674 19.118C42.0034 19.118 42.3744 18.915 42.7804 18.509C43.1864 18.103 43.5854 17.578 43.9774 16.934C44.3834 16.29 44.7544 15.597 45.0904 14.855C45.4264 14.113 45.6924 13.399 45.8884 12.713C46.0984 12.027 46.2034 11.446 46.2034 10.97C46.2034 10.116 45.9024 9.689 45.3004 9.689C44.9364 9.689 44.5514 9.857 44.1454 10.193C43.7394 10.515 43.3474 10.956 42.9694 11.516C42.6054 12.076 42.2694 12.713 41.9614 13.427C41.6674 14.127 41.4294 14.862 41.2474 15.632C41.0654 16.388 40.9744 17.13 40.9744 17.858C40.9744 18.348 41.0304 18.684 41.1424 18.866C41.2684 19.034 41.4434 19.118 41.6674 19.118ZM51.6347 20.189C51.1167 20.189 50.7597 19.958 50.5637 19.496C50.3817 19.02 50.3957 18.397 50.6057 17.627L52.2647 11.537C52.3767 11.131 52.4047 10.816 52.3487 10.592C52.2927 10.368 52.1667 10.256 51.9707 10.256C51.6487 10.256 51.3197 10.501 50.9837 10.991C50.6617 11.481 50.3817 12.16 50.1437 13.028C50.1017 13.182 50.0107 13.259 49.8707 13.259C49.6747 13.259 49.6117 13.119 49.6817 12.839C50.0037 11.663 50.4237 10.76 50.9417 10.13C51.4737 9.486 52.0547 9.164 52.6847 9.164C53.1887 9.164 53.5247 9.395 53.6927 9.857C53.8607 10.319 53.8327 10.949 53.6087 11.747L51.9287 17.837C51.6627 18.803 51.7537 19.286 52.2017 19.286C52.4817 19.286 52.8037 19.097 53.1677 18.719C53.5317 18.341 53.9097 17.823 54.3017 17.165C54.7077 16.507 55.1067 15.758 55.4987 14.918C55.8907 14.078 56.2477 13.196 56.5697 12.272C56.8917 11.348 57.1577 10.431 57.3677 9.521C57.4097 9.367 57.5077 9.29 57.6617 9.29H58.5017C58.6977 9.29 58.7747 9.381 58.7327 9.563L56.7587 18.005C56.6047 18.663 56.7237 18.992 57.1157 18.992C57.7037 18.992 58.3197 18.103 58.9637 16.325C59.0197 16.143 59.1177 16.052 59.2577 16.052C59.3417 16.052 59.3977 16.087 59.4257 16.157C59.4677 16.227 59.4677 16.318 59.4257 16.43C59.0477 17.62 58.5997 18.544 58.0817 19.202C57.5637 19.86 57.0177 20.189 56.4437 20.189C55.4357 20.189 55.0997 19.454 55.4357 17.984L55.9817 15.653C56.0097 15.555 55.9887 15.499 55.9187 15.485C55.8627 15.471 55.8137 15.506 55.7717 15.59C54.9597 17.27 54.2107 18.46 53.5247 19.16C52.8387 19.846 52.2087 20.189 51.6347 20.189ZM60.9968 19.727L62.9918 11.348C63.0618 11.04 63.0688 10.802 63.0128 10.634C62.9708 10.452 62.8448 10.361 62.6348 10.361C62.3828 10.361 62.1028 10.55 61.7948 10.928C61.5008 11.292 61.1648 11.992 60.7868 13.028C60.7308 13.21 60.6328 13.301 60.4928 13.301C60.2828 13.301 60.2268 13.175 60.3248 12.923C60.6328 11.957 60.9548 11.201 61.2908 10.655C61.6408 10.109 61.9908 9.724 62.3408 9.5C62.6908 9.276 63.0128 9.164 63.3068 9.164C63.7688 9.164 64.0978 9.339 64.2938 9.689C64.4898 10.025 64.4968 10.585 64.3148 11.369L63.7898 13.637C63.7758 13.735 63.7968 13.791 63.8528 13.805C63.9088 13.819 63.9578 13.784 63.9998 13.7C64.5458 12.566 65.0708 11.67 65.5748 11.012C66.0788 10.34 66.5548 9.864 67.0028 9.584C67.4508 9.304 67.8568 9.164 68.2208 9.164C68.7388 9.164 69.1168 9.374 69.3548 9.794C69.5928 10.214 69.5928 10.858 69.3548 11.726L67.7588 17.816C67.6608 18.208 67.6538 18.502 67.7378 18.698C67.8218 18.894 67.9758 18.992 68.1998 18.992C68.4798 18.992 68.7528 18.81 69.0188 18.446C69.2988 18.068 69.5858 17.361 69.8798 16.325C69.9218 16.171 70.0128 16.094 70.1528 16.094C70.2648 16.094 70.3278 16.136 70.3418 16.22C70.3698 16.304 70.3698 16.402 70.3418 16.514C70.0758 17.466 69.7888 18.215 69.4808 18.761C69.1728 19.293 68.8578 19.664 68.5358 19.874C68.2278 20.084 67.9128 20.189 67.5908 20.189C67.0868 20.189 66.7088 19.979 66.4568 19.559C66.2048 19.139 66.1908 18.488 66.4148 17.606L68.0318 11.516C68.1858 10.97 68.2068 10.592 68.0948 10.382C67.9968 10.172 67.8498 10.067 67.6538 10.067C67.3458 10.067 66.9958 10.263 66.6038 10.655C66.2118 11.033 65.8128 11.558 65.4068 12.23C65.0008 12.888 64.6018 13.637 64.2098 14.477C63.8178 15.317 63.4608 16.192 63.1388 17.102C62.8308 18.012 62.5788 18.901 62.3828 19.769C62.3408 19.923 62.2428 20 62.0888 20H61.2278C61.0318 20 60.9548 19.909 60.9968 19.727ZM73.817 20.189C73.047 20.189 72.41 19.874 71.906 19.244C71.402 18.6 71.15 17.781 71.15 16.787C71.15 15.849 71.297 14.932 71.591 14.036C71.899 13.126 72.305 12.307 72.809 11.579C73.327 10.837 73.894 10.249 74.51 9.815C75.14 9.381 75.77 9.164 76.4 9.164C77.072 9.164 77.639 9.346 78.101 9.71C78.171 9.766 78.213 9.815 78.227 9.857C78.241 9.885 78.234 9.955 78.206 10.067L77.639 12.818C77.597 13.014 77.506 13.112 77.366 13.112C77.212 13.112 77.121 13.007 77.093 12.797L76.988 11.306C76.946 10.662 76.848 10.242 76.694 10.046C76.554 9.85 76.344 9.752 76.064 9.752C75.672 9.752 75.273 9.948 74.867 10.34C74.461 10.718 74.083 11.236 73.733 11.894C73.397 12.538 73.124 13.259 72.914 14.057C72.718 14.841 72.62 15.639 72.62 16.451C72.62 18.215 73.194 19.097 74.342 19.097C74.888 19.097 75.378 18.845 75.812 18.341C76.26 17.837 76.673 17.053 77.051 15.989C77.093 15.849 77.191 15.779 77.345 15.779C77.429 15.779 77.478 15.814 77.492 15.884C77.506 15.94 77.492 16.059 77.45 16.241C77.31 17.011 77.058 17.69 76.694 18.278C76.33 18.866 75.896 19.335 75.392 19.685C74.902 20.021 74.377 20.189 73.817 20.189ZM84.9593 20.189C84.4553 20.189 84.0773 19.979 83.8253 19.559C83.5733 19.139 83.5593 18.488 83.7833 17.606L85.4003 11.516C85.5543 10.97 85.5753 10.592 85.4633 10.382C85.3653 10.172 85.2183 10.067 85.0223 10.067C84.7143 10.067 84.3643 10.263 83.9723 10.655C83.5943 11.033 83.1953 11.558 82.7753 12.23C82.3693 12.888 81.9703 13.637 81.5783 14.477C81.2003 15.303 80.8503 16.178 80.5283 17.102C80.2063 18.012 79.9473 18.901 79.7513 19.769C79.7093 19.923 79.6113 20 79.4573 20H78.5753C78.3793 20 78.3023 19.909 78.3443 19.727L81.4103 6.56C81.4803 6.308 81.4803 6.133 81.4103 6.035C81.3543 5.937 81.2283 5.881 81.0323 5.867L80.4023 5.804C80.1923 5.79 80.1013 5.699 80.1293 5.531C80.1573 5.405 80.2553 5.328 80.4233 5.3C80.9273 5.216 81.3753 5.118 81.7673 5.006C82.1593 4.88 82.4743 4.719 82.7123 4.523C82.8243 4.439 82.9293 4.397 83.0273 4.397C83.1953 4.397 83.2583 4.502 83.2163 4.712L81.1583 13.637C81.1443 13.735 81.1653 13.791 81.2213 13.805C81.2773 13.819 81.3263 13.784 81.3683 13.7C81.9283 12.552 82.4603 11.649 82.9643 10.991C83.4683 10.333 83.9373 9.864 84.3713 9.584C84.8193 9.304 85.2253 9.164 85.5893 9.164C86.1073 9.164 86.4853 9.374 86.7233 9.794C86.9613 10.214 86.9613 10.858 86.7233 11.726L85.1273 17.816C85.0293 18.208 85.0223 18.502 85.1063 18.698C85.1903 18.894 85.3443 18.992 85.5683 18.992C85.8483 18.992 86.1213 18.81 86.3873 18.446C86.6533 18.068 86.9403 17.361 87.2483 16.325C87.2903 16.171 87.3813 16.094 87.5213 16.094C87.6333 16.094 87.6963 16.136 87.7103 16.22C87.7383 16.304 87.7383 16.402 87.7103 16.514C87.4443 17.466 87.1573 18.215 86.8493 18.761C86.5413 19.293 86.2263 19.664 85.9043 19.874C85.5963 20.084 85.2813 20.189 84.9593 20.189ZM90.8936 20.189C90.1516 20.189 89.5566 19.902 89.1086 19.328C88.6606 18.74 88.4366 17.914 88.4366 16.85C88.4366 15.926 88.5976 15.009 88.9196 14.099C89.2556 13.189 89.6896 12.363 90.2216 11.621C90.7536 10.879 91.3346 10.284 91.9646 9.836C92.6086 9.388 93.2316 9.164 93.8336 9.164C94.4916 9.164 94.9606 9.325 95.2406 9.647C95.5346 9.955 95.6816 10.375 95.6816 10.907C95.6816 11.537 95.4576 12.167 95.0096 12.797C94.5756 13.413 93.9596 13.966 93.1616 14.456C92.3776 14.946 91.4536 15.31 90.3896 15.548C90.0816 15.618 89.9206 15.793 89.9066 16.073C89.8926 16.171 89.8856 16.276 89.8856 16.388C89.8856 16.486 89.8856 16.584 89.8856 16.682C89.8856 17.48 90.0186 18.082 90.2846 18.488C90.5646 18.894 90.9426 19.097 91.4186 19.097C91.9506 19.097 92.4616 18.852 92.9516 18.362C93.4556 17.872 93.8756 17.179 94.2116 16.283C94.2536 16.157 94.3376 16.094 94.4636 16.094C94.5476 16.094 94.5966 16.129 94.6106 16.199C94.6386 16.269 94.6386 16.353 94.6106 16.451C94.1626 17.683 93.6166 18.614 92.9726 19.244C92.3426 19.874 91.6496 20.189 90.8936 20.189ZM90.1166 14.75C90.0886 14.848 90.1026 14.932 90.1586 15.002C90.2286 15.058 90.3126 15.072 90.4106 15.044C91.2786 14.806 92.0066 14.449 92.5946 13.973C93.1826 13.483 93.6236 12.937 93.9176 12.335C94.2256 11.733 94.3796 11.145 94.3796 10.571C94.3796 9.983 94.1486 9.689 93.6866 9.689C93.2806 9.689 92.8396 9.927 92.3636 10.403C91.8876 10.879 91.4466 11.502 91.0406 12.272C90.6346 13.042 90.3266 13.868 90.1166 14.75ZM97.3754 20.189C96.8574 20.189 96.4584 19.972 96.1784 19.538C95.8984 19.104 95.7584 18.467 95.7584 17.627C95.7584 16.829 95.8704 16.031 96.0944 15.233C96.3184 14.421 96.6264 13.651 97.0184 12.923C97.4104 12.195 97.8514 11.551 98.3414 10.991C98.8454 10.431 99.3704 9.99 99.9164 9.668C100.476 9.332 101.029 9.164 101.575 9.164C101.953 9.164 102.282 9.262 102.562 9.458C102.758 9.584 102.877 9.542 102.919 9.332L103.591 6.56C103.661 6.308 103.661 6.133 103.591 6.035C103.535 5.937 103.409 5.881 103.213 5.867L102.583 5.804C102.373 5.79 102.282 5.699 102.31 5.531C102.338 5.405 102.436 5.328 102.604 5.3C103.108 5.216 103.556 5.118 103.948 5.006C104.34 4.88 104.655 4.719 104.893 4.523C105.005 4.439 105.11 4.397 105.208 4.397C105.376 4.397 105.439 4.502 105.397 4.712L102.415 17.627C102.205 18.537 102.345 18.992 102.835 18.992C103.157 18.992 103.444 18.775 103.696 18.341C103.962 17.907 104.228 17.235 104.494 16.325C104.536 16.171 104.627 16.094 104.767 16.094C104.865 16.094 104.928 16.136 104.956 16.22C104.984 16.304 104.984 16.402 104.956 16.514C104.69 17.83 104.319 18.775 103.843 19.349C103.381 19.909 102.835 20.189 102.205 20.189C101.659 20.189 101.267 19.958 101.029 19.496C100.805 19.034 100.784 18.404 100.966 17.606L101.197 16.64C101.225 16.542 101.204 16.486 101.134 16.472C101.078 16.458 101.029 16.493 100.987 16.577C100.315 17.893 99.6784 18.824 99.0764 19.37C98.4744 19.916 97.9074 20.189 97.3754 20.189ZM97.8794 19.118C98.2154 19.118 98.5864 18.915 98.9924 18.509C99.3984 18.103 99.7974 17.578 100.189 16.934C100.595 16.29 100.966 15.597 101.302 14.855C101.638 14.113 101.904 13.399 102.1 12.713C102.31 12.027 102.415 11.446 102.415 10.97C102.415 10.116 102.114 9.689 101.512 9.689C101.148 9.689 100.763 9.857 100.357 10.193C99.9514 10.515 99.5594 10.956 99.1814 11.516C98.8174 12.076 98.4814 12.713 98.1734 13.427C97.8794 14.127 97.6414 14.862 97.4594 15.632C97.2774 16.388 97.1864 17.13 97.1864 17.858C97.1864 18.348 97.2494 18.684 97.3754 18.866C97.5154 19.034 97.6834 19.118 97.8794 19.118ZM112.234 20.189C111.366 20.189 110.68 19.832 110.176 19.118C109.672 18.39 109.42 17.41 109.42 16.178C109.42 15.268 109.567 14.393 109.861 13.553C110.155 12.713 110.54 11.964 111.016 11.306C111.506 10.648 112.045 10.13 112.633 9.752C113.235 9.36 113.837 9.164 114.439 9.164C115.307 9.164 115.993 9.521 116.497 10.235C117.001 10.949 117.253 11.929 117.253 13.175C117.253 14.085 117.106 14.96 116.812 15.8C116.518 16.64 116.126 17.389 115.636 18.047C115.16 18.705 114.621 19.23 114.019 19.622C113.431 20 112.836 20.189 112.234 20.189ZM112.192 19.685C112.64 19.685 113.074 19.468 113.494 19.034C113.928 18.6 114.32 18.026 114.67 17.312C115.02 16.598 115.3 15.807 115.51 14.939C115.72 14.057 115.825 13.175 115.825 12.293C115.825 10.543 115.37 9.668 114.46 9.668C114.026 9.668 113.592 9.885 113.158 10.319C112.724 10.739 112.332 11.306 111.982 12.02C111.646 12.734 111.373 13.532 111.163 14.414C110.953 15.282 110.848 16.157 110.848 17.039C110.848 18.803 111.296 19.685 112.192 19.685ZM118.808 19.727L120.803 11.348C120.873 11.04 120.88 10.802 120.824 10.634C120.782 10.452 120.656 10.361 120.446 10.361C120.194 10.361 119.914 10.55 119.606 10.928C119.312 11.292 118.976 11.992 118.598 13.028C118.542 13.21 118.444 13.301 118.304 13.301C118.094 13.301 118.038 13.175 118.136 12.923C118.444 11.957 118.766 11.201 119.102 10.655C119.452 10.109 119.802 9.724 120.152 9.5C120.502 9.276 120.824 9.164 121.118 9.164C121.58 9.164 121.909 9.339 122.105 9.689C122.301 10.025 122.308 10.585 122.126 11.369L121.601 13.637C121.587 13.735 121.608 13.791 121.664 13.805C121.72 13.819 121.769 13.784 121.811 13.7C122.357 12.566 122.882 11.67 123.386 11.012C123.89 10.34 124.366 9.864 124.814 9.584C125.262 9.304 125.668 9.164 126.032 9.164C126.55 9.164 126.928 9.374 127.166 9.794C127.404 10.214 127.404 10.858 127.166 11.726L125.57 17.816C125.472 18.208 125.465 18.502 125.549 18.698C125.633 18.894 125.787 18.992 126.011 18.992C126.291 18.992 126.564 18.81 126.83 18.446C127.11 18.068 127.397 17.361 127.691 16.325C127.733 16.171 127.824 16.094 127.964 16.094C128.076 16.094 128.139 16.136 128.153 16.22C128.181 16.304 128.181 16.402 128.153 16.514C127.887 17.466 127.6 18.215 127.292 18.761C126.984 19.293 126.669 19.664 126.347 19.874C126.039 20.084 125.724 20.189 125.402 20.189C124.898 20.189 124.52 19.979 124.268 19.559C124.016 19.139 124.002 18.488 124.226 17.606L125.843 11.516C125.997 10.97 126.018 10.592 125.906 10.382C125.808 10.172 125.661 10.067 125.465 10.067C125.157 10.067 124.807 10.263 124.415 10.655C124.023 11.033 123.624 11.558 123.218 12.23C122.812 12.888 122.413 13.637 122.021 14.477C121.629 15.317 121.272 16.192 120.95 17.102C120.642 18.012 120.39 18.901 120.194 19.769C120.152 19.923 120.054 20 119.9 20H119.039C118.843 20 118.766 19.909 118.808 19.727Z" fill="black"/>
<path d="M32.5935 35.7381C32.5935 36.4259 32.4162 37.0212 32.0617 37.5238C31.7125 38.0265 31.2151 38.4153 30.5696 38.6905C29.9294 38.9656 29.1728 39.1032 28.2998 39.1032C27.7178 39.1032 27.186 39.0423 26.7046 38.9206C26.2231 38.7989 25.8024 38.627 25.4427 38.4048L25.5538 37.6984C25.7442 37.8307 25.9506 37.9418 26.1728 38.0317C26.395 38.1164 26.6305 38.1825 26.8792 38.2302C27.1278 38.2725 27.3871 38.2936 27.6569 38.2936C28.1437 38.2936 28.5776 38.1931 28.9585 37.9921C29.3395 37.791 29.6384 37.4947 29.8554 37.1032C30.0723 36.7116 30.1808 36.2354 30.1808 35.6746C30.1808 35.0238 30.0511 34.4603 29.7919 33.9841C29.5379 33.5079 29.1781 33.1376 28.7125 32.873C28.2469 32.6085 27.6993 32.4762 27.0696 32.4762H26.4427V41.4762C26.4427 41.5926 26.4744 41.6931 26.5379 41.7778C26.6014 41.8571 26.7019 41.9074 26.8395 41.9286L27.53 42.0238C27.6622 42.0503 27.7575 42.0952 27.8157 42.1587C27.8739 42.2222 27.903 42.3148 27.903 42.4365C27.903 42.5476 27.8633 42.6376 27.7839 42.7063C27.7099 42.7698 27.5908 42.8016 27.4268 42.8016H23.2839C23.1199 42.8016 22.9982 42.7698 22.9189 42.7063C22.8395 42.6376 22.7998 42.5476 22.7998 42.4365C22.7998 42.2354 22.9109 42.1005 23.1331 42.0317L23.5935 41.9286C23.7204 41.8915 23.8157 41.836 23.8792 41.7619C23.948 41.6878 23.9823 41.5926 23.9823 41.4762V33.0159C23.9823 32.8995 23.948 32.8042 23.8792 32.7302C23.8157 32.6561 23.7204 32.6005 23.5935 32.5635L23.1331 32.4603C22.9109 32.3915 22.7998 32.2566 22.7998 32.0556C22.7998 31.9392 22.8395 31.8492 22.9189 31.7857C22.9982 31.7222 23.1199 31.6905 23.2839 31.6905H27.1331C28.2866 31.6905 29.2707 31.8651 30.0855 32.2143C30.9003 32.5582 31.522 33.037 31.9506 33.6508C32.3792 34.2593 32.5935 34.955 32.5935 35.7381Z" fill="#0D0D0D"/>
<path d="M40.2574 38.1111C40.2574 38.3915 40.178 38.6085 40.0193 38.7619C39.8606 38.91 39.6278 38.9841 39.3209 38.9841H34.3685V38.3809H37.6145C37.8844 38.3809 38.0193 38.2593 38.0193 38.0159C38.0193 37.3175 37.8923 36.7884 37.6383 36.4286C37.3844 36.0635 37.0431 35.881 36.6145 35.881C36.2865 35.881 35.9955 35.9815 35.7415 36.1825C35.4875 36.3836 35.2891 36.672 35.1463 37.0476C35.0034 37.418 34.932 37.8677 34.932 38.3968C34.932 39.418 35.1701 40.1852 35.6463 40.6984C36.1278 41.2116 36.768 41.4682 37.5669 41.4682C38.0325 41.4682 38.4399 41.3757 38.7891 41.1905C39.1436 41.0053 39.4188 40.7407 39.6145 40.3968C39.7098 40.291 39.7838 40.2196 39.8368 40.1825C39.895 40.1455 39.9532 40.127 40.0114 40.127C40.096 40.127 40.1569 40.1667 40.1939 40.246C40.2309 40.3201 40.2494 40.41 40.2494 40.5159C40.2283 40.9603 40.0696 41.373 39.7733 41.754C39.477 42.1296 39.0775 42.4312 38.5748 42.6587C38.0722 42.8862 37.4955 43 36.8447 43C36.0775 43 35.3976 42.8439 34.805 42.5317C34.2124 42.2143 33.7468 41.7725 33.4082 41.2063C33.0749 40.6349 32.9082 39.9683 32.9082 39.2063C32.9082 38.4074 33.0669 37.6984 33.3844 37.0794C33.7071 36.4603 34.1674 35.9762 34.7653 35.627C35.3632 35.2778 36.0775 35.1032 36.9082 35.1032C37.6172 35.1032 38.2203 35.2328 38.7177 35.4921C39.2203 35.746 39.6013 36.1005 39.8606 36.5556C40.1251 37.0053 40.2574 37.5238 40.2574 38.1111Z" fill="#0D0D0D"/>
<path d="M48.4035 38.1111C48.4035 38.3915 48.3241 38.6085 48.1654 38.7619C48.0066 38.91 47.7738 38.9841 47.467 38.9841H42.5146V38.3809H45.7606C46.0304 38.3809 46.1654 38.2593 46.1654 38.0159C46.1654 37.3175 46.0384 36.7884 45.7844 36.4286C45.5304 36.0635 45.1892 35.881 44.7606 35.881C44.4326 35.881 44.1416 35.9815 43.8876 36.1825C43.6336 36.3836 43.4352 36.672 43.2924 37.0476C43.1495 37.418 43.0781 37.8677 43.0781 38.3968C43.0781 39.418 43.3162 40.1852 43.7924 40.6984C44.2738 41.2116 44.914 41.4682 45.713 41.4682C46.1786 41.4682 46.586 41.3757 46.9352 41.1905C47.2897 41.0053 47.5648 40.7407 47.7606 40.3968C47.8558 40.291 47.9299 40.2196 47.9828 40.1825C48.041 40.1455 48.0992 40.127 48.1574 40.127C48.2421 40.127 48.3029 40.1667 48.34 40.246C48.377 40.3201 48.3955 40.41 48.3955 40.5159C48.3744 40.9603 48.2156 41.373 47.9193 41.754C47.623 42.1296 47.2236 42.4312 46.7209 42.6587C46.2183 42.8862 45.6416 43 44.9908 43C44.2236 43 43.5437 42.8439 42.9511 42.5317C42.3585 42.2143 41.8929 41.7725 41.5543 41.2063C41.2209 40.6349 41.0543 39.9683 41.0543 39.2063C41.0543 38.4074 41.213 37.6984 41.5305 37.0794C41.8532 36.4603 42.3135 35.9762 42.9114 35.627C43.5093 35.2778 44.2236 35.1032 45.0543 35.1032C45.7633 35.1032 46.3664 35.2328 46.8638 35.4921C47.3664 35.746 47.7474 36.1005 48.0066 36.5556C48.2712 37.0053 48.4035 37.5238 48.4035 38.1111Z" fill="#0D0D0D"/>
<path d="M52.1051 38.5952C52.1051 37.828 52.2136 37.1852 52.4305 36.6667C52.6474 36.1481 52.9331 35.7593 53.2876 35.5C53.6421 35.2354 54.0231 35.1032 54.4305 35.1032C54.9331 35.1032 55.322 35.246 55.5972 35.5317C55.8723 35.8175 56.0099 36.2275 56.0099 36.7619C56.0099 37.2381 55.912 37.5926 55.7162 37.8254C55.5204 38.0582 55.2665 38.1746 54.9543 38.1746C54.6368 38.1746 54.3961 38.0899 54.2321 37.9206C54.0681 37.7513 53.986 37.5159 53.986 37.2143V36.9286C53.9808 36.7593 53.9411 36.6349 53.867 36.5556C53.7929 36.4709 53.6712 36.4286 53.5019 36.4286C53.3167 36.4286 53.1368 36.5053 52.9622 36.6587C52.7929 36.8122 52.6527 37.045 52.5416 37.3571C52.4358 37.6693 52.3829 38.0688 52.3829 38.5556L52.1051 38.5952ZM52.2559 35.6508L52.3829 37.4524V41.5238C52.3829 41.6772 52.412 41.791 52.4702 41.8651C52.5337 41.9339 52.6448 41.9815 52.8035 42.0079L53.486 42.1111C53.6077 42.1323 53.6977 42.172 53.7559 42.2302C53.8194 42.2884 53.8511 42.3677 53.8511 42.4682C53.8511 42.5741 53.8114 42.6561 53.7321 42.7143C53.658 42.7725 53.5495 42.8016 53.4067 42.8016H49.7003C49.5522 42.8016 49.4437 42.7725 49.3749 42.7143C49.3062 42.6561 49.2718 42.5767 49.2718 42.4762C49.2718 42.3968 49.2956 42.3307 49.3432 42.2778C49.3908 42.2196 49.4649 42.172 49.5654 42.1349L49.8749 42.0556C49.9702 42.0238 50.039 41.9709 50.0813 41.8968C50.1289 41.8175 50.1527 41.6958 50.1527 41.5317V37C50.1527 36.8624 50.1316 36.7645 50.0892 36.7063C50.0522 36.6481 49.9887 36.6111 49.8987 36.5952L49.4781 36.5635C49.3829 36.5423 49.3141 36.5079 49.2718 36.4603C49.2294 36.4127 49.2083 36.3518 49.2083 36.2778C49.2083 36.1878 49.2347 36.1164 49.2876 36.0635C49.3405 36.0106 49.4358 35.9577 49.5734 35.9048L51.0178 35.381C51.2771 35.2804 51.4675 35.2169 51.5892 35.1905C51.7109 35.1587 51.8062 35.1429 51.8749 35.1429C51.9913 35.1429 52.0786 35.1825 52.1368 35.2619C52.195 35.336 52.2347 35.4656 52.2559 35.6508Z" fill="#0D0D0D"/>
<path d="M59.6688 31.5079V41.5317C59.6688 41.6958 59.69 41.8175 59.7323 41.8968C59.7799 41.9709 59.8514 42.0238 59.9466 42.0556L60.2482 42.1349C60.3487 42.1667 60.4228 42.2116 60.4704 42.2698C60.518 42.3227 60.5419 42.3915 60.5419 42.4762C60.5419 42.5767 60.5075 42.6561 60.4387 42.7143C60.3699 42.7725 60.2588 42.8016 60.1053 42.8016H56.9784C56.8302 42.8016 56.7217 42.7725 56.653 42.7143C56.5842 42.6561 56.5498 42.5767 56.5498 42.4762C56.5498 42.3968 56.5736 42.3307 56.6212 42.2778C56.6688 42.2196 56.7429 42.172 56.8434 42.1349L57.153 42.0556C57.2482 42.0185 57.317 41.963 57.3593 41.8889C57.4069 41.8148 57.4307 41.6958 57.4307 41.5317V32.8413C57.4307 32.709 57.4096 32.6138 57.3672 32.5556C57.3302 32.4974 57.2667 32.4603 57.1768 32.4444L56.7561 32.4127C56.6609 32.3862 56.5921 32.3492 56.5498 32.3016C56.5075 32.254 56.4863 32.1931 56.4863 32.119C56.4863 32.0344 56.5128 31.9656 56.5657 31.9127C56.6186 31.8598 56.7138 31.8069 56.8514 31.754L58.3276 31.2143C58.5392 31.1349 58.7059 31.0794 58.8276 31.0476C58.9493 31.0159 59.0551 31 59.145 31C59.3196 31 59.4493 31.0476 59.5339 31.1429C59.6239 31.2328 59.6688 31.3545 59.6688 31.5079Z" fill="#0D0D0D"/>
<path d="M64.4202 35.6429V41.5317C64.4202 41.6958 64.4414 41.8175 64.4837 41.8968C64.5313 41.9709 64.6027 42.0238 64.698 42.0556L64.9996 42.1349C65.1001 42.1667 65.1742 42.2116 65.2218 42.2698C65.2694 42.3227 65.2932 42.3915 65.2932 42.4762C65.2932 42.5767 65.2588 42.6561 65.19 42.7143C65.1213 42.7725 65.0101 42.8016 64.8567 42.8016H61.7297C61.5816 42.8016 61.4731 42.7725 61.4043 42.7143C61.3355 42.6561 61.3012 42.5767 61.3012 42.4762C61.3012 42.3968 61.325 42.3307 61.3726 42.2778C61.4202 42.2196 61.4943 42.172 61.5948 42.1349L61.9043 42.0556C61.9996 42.0185 62.0683 41.963 62.1107 41.8889C62.1583 41.8148 62.1821 41.6958 62.1821 41.5317V36.9841C62.1821 36.8466 62.1609 36.7487 62.1186 36.6905C62.0816 36.6323 62.0181 36.5952 61.9281 36.5794L61.5075 36.5476C61.4123 36.5265 61.3435 36.4921 61.3012 36.4444C61.2588 36.3968 61.2377 36.336 61.2377 36.2619C61.2377 36.172 61.2615 36.1005 61.3091 36.0476C61.362 35.9947 61.4599 35.9418 61.6027 35.8889L63.0789 35.3492C63.2853 35.2751 63.4493 35.2222 63.571 35.1905C63.698 35.1587 63.8038 35.1429 63.8885 35.1429C64.0683 35.1429 64.2006 35.1905 64.2853 35.2857C64.3752 35.3757 64.4202 35.4947 64.4202 35.6429ZM63.1265 33.9286C62.7033 33.9286 62.362 33.8201 62.1027 33.6032C61.8488 33.381 61.7218 33.0926 61.7218 32.7381C61.7218 32.3836 61.8488 32.1005 62.1027 31.8889C62.362 31.672 62.7033 31.5635 63.1265 31.5635C63.5551 31.5635 63.8964 31.672 64.1504 31.8889C64.4096 32.1005 64.5392 32.3836 64.5392 32.7381C64.5392 33.0926 64.4096 33.381 64.1504 33.6032C63.8964 33.8201 63.5551 33.9286 63.1265 33.9286Z" fill="#0D0D0D"/>
<path d="M69.1247 35.8175C68.7596 35.8175 68.4739 35.9101 68.2675 36.0952C68.0665 36.2751 67.966 36.5053 67.966 36.7857C67.966 36.9603 68.003 37.119 68.0771 37.2619C68.1564 37.3995 68.3046 37.5265 68.5215 37.6429C68.7384 37.7593 69.0559 37.8677 69.4739 37.9683C70.2887 38.1376 70.9183 38.3492 71.3628 38.6032C71.8072 38.8571 72.1167 39.1508 72.2913 39.4841C72.466 39.8122 72.5533 40.1799 72.5533 40.5873C72.5533 41.3227 72.294 41.91 71.7755 42.3492C71.257 42.7831 70.503 43 69.5136 43C69.1644 43 68.8787 42.9682 68.6564 42.9048C68.4342 42.8466 68.2517 42.7884 68.1088 42.7302C67.966 42.6667 67.839 42.6349 67.7279 42.6349C67.6167 42.6349 67.5242 42.6667 67.4501 42.7302C67.3813 42.7884 67.3152 42.8466 67.2517 42.9048C67.1882 42.9682 67.1035 43 66.9977 43C66.9025 43 66.831 42.9735 66.7834 42.9206C66.7358 42.8677 66.6908 42.7698 66.6485 42.627L66.1247 41.0317C66.0665 40.8466 66.048 40.6958 66.0691 40.5794C66.0956 40.463 66.167 40.3809 66.2834 40.3333C66.4051 40.291 66.5109 40.2936 66.6009 40.3413C66.6908 40.3836 66.7755 40.4656 66.8548 40.5873C67.0929 41 67.3469 41.3307 67.6167 41.5794C67.8866 41.8227 68.1697 42 68.466 42.1111C68.7675 42.2222 69.0744 42.2778 69.3866 42.2778C69.8416 42.2778 70.1802 42.1852 70.4025 42C70.63 41.8148 70.7437 41.5688 70.7437 41.2619C70.7437 41.0767 70.6961 40.91 70.6009 40.7619C70.5056 40.6085 70.3284 40.4709 70.0691 40.3492C69.8099 40.2222 69.4342 40.1032 68.9421 39.9921C68.2596 39.8439 67.7146 39.6534 67.3072 39.4206C66.9051 39.1825 66.6141 38.8968 66.4342 38.5635C66.2596 38.2302 66.1723 37.8439 66.1723 37.4048C66.1723 36.9444 66.2914 36.5423 66.5294 36.1984C66.7675 35.8545 67.0982 35.5873 67.5215 35.3968C67.9448 35.2011 68.4342 35.1032 68.9898 35.1032C69.3496 35.1032 69.6379 35.1349 69.8548 35.1984C70.0718 35.2619 70.249 35.328 70.3866 35.3968C70.5294 35.4603 70.6591 35.4921 70.7755 35.4921C70.9025 35.4921 71.003 35.4603 71.0771 35.3968C71.1511 35.328 71.2226 35.2619 71.2913 35.1984C71.3601 35.1349 71.4448 35.1032 71.5453 35.1032C71.6247 35.1032 71.6908 35.1323 71.7437 35.1905C71.8019 35.2434 71.8443 35.3386 71.8707 35.4762L72.2596 36.9921C72.2966 37.1878 72.3046 37.3413 72.2834 37.4524C72.2675 37.5635 72.1988 37.6429 72.0771 37.6905C71.9607 37.7381 71.8575 37.7328 71.7675 37.6746C71.6776 37.6164 71.5876 37.5132 71.4977 37.3651C71.1697 36.8042 70.7966 36.4074 70.3787 36.1746C69.966 35.9365 69.548 35.8175 69.1247 35.8175Z" fill="#0D0D0D"/>
<path d="M73.8276 36.0635L73.4625 35.9524C73.3355 35.9101 73.2455 35.8624 73.1926 35.8095C73.1397 35.7513 73.1133 35.6852 73.1133 35.6111C73.1133 35.5053 73.1477 35.4259 73.2164 35.373C73.2905 35.3148 73.3884 35.2857 73.5101 35.2857H73.9942C74.1212 35.2857 74.227 35.2619 74.3117 35.2143C74.3963 35.1667 74.4836 35.082 74.5736 34.9603L75.4387 33.746C75.5498 33.6085 75.6556 33.5079 75.7561 33.4444C75.8567 33.381 75.9572 33.3492 76.0577 33.3492C76.1688 33.3492 76.2561 33.3836 76.3196 33.4524C76.3831 33.5212 76.4149 33.6217 76.4149 33.754V40.5397C76.4149 40.91 76.4863 41.1931 76.6291 41.3889C76.7773 41.5847 76.981 41.6825 77.2403 41.6825C77.436 41.6825 77.5868 41.6455 77.6926 41.5714C77.8037 41.4921 77.891 41.4021 77.9545 41.3016C78.018 41.2011 78.0789 41.1138 78.1371 41.0397C78.2006 40.9603 78.2799 40.918 78.3752 40.9127C78.4545 40.9127 78.5154 40.9391 78.5577 40.9921C78.6053 41.045 78.6291 41.1323 78.6291 41.254C78.6238 41.5556 78.5233 41.836 78.3276 42.0952C78.1371 42.3545 77.8699 42.5661 77.526 42.7302C77.182 42.8889 76.7905 42.9682 76.3514 42.9682C75.6741 42.9682 75.1424 42.7989 74.7561 42.4603C74.3752 42.1164 74.1847 41.6005 74.1847 40.9127V36.5317C74.1847 36.3942 74.1556 36.2936 74.0974 36.2302C74.0445 36.1614 73.9545 36.1058 73.8276 36.0635ZM75.5339 36.0714V35.2857H78.1609C78.2826 35.2857 78.3778 35.3122 78.4466 35.3651C78.5207 35.4127 78.5577 35.4841 78.5577 35.5794C78.5577 35.7169 78.4889 35.8333 78.3514 35.9286C78.2138 36.0238 77.9916 36.0714 77.6847 36.0714H75.5339Z" fill="#0D0D0D"/>
<line x1="83.4893" y1="31.1875" x2="83.4893" y2="42.8125" stroke="#6A737D" stroke-width="0.375" stroke-linecap="round"/>
<path d="M92.6009 36.7955L91.6975 37.0511C91.6407 36.9006 91.5569 36.7543 91.4461 36.6122C91.3382 36.4673 91.1904 36.348 91.0029 36.2543C90.8154 36.1605 90.5754 36.1136 90.2828 36.1136C89.8822 36.1136 89.5484 36.206 89.2813 36.3906C89.0171 36.5724 88.885 36.804 88.885 37.0852C88.885 37.3352 88.9759 37.5327 89.1578 37.6776C89.3396 37.8224 89.6237 37.9432 90.01 38.0398L90.9816 38.2784C91.5668 38.4205 92.0029 38.6378 92.2899 38.9304C92.5768 39.2202 92.7203 39.5938 92.7203 40.0511C92.7203 40.4261 92.6123 40.7614 92.3964 41.0568C92.1833 41.3523 91.885 41.5852 91.5015 41.7557C91.118 41.9261 90.672 42.0114 90.1634 42.0114C89.4958 42.0114 88.9433 41.8665 88.5058 41.5767C88.0683 41.2869 87.7913 40.8636 87.6748 40.3068L88.6294 40.0682C88.7203 40.4205 88.8921 40.6847 89.145 40.8608C89.4007 41.0369 89.7345 41.125 90.1464 41.125C90.6151 41.125 90.9873 41.0256 91.2629 40.8267C91.5413 40.625 91.6805 40.3835 91.6805 40.1023C91.6805 39.875 91.6009 39.6847 91.4418 39.5313C91.2828 39.375 91.0384 39.2585 90.7089 39.1818L89.618 38.9261C89.0186 38.7841 88.5782 38.5639 88.297 38.2656C88.0186 37.9645 87.8794 37.5881 87.8794 37.1364C87.8794 36.767 87.983 36.4403 88.1904 36.1563C88.4007 35.8722 88.6862 35.6491 89.047 35.4872C89.4106 35.3253 89.8225 35.2443 90.2828 35.2443C90.9305 35.2443 91.439 35.3864 91.8083 35.6705C92.1805 35.9545 92.4447 36.3295 92.6009 36.7955Z" fill="#444D56"/>
<path d="M94.2341 44.3295V35.3295H95.2057V36.3693H95.325C95.3989 36.2557 95.5012 36.1108 95.6318 35.9347C95.7654 35.7557 95.9557 35.5966 96.2029 35.4574C96.4529 35.3153 96.7909 35.2443 97.2171 35.2443C97.7682 35.2443 98.254 35.3821 98.6744 35.6577C99.0949 35.9332 99.423 36.3239 99.6588 36.8295C99.8946 37.3352 100.013 37.9318 100.013 38.6193C100.013 39.3125 99.8946 39.9134 99.6588 40.4219C99.423 40.9276 99.0963 41.3196 98.6787 41.598C98.2611 41.8736 97.7796 42.0114 97.2341 42.0114C96.8137 42.0114 96.477 41.9418 96.2242 41.8026C95.9713 41.6605 95.7767 41.5 95.6404 41.321C95.504 41.1392 95.3989 40.9886 95.325 40.8693H95.2398V44.3295H94.2341ZM95.2227 38.6023C95.2227 39.0966 95.2952 39.5327 95.4401 39.9105C95.585 40.2855 95.7966 40.5795 96.075 40.7926C96.3534 41.0028 96.6943 41.108 97.0977 41.108C97.5182 41.108 97.8691 40.9972 98.1503 40.7756C98.4344 40.5511 98.6475 40.25 98.7895 39.8722C98.9344 39.4915 99.0068 39.0682 99.0068 38.6023C99.0068 38.142 98.9358 37.7273 98.7938 37.358C98.6546 36.9858 98.4429 36.6918 98.1588 36.4759C97.8776 36.2571 97.5239 36.1477 97.0977 36.1477C96.6887 36.1477 96.3449 36.2514 96.0665 36.4588C95.7881 36.6634 95.5779 36.9503 95.4358 37.3196C95.2938 37.6861 95.2227 38.1136 95.2227 38.6023Z" fill="#444D56"/>
<path d="M104.206 42.0114C103.615 42.0114 103.096 41.8707 102.65 41.5895C102.207 41.3082 101.861 40.9148 101.611 40.4091C101.363 39.9034 101.24 39.3125 101.24 38.6364C101.24 37.9545 101.363 37.3594 101.611 36.8509C101.861 36.3423 102.207 35.9474 102.65 35.6662C103.096 35.3849 103.615 35.2443 104.206 35.2443C104.797 35.2443 105.314 35.3849 105.757 35.6662C106.203 35.9474 106.549 36.3423 106.797 36.8509C107.047 37.3594 107.172 37.9545 107.172 38.6364C107.172 39.3125 107.047 39.9034 106.797 40.4091C106.549 40.9148 106.203 41.3082 105.757 41.5895C105.314 41.8707 104.797 42.0114 104.206 42.0114ZM104.206 41.108C104.655 41.108 105.024 40.9929 105.314 40.7628C105.603 40.5327 105.818 40.2301 105.957 39.8551C106.096 39.4801 106.166 39.0739 106.166 38.6364C106.166 38.1989 106.096 37.7912 105.957 37.4134C105.818 37.0355 105.603 36.7301 105.314 36.4972C105.024 36.2642 104.655 36.1477 104.206 36.1477C103.757 36.1477 103.388 36.2642 103.098 36.4972C102.808 36.7301 102.593 37.0355 102.454 37.4134C102.315 37.7912 102.245 38.1989 102.245 38.6364C102.245 39.0739 102.315 39.4801 102.454 39.8551C102.593 40.2301 102.808 40.5327 103.098 40.7628C103.388 40.9929 103.757 41.108 104.206 41.108Z" fill="#444D56"/>
<path d="M111.553 35.3295V36.1818H108.161V35.3295H111.553ZM109.15 33.7614H110.156V40C110.156 40.2841 110.197 40.4972 110.279 40.6392C110.364 40.7784 110.472 40.8722 110.603 40.9205C110.737 40.9659 110.877 40.9886 111.025 40.9886C111.136 40.9886 111.227 40.983 111.298 40.9716C111.369 40.9574 111.426 40.946 111.468 40.9375L111.673 41.8409C111.604 41.8665 111.509 41.892 111.387 41.9176C111.265 41.946 111.11 41.9602 110.923 41.9602C110.639 41.9602 110.36 41.8991 110.087 41.777C109.818 41.6548 109.593 41.4688 109.414 41.2188C109.238 40.9688 109.15 40.6534 109.15 40.2727V33.7614Z" fill="#444D56"/>
<path d="M114.212 33.1477V41.875H113.207V33.1477H114.212Z" fill="#444D56"/>
<path d="M116.054 41.875V35.3295H117.06V41.875H116.054ZM116.566 34.2386C116.37 34.2386 116.201 34.1719 116.059 34.0384C115.919 33.9048 115.85 33.7443 115.85 33.5568C115.85 33.3693 115.919 33.2088 116.059 33.0753C116.201 32.9418 116.37 32.875 116.566 32.875C116.762 32.875 116.929 32.9418 117.069 33.0753C117.211 33.2088 117.282 33.3693 117.282 33.5568C117.282 33.7443 117.211 33.9048 117.069 34.0384C116.929 34.1719 116.762 34.2386 116.566 34.2386Z" fill="#444D56"/>
<path d="M121.544 44.4659C121.058 44.4659 120.641 44.4034 120.291 44.2784C119.942 44.1563 119.651 43.9943 119.418 43.7926C119.188 43.5938 119.004 43.3807 118.868 43.1534L119.669 42.5909C119.76 42.7102 119.875 42.8466 120.014 43C120.153 43.1563 120.344 43.2912 120.585 43.4048C120.83 43.5213 121.149 43.5795 121.544 43.5795C122.073 43.5795 122.509 43.4517 122.852 43.196C123.196 42.9403 123.368 42.5398 123.368 41.9943V40.6648H123.283C123.209 40.7841 123.104 40.9318 122.967 41.108C122.834 41.2813 122.641 41.4361 122.388 41.5724C122.138 41.706 121.8 41.7727 121.374 41.7727C120.845 41.7727 120.371 41.6477 119.95 41.3977C119.533 41.1477 119.202 40.7841 118.957 40.3068C118.716 39.8295 118.595 39.25 118.595 38.5682C118.595 37.8977 118.713 37.3139 118.949 36.8168C119.185 36.3168 119.513 35.9304 119.933 35.6577C120.354 35.3821 120.84 35.2443 121.391 35.2443C121.817 35.2443 122.155 35.3153 122.405 35.4574C122.658 35.5966 122.851 35.7557 122.984 35.9347C123.121 36.1108 123.226 36.2557 123.3 36.3693H123.402V35.3295H124.374V42.0625C124.374 42.625 124.246 43.0824 123.99 43.4347C123.737 43.7898 123.396 44.0497 122.967 44.2145C122.541 44.3821 122.067 44.4659 121.544 44.4659ZM121.51 40.8693C121.913 40.8693 122.254 40.777 122.533 40.5923C122.811 40.4077 123.023 40.142 123.168 39.7955C123.313 39.4489 123.385 39.0341 123.385 38.5511C123.385 38.0795 123.314 37.6634 123.172 37.3026C123.03 36.9418 122.82 36.6591 122.541 36.4545C122.263 36.25 121.919 36.1477 121.51 36.1477C121.084 36.1477 120.729 36.2557 120.445 36.4716C120.163 36.6875 119.952 36.9773 119.81 37.3409C119.671 37.7045 119.601 38.108 119.601 38.5511C119.601 39.0057 119.672 39.4077 119.814 39.7571C119.959 40.1037 120.172 40.3764 120.453 40.5753C120.737 40.7713 121.09 40.8693 121.51 40.8693Z" fill="#444D56"/>
<path d="M127.22 37.9375V41.875H126.215V33.1477H127.22V36.3523H127.305C127.459 36.0142 127.689 35.7457 127.996 35.5469C128.305 35.3452 128.717 35.2443 129.232 35.2443C129.678 35.2443 130.068 35.3338 130.403 35.5128C130.739 35.6889 130.999 35.9602 131.183 36.3267C131.371 36.6903 131.465 37.1534 131.465 37.7159V41.875H130.459V37.7841C130.459 37.2642 130.324 36.8622 130.054 36.5781C129.787 36.2912 129.416 36.1477 128.942 36.1477C128.612 36.1477 128.317 36.2173 128.055 36.3565C127.797 36.4957 127.592 36.6989 127.442 36.9659C127.294 37.233 127.22 37.5568 127.22 37.9375Z" fill="#444D56"/>
<path d="M136.151 35.3295V36.1818H132.759V35.3295H136.151ZM133.748 33.7614H134.753V40C134.753 40.2841 134.794 40.4972 134.877 40.6392C134.962 40.7784 135.07 40.8722 135.201 40.9205C135.334 40.9659 135.475 40.9886 135.623 40.9886C135.733 40.9886 135.824 40.983 135.895 40.9716C135.966 40.9574 136.023 40.946 136.066 40.9375L136.27 41.8409C136.202 41.8665 136.107 41.892 135.985 41.9176C135.863 41.946 135.708 41.9602 135.52 41.9602C135.236 41.9602 134.958 41.8991 134.685 41.777C134.415 41.6548 134.191 41.4688 134.012 41.2188C133.836 40.9688 133.748 40.6534 133.748 40.2727V33.7614Z" fill="#444D56"/>
<g clip-path="url(#clip2_17395_112294)">
<path d="M149.385 7.26C157.605 19.92 155.265 37.62 142.725 47.16C142.485 47.4 142.365 47.7 142.485 47.88C142.605 48.06 142.965 48.06 143.205 47.82C149.155 43.1109 153.082 36.3076 154.185 28.8C155.325 21.24 153.645 13.56 149.385 7.26ZM148.725 42.9C150.465 44.4 153.945 43.14 155.685 39.66C153.585 38.64 150.765 40.26 148.725 42.9ZM146.865 35.04C145.725 37.38 145.725 40.32 147.465 41.88C149.505 39.24 148.905 36 146.865 35.04ZM151.965 37.68C153.945 38.88 157.065 36.96 158.085 33.24C155.865 32.7 153.465 34.8 151.965 37.68ZM148.545 30.48C147.885 33 148.485 35.88 150.525 36.96H150.585C152.025 34.02 150.765 31.02 148.545 30.48ZM154.065 32.1C156.285 32.82 158.925 30.36 159.225 26.52C156.945 26.4 154.965 28.98 154.065 32.1ZM149.325 25.74C149.145 28.32 150.345 30.96 152.565 31.68V31.62C153.405 28.5 151.665 25.86 149.325 25.74ZM159.045 19.68C156.765 20.1 155.325 22.98 155.085 26.16C157.365 26.46 159.525 23.52 159.045 19.68ZM149.205 20.94C149.565 23.52 151.185 25.8 153.465 26.1L153.525 26.04C153.705 22.86 151.485 20.58 149.205 20.94ZM148.185 16.26C148.965 18.72 151.065 20.64 153.345 20.4C152.985 17.22 150.345 15.42 148.185 16.26ZM157.605 13.02C155.505 13.86 154.605 16.92 154.905 20.04L154.965 20.22H155.025C157.245 19.92 158.745 16.8 157.665 13.2L157.605 13.02ZM146.265 11.76C147.585 14.04 149.925 15.54 152.145 14.88C151.185 11.82 148.245 10.5 146.265 11.76ZM154.845 6.72C152.925 7.98 152.685 11.28 153.645 14.4C155.865 13.74 156.825 10.14 154.845 6.72ZM143.445 7.68C145.245 9.72 147.885 10.74 149.925 9.66C148.305 6.78 145.065 6.06 143.445 7.68ZM150.885 0.96C149.205 2.64 149.685 6 151.305 8.82C153.285 7.74 153.525 4.02 150.885 0.96ZM142.485 0C143.565 2.82 145.845 5.04 148.605 6.12C148.605 3.24 145.485 0.06 142.485 0Z" fill="#00AA45"/>
</g>
</g>
<defs>
<clipPath id="clip0_17395_112294">
<rect width="159.225" height="48" rx="8" fill="white"/>
</clipPath>
<clipPath id="clip1_17395_112294">
<rect width="16.8" height="48" fill="white"/>
</clipPath>
<clipPath id="clip2_17395_112294">
<rect width="16.8" height="48" fill="white" transform="matrix(-1 0 0 1 159.225 0)"/>
</clipPath>
</defs>
</svg>

================
File: .env.example
================
# Strictly Server side Env variables
GOOGLE_GENERATIVE_AI_API_KEY=
UPSTASH_REDIS_REST_URL=
UPSTASH_REDIS_REST_TOKEN=
AVIATION_STACK_API_KEY=
SANDBOX_TEMPLATE_ID=
TMDB_API_KEY=
YT_ENDPOINT=
EXA_API_KEY=
TRIPADVISOR_API_KEY=
BLOB_READ_WRITE_TOKEN=
ELEVENLABS_API_KEY=
MAPBOX_ACCESS_TOKEN=
FIRECRAWL_API_KEY=
TAVILY_API_KEY=tvly-****
OPENWEATHER_API_KEY=
E2B_API_KEY=e2b_****
GOOGLE_MAPS_API_KEY=

# Client side Env variables
NEXT_PUBLIC_POSTHOG_KEY=
NEXT_PUBLIC_POSTHOG_HOST=
NEXT_PUBLIC_MAPBOX_TOKEN=
NEXT_PUBLIC_GOOGLE_MAPS_API_KEY=

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

e2b.toml
certificates

================
File: .prettierrc
================
{
  "semi": true,
  "singleQuote": true,
  "trailingComma": "all",
  "printWidth": 120,
  "tabWidth": 4,
  "useTabs": false
}

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/(preview)/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}

================
File: debug.md
================
Let's break down this issue and address both the console errors and the \`useChat\` configuration with respect to the Vercel AI SDK guide for Gemini.

\*\*Analysis of the Errors\*\*

1\. \*\*\`content.js:26 Feature is disabled\`\*\*: This message typically originates from a browser extension, most likely a content blocker or privacy-focused extension. It indicates that the extension has intervened and disabled a specific feature it detected on the page. This is likely not directly related to your core application logic but might affect the user experience.

2\. \*\*\`Error while trying to use the following icon from the Manifest: https://mojo.sixtyoneeightyai.com/favicon.ico (Resource size is not correct \- typo in the Manifest?)\`\*\*: This error suggests an issue with your \`manifest.webmanifest\` file, specifically regarding the \`favicon.ico\` declaration. The browser is unable to use the specified icon, likely due to a mismatch in the declared size and the actual size of the icon file.

3\. \*\*\`app-index.tsx:25 Error Object:\`\*\* and \*\*\`Could not load content for webpack://\_N\_E/src/client/app-index.tsx\`\*\*: These errors, combined with the stack trace, point to a problem occurring within your \`useChat\` hook's \`onError\` callback. The "Unsupported URL scheme" error, in particular, is often associated with issues in source maps or module resolution during development. The fact that it can't load content for \`app-index.tsx\` suggests a potential build or bundling issue.

4\. \*\*Vercel Logs\*\*: The Vercel logs you provided indicate that the API routes and static assets are being served correctly (with \`200\` and \`206\` status codes). This aligns with your deduction that the issue is likely client-side.

\*\*Addressing the Errors\*\*

1\. \*\*\`content.js:26\`\*\*:  
    \*   \*\*Action:\*\* Advise users to check their browser extensions. If possible, identify the specific feature being blocked and provide guidance on how to allow it for your site if it's essential for functionality.

2\. \*\*\`manifest.webmanifest\` Icon Error\*\*:  
    \*   \*\*Action:\*\*  
        1\. \*\*Verify Icon Size:\*\* Ensure that your \`favicon.ico\` file actually exists at the specified path and that it conforms to the sizes declared in your \`manifest.webmanifest\`. Use an icon editor or online tool to check the dimensions.  
        2\. \*\*Correct Manifest:\*\* Update the \`sizes\` attribute in your \`manifest.webmanifest\` to accurately reflect the dimensions of your \`favicon.ico\`.  
        3\. \*\*Caching:\*\* Clear your browser cache or use hard reloading to ensure the updated manifest and icon are fetched.

3\. \*\*\`app-index.tsx\` Errors and \`onError\` Callback\*\*:  
    \*   \*\*Action:\*\*  
        1\. \*\*Source Maps:\*\*  
            \*   \*\*Check \`next.config.mjs\`:\*\* You have \`productionBrowserSourceMaps: true\`. This is generally good for debugging in production, but it might be related to the "Unsupported URL scheme" error.  
            \*   \*\*Experiment:\*\* Try temporarily setting \`productionBrowserSourceMaps: false\` in your \`next.config.mjs\` to see if it resolves the source map issue. If it does, you might need to investigate your source map configuration further.  
        2\. \*\*\`onError\` Logic:\*\*  
            \*   \*\*Review:\*\* Carefully examine the code inside your \`onError\` callback. The error is being triggered there. Look for any operations that might be causing issues, especially those involving network requests or DOM manipulation.  
            \*   \*\*Simplify:\*\* Try commenting out parts of the \`onError\` logic to isolate the problematic section.  
        3\. \*\*\`useChat\` Configuration:\*\* (We'll address this in more detail in the next section).  
        4\. \*\*Zod Schemas:\*\* You are using Zod schemas for validation. Ensure that all schemas are correctly defined and that the data received from the API calls conforms to the expected structure.  
        5\. \*\*Error Handling in \`POST\`:\*\* Review the \`POST\` handler in \`app/api/chat/route.ts\`. Make sure that you are handling all potential errors correctly, especially if any \`await\` calls might throw.

\*\*\`useChat\` Configuration and Vercel AI SDK Guide\*\*

Let's analyze your \`useChat\` configuration and how it relates to the Vercel AI SDK guide for using Gemini:

\*\*Your \`useChat\` Configuration:\*\*

\`\`\`typescript  
const { isLoading, input, messages, setInput, append, handleSubmit, setMessages, reload, stop } \= useChat({  
    maxSteps: 8,  
    body: {  
        model: selectedModel,  
        group: selectedGroup,  
    },  
    onFinish: async (message, { finishReason }) \=\> {  
        console.log("\[finish reason\]:", finishReason);  
        if (message.content && finishReason \=== 'stop' || finishReason \=== 'length') {  
            const newHistory \= \[...messages, { role: "user", content: lastSubmittedQueryRef.current }, { role: "assistant", content: message.content }\];  
            const { questions } \= await suggestQuestions(newHistory);  
            setSuggestedQuestions(questions);  
        }  
    },  
    onError: (error: ChatError, context?: ChatErrorContext) \=\> {  
        // ... (Your error handling logic) ...  
    },  
});  
\`\`\`

\*\*Key Points and Recommendations\*\*

1\. \*\*\`maxSteps: 8\`\*\*: This limits the number of steps in a multi-step tool call. If your tool calls involve more than 8 steps, you might need to increase this.

2\. \*\*\`body: { model: selectedModel, group: selectedGroup }\`\*\*:  
    \*   You are correctly passing the \`model\` and \`group\` to your API route.  
    \*   \*\*\`selectedModel\`\*\*: You have \`gemini-2.0-flash-thinking-exp-01-21\` as the default. Ensure this model is available in your environment. The documentation might refer to a different model name.  
    \*   \*\*\`group\`\*\*: This is a custom parameter you are using to select the appropriate tools and system prompt. This is a good approach for organizing your logic.

3\. \*\*\`onFinish\`\*\*:  
    \*   You are correctly handling the \`stop\` and \`length\` finish reasons.  
    \*   You are using \`suggestQuestions\` to generate follow-up questions. This is a good use case.

4\. \*\*\`onError\`\*\*:  
    \*   You are logging the error details, which is good for debugging.  
    \*   You are showing a user-friendly error message using \`toast.error\`.

\*\*Vercel AI SDK Guide for Gemini\*\*

The Vercel AI SDK guide for Gemini provides examples for setting up the provider and using it with the SDK. Here's how your code aligns with the guide:

1\. \*\*Provider Setup:\*\*

    \`\`\`typescript  
    // In your API route (e.g., app/api/chat/route.ts)  
    import { google } from '@ai-sdk/google';

    const model \= google('gemini-2.0-flash-thinking-exp-01-21', { // Or your chosen model  
        apiKey: serverEnv.GEMINI\_API\_KEY,  
        // ... other options  
    });  
    \`\`\`

    \*   You are correctly initializing the \`google\` provider with your API key.  
    \*   \*\*Model Name:\*\* Double-check that \`gemini-2.0-flash-thinking-exp-01-21\` is the correct model name. The guide might use \`gemini-2.0-flash-thinking-exp-01-21\` or a similar name.

2\. \*\*Using the Model with \`streamText\`:\*\*

    \`\`\`typescript  
    import { streamText } from 'ai';

    // ... inside your POST handler ...

    const result \= streamText({  
        model,  
        messages: convertToCoreMessages(messages), // Assuming you have this function  
        // ... other options like temperature, tools, etc.  
    });

    return result.toDataStreamResponse();  
    \`\`\`

    \*   You are using \`streamText\` correctly.  
    \*   \*\*\`convertToCoreMessages\`:\*\* Ensure this function properly transforms your messages into the format expected by the Gemini API.  
    \*   \*\*\`smoothStream\`:\*\* You are using \`smoothStream\` for a smoother streaming experience. This is a good practice.

\*\*Recommendations for Debugging\*\*

1\. \*\*Simplify \`onError\`:\*\* Temporarily remove or comment out parts of your \`onError\` logic to isolate the cause of the "Unsupported URL scheme" error. Start with a minimal \`onError\` that just logs the error.

2\. \*\*Check Source Maps:\*\* If disabling \`productionBrowserSourceMaps\` helps, investigate your source map configuration. Ensure that your source maps are being generated correctly and are accessible to the browser.

3\. \*\*Inspect Network Requests:\*\* Use your browser's developer tools (Network tab) to inspect the requests made by your \`useChat\` hook. Look for any failed requests or unexpected responses.

4\. \*\*Log More in \`POST\` Handler:\*\* Add more \`console.log\` statements to your \`app/api/chat/route.ts\` to track the flow of execution and the values of variables. This will help you pinpoint where errors might be occurring.

5\. \*\*Test with a Minimal Example:\*\* Create a very simple \`useChat\` example that just sends a basic message and receives a response. This will help you determine if the issue is with your core \`useChat\` setup or with something specific to your more complex logic.

6\. \*\*Verify Zod Schema:\*\* Double-check your Zod schemas to ensure they are correctly parsing the data returned by the tools.

\*\*Example of a Minimal \`useChat\` Example\*\*

\`\`\`typescript  
import { useChat } from 'ai/react';

export default function SimpleChat() {  
  const { messages, input, handleInputChange, handleSubmit } \= useChat({  
    api: '/api/chat', // Your API route  
    body: {  
      model: 'gemini-2.0-flash-thinking-exp-01-21', // Use the model name from the guide  
    },  
  });

  return (  
    \<div\>  
      {messages.map((m) \=\> (  
        \<div key={m.id}\>  
          {m.role}: {m.content}  
        \</div\>  
      ))}

      \<form onSubmit={handleSubmit}\>  
        \<input  
          value={input}  
          onChange={handleInputChange}  
          placeholder="Say something..."  
        /\>  
        \<button type="submit"\>Send\</button\>  
      \</form\>  
    \</div\>  
  );  
}  
\`\`\`

\*\*In \`app/api/chat/route.ts\` (Simplified):\*\*

\`\`\`typescript  
import { google } from '@ai-sdk/google';  
import { experimental\_StreamData, streamText } from 'ai';  
import { serverEnv } from '@/env/server';

export async function POST(req: Request) {  
  const { messages, model } \= await req.json();

  const gemini \= google('gemini-2.0-flash-thinking-exp-01-21', {  
    apiKey: serverEnv.GEMINI\_API\_KEY,  
  });

  const result \= await streamText({  
    model: gemini,  
    messages,  
  });

  return result.toDataStreamResponse();  
}  
\`\`\`

By carefully reviewing your code, simplifying your error handling, and comparing your implementation to the Vercel AI SDK guide, you should be able to track down and resolve the bug. Remember to use your browser's developer tools and logging to gain more insights into the problem.

================
File: e2b.Dockerfile
================
# You can use most Debian-based base images
FROM ubuntu:22.04

# Install dependencies and customize sandbox

================
File: LICENSE
================
MIT License

Copyright (c) 2024 Zaid Mukaddam

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

================
File: next.config.mjs
================
// https://env.t3.gg/docs/nextjs#validate-schema-on-build-(recommended)
import { createJiti } from 'jiti'
import { fileURLToPath } from 'node:url'
const jiti = createJiti(fileURLToPath(import.meta.url))

// Import env here to validate during build. Using jiti we can import .ts files :)
jiti.import('./env/server')
jiti.import('./env/client')

/** @type {import('next').NextConfig} */
const nextConfig = {
    transpilePackages: ["geist"],
    async headers() {
        return [
            {
                source: '/(.*)',
                headers: [
                    {
                        key: 'X-Content-Type-Options',
                        value: 'nosniff',
                    },
                    {
                        key: 'X-Frame-Options',
                        value: 'DENY',
                    },
                    {
                        key: 'Referrer-Policy',
                        value: 'strict-origin-when-cross-origin',
                    },
                ],
            },
        ]
    },
    async redirects() {
        return [
            {
                source: '/ph',
                destination: 'https://www.producthunt.com/posts/scira',
                permanent: true,
            },
        ]
    },
    images: {
        dangerouslyAllowSVG: true,
        remotePatterns: [
            {
                protocol: 'https',
                hostname: 'www.google.com',
                port: '',
                pathname: '/s2/favicons',
            },
           
            {
                protocol: 'https',
                hostname: 'metwm7frkvew6tn1.public.blob.vercel-storage.com',
                port: '',
                pathname: "**"
            },
            // upload.wikimedia.org
            {
                protocol: 'https',
                hostname: 'upload.wikimedia.org',
                port: '',
                pathname: '**'
            },
            // media.theresanaiforthat.com
            {
                protocol: 'https',
                hostname: 'media.theresanaiforthat.com',
                port: '',
                pathname: '**'
            },
            // www.uneed.best
            {
                protocol: 'https',
                hostname: 'www.uneed.best',
                port: '',
                pathname: '**'
            },
            // image.tmdb.org
            {
                protocol: 'https',
                hostname: 'image.tmdb.org',
                port: '',
                pathname: '/t/p/original/**'
            },
            // image.tmdb.org
            {
                protocol: 'https',
                hostname: 'image.tmdb.org',
                port: '',
                pathname: '/**'
            },
        ]
    },
    productionBrowserSourceMaps: true,
    webpack: (config, { dev, isServer }) => {
        // Enable better error logging in production
        if (!dev && !isServer) {
            // Use 'source-map' for better debugging but larger bundle size
            config.devtool = 'source-map'
            
            // Optimize source maps
            config.optimization = {
                ...config.optimization,
                minimize: true,
                splitChunks: {
                    chunks: 'all',
                    minSize: 20000,
                    maxSize: 244000,
                    minChunks: 1,
                    maxAsyncRequests: 30,
                    maxInitialRequests: 30,
                    cacheGroups: {
                        defaultVendors: {
                            test: /[\\/]node_modules[\\/]/,
                            priority: -10,
                            reuseExistingChunk: true,
                        },
                        default: {
                            minChunks: 2,
                            priority: -20,
                            reuseExistingChunk: true,
                        },
                    },
                },
            }
        }
        return config
    }
};

export default nextConfig;

================
File: package.json
================
{
  "name": "mojo",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "knip": "knip"
  },
  "dependencies": {
    "@ai-sdk/google": "1.1.9",
    "@ai-sdk/provider": "1.0.7",
    "@e2b/code-interpreter": "^1.0.3",
    "@foobar404/wave": "^2.0.5",
    "@google/generative-ai": "^0.21.0",
    "@mendable/firecrawl-js": "^1.9.7",
    "@openrouter/ai-sdk-provider": "^0.0.6",
    "@phosphor-icons/react": "^2.1.7",
    "@radix-ui/react-accordion": "^1.2.0",
    "@radix-ui/react-collapsible": "^1.1.1",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.1",
    "@radix-ui/react-hover-card": "^1.1.1",
    "@radix-ui/react-icons": "^1.3.0",
    "@radix-ui/react-label": "^2.1.1",
    "@radix-ui/react-navigation-menu": "^1.2.0",
    "@radix-ui/react-popover": "^1.1.1",
    "@radix-ui/react-scroll-area": "^1.1.0",
    "@radix-ui/react-separator": "^1.1.1",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.0",
    "@radix-ui/react-tooltip": "^1.1.2",
    "@t3-oss/env-nextjs": "^0.11.1",
    "@tailwindcss/typography": "^0.5.13",
    "@tavily/core": "^0.0.2",
    "@types/katex": "^0.16.7",
    "@types/mapbox-gl": "^3.4.0",
    "@types/unist": "^3.0.3",
    "@upstash/ratelimit": "^2.0.3",
    "@upstash/redis": "^1.34.2",
    "@vercel/analytics": "^1.3.1",
    "@vercel/blob": "^0.23.4",
    "@vercel/functions": "^1.4.0",
    "@vercel/kv": "3.0.0",
    "ai": "4.1.18",
    "anthropic-vertex-ai": "^1.0.0",
    "cheerio": "^1.0.0",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "date-fns": "^3.6.0",
    "echarts": "^5.5.1",
    "echarts-for-react": "^3.0.2",
    "embla-carousel-autoplay": "^8.3.0",
    "embla-carousel-react": "^8.3.0",
    "exa-js": "^1.3.3",
    "framer-motion": "^11.3.19",
    "geist": "^1.3.1",
    "google-auth-library": "^9.14.1",
    "highlight.js": "^11.10.0",
    "jiti": "^2.4.2",
    "katex": ">=0.16.21",
    "lucide-react": "^0.424.0",
    "luxon": "^3.5.0",
    "mapbox-gl": "^3.7.0",
    "marked-react": "^2.0.0",
    "motion": "^11.13.5",
    "next": "^14.2.21",
    "next-themes": "^0.3.0",
    "nuqs": "^2.3.0",
    "openai": "^4.56.0",
    "react": "^18",
    "react-dom": "^18",
    "react-latex-next": "^3.0.0",
    "react-markdown": "^9.0.1",
    "react-syntax-highlighter": "^15.5.0",
    "react-tweet": "^3.2.1",
    "recharts": "^2.12.7",
    "rehype-katex": "^7.0.1",
    "remark-gfm": "^4.0.0",
    "remark-math": "^6.0.0",
    "sonner": "^1.5.0",
    "tailwind-merge": "^2.4.0",
    "tailwind-scrollbar": "4.0.0-beta.0",
    "tailwindcss-animate": "^1.0.7",
    "unified": "^11.0.5",
    "unist-util-visit": "^5.0.0",
    "vaul": "^1.1.1",
    "zod": "^3.24.1"
  },
  "devDependencies": {
    "@types/google.maps": "^3.55.12",
    "@types/luxon": "^3.4.2",
    "@types/node": "^20.16.11",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@types/react-syntax-highlighter": "^15.5.13",
    "eslint": "^8",
    "eslint-config-next": "14.2.5",
    "knip": "^5.41.1",
    "micromatch": "^4.0.8",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: README.md
================
# Scira

![Scira](/app/opengraph-image.png)

A minimalistic AI-powered search engine that helps you find information on the internet.

## Special Thanks

<div align="center" markdown="1">

  [![Warp](https://github.com/user-attachments/assets/2bda420d-4211-4900-a37e-e3c7056d799c)](https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=scira)<br>
  ### **[Warp, the intelligent terminal](https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=scira)**<br>
  [Available for MacOS and Linux](https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=scira)<br>
  [Visit warp.dev to learn more](https://www.warp.dev/?utm_source=github&utm_medium=referral&utm_campaign=scira)

</div>

## Features

- **AI-powered search**: Get answers to your questions using Anthropic's Models.
- **Web search**: Search the web using Tavily's API.
- **URL Specific search**: Get information from a specific URL.
- **Weather**: Get the current weather for any location using OpenWeather's API.
- **Programming**: Run code snippets in multiple languages using E2B's API.
- **Maps**: Get the location of any place using Google Maps API, Mapbox API, and TripAdvisor API.
- **YouTube Search**: Search for videos on YouTube and get timestamps and transcripts [powered by Exa.AI - the Web Search API](https://exa.ai/).
- **Academic Search**: Search for academic papers [powered by Exa.AI - the Web Search API](https://exa.ai/). 
- **Flight Tracker**: Track flights using AviationStack's API.
- **Trending Movies and TV Shows**: Get information about trending movies and TV shows.
- **Movie or TV Show Search**: Get information about any movie or TV show.

## LLM used
- [xAI's Grok](https://x.ai/grok)

## Built with
- [Next.js](https://nextjs.org/)
- [Tailwind CSS](https://tailwindcss.com/)
- [Vercel AI SDK](https://sdk.vercel.ai/docs)
- [Shadcn/UI](https://ui.shadcn.com/)
- [Exa.AI](https://exa.ai/)
- [Tavily](https://tavily.com/)
- [OpenWeather](https://openweathermap.org/)
- [E2B](https://e2b.dev/)
- [Google Maps](https://developers.google.com/maps)
- [Mapbox](https://www.mapbox.com/)
- [TripAdvisor](https://www.tripadvisor.com/)
- [AviationStack](https://aviationstack.com/)

### Deploy your own

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fzaidmukaddam%2Fscira&env=XAI_API_KEY,UPSTASH_REDIS_REST_URL,UPSTASH_REDIS_REST_TOKEN,AVIATION_STACK_API_KEY,SANDBOX_TEMPLATE_ID,TMDB_API_KEY,NEXT_PUBLIC_POSTHOG_KEY,NEXT_PUBLIC_POSTHOG_HOST,YT_ENDPOINT,EXA_API_KEY,TRIPADVISOR_API_KEY,BLOB_READ_WRITE_TOKEN,MAPBOX_ACCESS_TOKEN,NEXT_PUBLIC_MAPBOX_TOKEN,FIRECRAWL_API_KEY,TAVILY_API_KEY,OPENWEATHER_API_KEY,E2B_API_KEY,GOOGLE_MAPS_API_KEY,NEXT_PUBLIC_GOOGLE_MAPS_API_KEY&envDescription=All%20environment%20variables%20needed%20for%20application)

## Set Scira as your default search engine

1. **Open the Chrome browser settings**:
   - Click on the three vertical dots in the upper right corner of the browser.
   - Select "Settings" from the dropdown menu.

2. **Go to the search engine settings**:
   - In the left sidebar, click on "Search engine."
   - Then select "Manage search engines and site search."

3. **Add a new search engine**:
   - Click on "Add" next to "Site search."

4. **Set the search engine name**:
   - Enter `Scira` in the "Search engine" field.

5. **Set the search engine URL**:
   - Enter `https://scira.how?q=%s` in the "URL with %s in place of query" field.

6. **Set the search engine shortcut**:
   - Enter `sh` in the "Shortcut" field.

7. **Set Default**:
   - Click on the three dots next to the search engine you just added.
   - Select "Make default" from the dropdown menu.

After completing these steps, you should be able to use Scira as your default search engine in Chrome.

### Local development

To run the example locally you need to:

1. Sign up for accounts with the AI providers you want to use. OpenAI and Anthropic are required, Tavily is required for the web search feature.
2. Obtain API keys for each provider.
3. Set the required environment variables as shown in the `.env.example` file, but in a new file called `.env.local`.
4. `pnpm install` to install the required dependencies.
5. `pnpm dev` to launch the development server.

# License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";
import { fontFamily } from 'tailwindcss/defaultTheme';

const config = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
	],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      height: {
        screen: '100vh',
        'screen-small': '100svh',
      },
      fontFamily: {
        sans: ['var(--font-geist-sans)', ...fontFamily.sans],
        syne: ['var(--font-syne)'],
        mono: ['var(--font-geist-mono)', ...fontFamily.mono],
        dosis: ['var(--font-dosis)'],
        lato: ['var(--font-lato)'],
      },
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
        "bg-position": {
          "0%": { backgroundPosition: "0% 50%" },
          "100%": { backgroundPosition: "100% 50%" },
        },
        "fade-in": {
          "0%": { opacity: "0" },
          "100%": { opacity: "1" },
        },
        "fade-out": {
          "0%": { opacity: "1" },
          "100%": { opacity: "0" },
        },
        "slide-up": {
          "0%": { transform: "translateY(10px)", opacity: "0" },
          "100%": { transform: "translateY(0)", opacity: "1" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
        "fade-in": "fade-in 0.3s ease-out",
        "fade-out": "fade-out 0.3s ease-out",
        "slide-up": "slide-up 0.3s ease-out",
      },
      boxShadow: {
        'subtle': 'var(--shadow-sm)',
        'elevation': 'var(--shadow-md)',
        'float': 'var(--shadow-lg)',
      },
      typography: {
        DEFAULT: {
          css: {
            maxWidth: '65ch',
            color: 'hsl(var(--foreground))',
            a: {
              color: 'hsl(var(--primary))',
              '&:hover': {
                color: 'hsl(var(--primary))',
              },
            },
            strong: {
              color: 'hsl(var(--foreground))',
            },
            'h1, h2, h3, h4': {
              color: 'hsl(var(--foreground))',
              'scroll-margin-top': '100px',
            },
            code: {
              color: 'hsl(var(--primary))',
            },
            'code::before': {
              content: '""',
            },
            'code::after': {
              content: '""',
            },
            pre: {
              backgroundColor: 'hsl(var(--muted))',
              color: 'hsl(var(--muted-foreground))',
            },
          },
        },
      },
    },
  },
  plugins: [
    require("tailwindcss-animate"),
    require("@tailwindcss/typography"),
    require("tailwind-scrollbar")
  ],
} satisfies Config

export default config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "ESNext",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    },
    "types": ["google.maps"]
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}

================
File: vercel.json
================
{
    "crons": [
        {
            "path": "/api/clean_images",
            "schedule": "0 * * * *"
        }
    ],
    "regions": [
        "iad1",
        "sfo1",
        "bom1"
    ]
}

================
File: public/providers/logos/anthropic.svg
================
<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M54.8717 28L72.392 71.945H82L64.4796 28H54.8717Z" fill="#181818"/>
<path d="M34.5457 54.5553L40.5406 39.1118L46.5355 54.5553H34.5457ZM35.5176 28L18 71.945H27.7948L31.3774 62.7165H49.7044L53.2864 71.945H63.0812L45.5636 28H35.5176Z" fill="#181818"/>
</svg>

================
File: public/providers/logos/azure.svg
================
<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M39.3358 20.0007H58.274L38.6143 78.2504C38.4123 78.8489 38.0276 79.369 37.5144 79.7375C37.0013 80.106 36.3855 80.3042 35.7537 80.3043H21.0151C20.5365 80.3044 20.0647 80.1905 19.6388 79.972C19.2129 79.7536 18.8452 79.4368 18.566 79.048C18.2868 78.6592 18.1042 78.2096 18.0333 77.7362C17.9624 77.2628 18.0052 76.7794 18.1582 76.3258L36.4745 22.0547C36.6765 21.4559 37.0612 20.9355 37.5745 20.5669C38.0879 20.1983 38.7039 20.0008 39.3358 20.0007Z" fill="url(#paint0_linear_279_51)"/>
<path d="M66.8558 59.0708H36.8243C36.5451 59.0705 36.2723 59.1543 36.0414 59.3112C35.8105 59.4682 35.6322 59.6911 35.5298 59.9508C35.4274 60.2105 35.4055 60.4951 35.4671 60.7674C35.5287 61.0397 35.6709 61.2872 35.8752 61.4775L55.1727 79.4891C55.7345 80.0132 56.4743 80.3046 57.2426 80.3045H74.2476L66.8558 59.0708Z" fill="#0078D4"/>
<path d="M39.3356 20.0005C38.6968 19.9981 38.0739 20.1999 37.5579 20.5767C37.042 20.9534 36.66 21.4852 36.4678 22.0945L18.1805 76.2762C18.0172 76.7314 17.966 77.2192 18.0311 77.6984C18.0962 78.1775 18.2757 78.634 18.5546 79.0291C18.8334 79.4242 19.2033 79.7464 19.6329 79.9683C20.0626 80.1902 20.5394 80.3054 21.0229 80.3041H36.1419C36.705 80.2035 37.2313 79.9552 37.6671 79.5847C38.1028 79.2141 38.4324 78.7345 38.6221 78.1949L42.269 67.4471L55.2954 79.5972C55.8413 80.0487 56.5261 80.2983 57.2345 80.3041H74.1762L66.7458 59.0705L45.0852 59.0756L58.3422 20.0005H39.3356Z" fill="url(#paint1_linear_279_51)"/>
<path d="M63.5245 22.0518C63.3228 21.454 62.9386 20.9345 62.4261 20.5665C61.9135 20.1985 61.2985 20.0007 60.6675 20.0007H39.5612C40.1921 20.0008 40.8071 20.1987 41.3196 20.5666C41.8321 20.9346 42.2163 21.454 42.4181 22.0518L60.7352 76.3251C60.8883 76.7787 60.9312 77.2623 60.8604 77.7358C60.7895 78.2093 60.6069 78.6591 60.3277 79.048C60.0486 79.437 59.6808 79.7538 59.2548 79.9724C58.8289 80.191 58.357 80.305 57.8782 80.3051H78.9853C79.464 80.3049 79.9358 80.1908 80.3617 79.9722C80.7875 79.7535 81.1552 79.4367 81.4343 79.0477C81.7134 78.6588 81.8959 78.2091 81.9668 77.7356C82.0376 77.2622 81.9946 76.7787 81.8415 76.3251L63.5245 22.0518Z" fill="url(#paint2_linear_279_51)"/>
<defs>
<linearGradient id="paint0_linear_279_51" x1="46.2382" y1="24.4694" x2="26.5705" y2="82.5729" gradientUnits="userSpaceOnUse">
<stop stop-color="#114A8B"/>
<stop offset="1" stop-color="#0669BC"/>
</linearGradient>
<linearGradient id="paint1_linear_279_51" x1="52.3817" y1="51.547" x2="47.8323" y2="53.0853" gradientUnits="userSpaceOnUse">
<stop stop-opacity="0.3"/>
<stop offset="0.071" stop-opacity="0.2"/>
<stop offset="0.321" stop-opacity="0.1"/>
<stop offset="0.623" stop-opacity="0.05"/>
<stop offset="1" stop-opacity="0"/>
</linearGradient>
<linearGradient id="paint2_linear_279_51" x1="49.8798" y1="22.7748" x2="71.4691" y2="80.2927" gradientUnits="userSpaceOnUse">
<stop stop-color="#3CCBF4"/>
<stop offset="1" stop-color="#2892DF"/>
</linearGradient>
</defs>
</svg>

================
File: public/providers/logos/deepseek.svg
================
<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_4_13)">
<rect width="100" height="100" fill="white"/>
<path fill-rule="evenodd" clip-rule="evenodd" d="M98.9498 19.174C97.8915 18.6573 97.4331 19.6448 96.8165 20.149C96.604 20.3115 96.4248 20.524 96.2456 20.7157C94.6956 22.3698 92.8873 23.4532 90.5248 23.324C87.0706 23.1323 84.1206 24.2157 81.5123 26.8573C80.9581 23.599 79.1165 21.6573 76.3165 20.4073C74.8498 19.7573 73.3665 19.1115 72.3373 17.699C71.6206 16.6948 71.4248 15.574 71.0665 14.474C70.8373 13.8073 70.6081 13.1282 69.8456 13.0157C69.0123 12.8865 68.6873 13.5823 68.3623 14.1657C67.0581 16.549 66.554 19.174 66.604 21.8323C66.7165 27.8157 69.2415 32.5823 74.2623 35.9698C74.8331 36.3573 74.979 36.749 74.7998 37.3157C74.4581 38.4823 74.0498 39.6157 73.6915 40.7865C73.4623 41.5323 73.1206 41.6907 72.3206 41.3698C69.6175 40.2081 67.1621 38.5391 65.0873 36.4531C61.5165 33.0031 58.2915 29.1948 54.2665 26.2115C53.3339 25.5224 52.3763 24.8678 51.3956 24.249C47.2915 20.2615 51.9373 16.9865 53.0123 16.599C54.1373 16.1907 53.3998 14.799 49.7665 14.8157C46.1331 14.8323 42.8081 16.0448 38.5706 17.6657C37.9409 17.9069 37.2931 18.0978 36.6331 18.2365C32.6732 17.4904 28.6233 17.3471 24.6206 17.8115C16.7665 18.6865 10.4956 22.4032 5.88312 28.7407C0.341457 36.3573 -0.96271 45.0157 0.633124 54.0407C2.31229 63.5573 7.17062 71.4365 14.6331 77.5948C22.3748 83.9823 31.2873 87.1115 41.4581 86.5115C47.6331 86.1573 54.5123 85.3282 62.2665 78.7615C64.2248 79.7365 66.2748 80.124 69.6831 80.4157C72.3081 80.6615 74.8331 80.2907 76.7873 79.8823C79.8498 79.2323 79.6373 76.3948 78.5331 75.8782C69.554 71.6948 71.5248 73.399 69.729 72.0198C74.2956 66.6198 81.1706 61.0115 83.8623 42.8407C84.0706 41.3948 83.8915 40.4865 83.8623 39.3198C83.8456 38.6115 84.0081 38.3323 84.8206 38.2532C87.0749 38.0193 89.2618 37.347 91.2581 36.274C97.0748 33.0948 99.4248 27.8782 99.979 21.6198C100.062 20.6615 99.9623 19.6782 98.9498 19.174ZM48.254 75.499C39.5498 68.6573 35.329 66.4032 33.5873 66.499C31.954 66.599 32.2498 68.4615 32.6081 69.6782C32.9831 70.8782 33.4706 71.7031 34.154 72.7573C34.629 73.4532 34.954 74.4907 33.6831 75.2698C30.879 77.0032 26.0081 74.6865 25.779 74.574C20.1081 71.2323 15.3623 66.824 12.0248 60.7948C8.79979 54.9907 6.92479 48.7657 6.61646 42.1198C6.53312 40.5115 7.00396 39.9448 8.60396 39.6532C10.7044 39.2512 12.8566 39.1963 14.9748 39.4907C23.8581 40.7907 31.4165 44.7615 37.7581 51.049C41.3748 54.6323 44.1123 58.9115 46.9331 63.0948C49.9331 67.5365 53.1581 71.7698 57.2665 75.2365C58.7165 76.4532 59.8706 77.3782 60.979 78.0573C57.6373 78.4323 52.0623 78.5157 48.254 75.499ZM52.4206 48.6657C52.4199 48.4587 52.4696 48.2546 52.5654 48.0711C52.6611 47.8877 52.8002 47.7303 52.9704 47.6125C53.1406 47.4948 53.337 47.4203 53.5425 47.3954C53.7479 47.3706 53.9564 47.3961 54.1498 47.4698C54.3963 47.5582 54.6091 47.7214 54.7584 47.9365C54.9078 48.1516 54.9864 48.408 54.9831 48.6698C54.9837 48.839 54.9506 49.0066 54.8857 49.1629C54.8208 49.3192 54.7255 49.461 54.6053 49.58C54.4851 49.6991 54.3424 49.793 54.1855 49.8564C54.0286 49.9197 53.8606 49.9512 53.6915 49.949C53.5235 49.9496 53.3572 49.9166 53.2022 49.8521C53.0471 49.7876 52.9065 49.6929 52.7886 49.5734C52.6706 49.4539 52.5777 49.312 52.5152 49.1562C52.4528 49.0003 52.4179 48.8335 52.4206 48.6657ZM65.379 55.3157C64.5456 55.6532 63.7165 55.9448 62.9206 55.9823C61.7233 56.0241 60.5485 55.6501 59.5956 54.924C58.454 53.9657 57.6373 53.4323 57.2956 51.7657C57.1778 50.9512 57.2004 50.1225 57.3623 49.3157C57.654 47.9532 57.329 47.0782 56.3665 46.2865C55.5873 45.6365 54.5915 45.4573 53.4998 45.4573C53.126 45.4356 52.763 45.3241 52.4415 45.1323C51.9831 44.9073 51.6081 44.3407 51.9665 43.6407C52.0831 43.4157 52.6331 42.8657 52.7665 42.7657C54.2498 41.924 55.9623 42.199 57.5415 42.8323C59.0081 43.4323 60.1165 44.5323 61.7123 46.0907C63.3415 47.9698 63.6373 48.4907 64.5665 49.899C65.2998 51.0032 65.9665 52.1365 66.4206 53.4323C66.6998 54.2448 66.3415 54.9073 65.379 55.3157Z" fill="#4F6BFE"/>
</g>
<defs>
<clipPath id="clip0_4_13">
<rect width="100" height="100" fill="white"/>
</clipPath>
</defs>
</svg>

================
File: public/providers/logos/fireworks.svg
================
<svg width="162" height="162" viewBox="0 0 162 162" fill="none" xmlns="http://www.w3.org/2000/svg">
<path fill-rule="evenodd" clip-rule="evenodd" d="M97.9839 46L81.3322 85.9032L64.6648 46H53.9724L72.2409 89.621C73.7561 93.2606 77.3098 95.6115 81.2697 95.6115C85.2296 95.6115 88.7755 93.2606 90.2985 89.6366L108.676 46H97.9839ZM105.099 106.796L135.56 75.9997L131.405 66.1976L98.1323 99.8994C95.3518 102.719 94.5552 106.874 96.0938 110.514C97.6246 114.122 101.163 116.457 105.107 116.457L105.123 116.473L152.68 116.356L148.525 106.554L105.107 106.796H105.099ZM27.1204 75.9762L31.2755 66.1742L64.5477 99.876C67.3282 102.688 68.1326 106.858 66.5862 110.49C65.0554 114.107 61.5016 116.434 57.573 116.434L10.0156 116.325L10 116.34L14.1551 106.538L57.573 106.78L27.1204 75.9762Z" fill="black"/>
</svg>

================
File: public/providers/logos/google.svg
================
<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_278_14)">
<mask id="mask0_278_14" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="19" y="18" width="63" height="64">
<path d="M80.8182 44.1818H51V56.5455H68.1637C66.5637 64.4 59.8727 68.9091 51 68.9091C40.5273 68.9091 32.0909 60.4727 32.0909 50C32.0909 39.5273 40.5273 31.0909 51 31.0909C55.5091 31.0909 59.5818 32.6909 62.7818 35.3091L72.0909 26C66.4182 21.0545 59.1455 18 51 18C33.2546 18 19 32.2546 19 50C19 67.7455 33.2546 82 51 82C67 82 81.5455 70.3637 81.5455 50C81.5455 48.1091 81.2546 46.0727 80.8182 44.1818Z" fill="white"/>
</mask>
<g mask="url(#mask0_278_14)">
<path d="M16.0909 68.909V31.0908L40.8182 49.9999L16.0909 68.909Z" fill="#FBBC05"/>
</g>
<mask id="mask1_278_14" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="19" y="18" width="63" height="64">
<path d="M80.8182 44.1818H51V56.5455H68.1637C66.5637 64.4 59.8727 68.9091 51 68.9091C40.5273 68.9091 32.0909 60.4727 32.0909 50C32.0909 39.5273 40.5273 31.0909 51 31.0909C55.5091 31.0909 59.5818 32.6909 62.7818 35.3091L72.0909 26C66.4182 21.0545 59.1455 18 51 18C33.2546 18 19 32.2546 19 50C19 67.7455 33.2546 82 51 82C67 82 81.5455 70.3637 81.5455 50C81.5455 48.1091 81.2546 46.0727 80.8182 44.1818Z" fill="white"/>
</mask>
<g mask="url(#mask1_278_14)">
<path d="M16.0909 31.0908L40.8182 49.9999L51 41.1272L85.9091 35.4545V15.0908H16.0909V31.0908Z" fill="#EA4335"/>
</g>
<mask id="mask2_278_14" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="19" y="18" width="63" height="64">
<path d="M80.8182 44.1818H51V56.5455H68.1637C66.5637 64.4 59.8727 68.9091 51 68.9091C40.5273 68.9091 32.0909 60.4727 32.0909 50C32.0909 39.5273 40.5273 31.0909 51 31.0909C55.5091 31.0909 59.5818 32.6909 62.7818 35.3091L72.0909 26C66.4182 21.0545 59.1455 18 51 18C33.2546 18 19 32.2546 19 50C19 67.7455 33.2546 82 51 82C67 82 81.5455 70.3637 81.5455 50C81.5455 48.1091 81.2546 46.0727 80.8182 44.1818Z" fill="white"/>
</mask>
<g mask="url(#mask2_278_14)">
<path d="M16.0909 68.909L59.7273 35.4545L71.2182 36.909L85.9091 15.0908V84.909H16.0909V68.909Z" fill="#34A853"/>
</g>
<mask id="mask3_278_14" style="mask-type:luminance" maskUnits="userSpaceOnUse" x="19" y="18" width="63" height="64">
<path d="M80.8182 44.1818H51V56.5455H68.1637C66.5637 64.4 59.8727 68.9091 51 68.9091C40.5273 68.9091 32.0909 60.4727 32.0909 50C32.0909 39.5273 40.5273 31.0909 51 31.0909C55.5091 31.0909 59.5818 32.6909 62.7818 35.3091L72.0909 26C66.4182 21.0545 59.1455 18 51 18C33.2546 18 19 32.2546 19 50C19 67.7455 33.2546 82 51 82C67 82 81.5455 70.3637 81.5455 50C81.5455 48.1091 81.2546 46.0727 80.8182 44.1818Z" fill="white"/>
</mask>
<g mask="url(#mask3_278_14)">
<path d="M85.9091 84.909L40.8182 49.9999L35 45.6363L85.9091 31.0908V84.909Z" fill="#4285F4"/>
</g>
</g>
<defs>
<clipPath id="clip0_278_14">
<rect width="64" height="64" fill="white" transform="translate(18 18)"/>
</clipPath>
</defs>
</svg>

================
File: public/providers/logos/groq.svg
================
<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="100" height="100" fill="#F55036"/>
<g clip-path="url(#clip0_4_12)">
<path d="M50.0502 10.0009C34.9224 9.87911 22.5475 22.0105 22.4013 37.1382C22.2551 52.266 34.411 64.641 49.5386 64.7872C49.7092 64.7872 49.8796 64.7872 50.0502 64.7872H59.0636V54.5314H50.0502C40.5984 54.6532 32.8518 47.0772 32.73 37.6254C32.6082 28.1737 40.1842 20.4271 49.636 20.3053C49.7578 20.3053 49.904 20.3053 50.0258 20.3053C59.4532 20.3053 67.1754 27.9788 67.1754 37.4306V62.6434C67.1754 72.0222 59.5508 79.6468 50.1964 79.7686C45.714 79.72 41.451 77.9416 38.2842 74.7504L31.0248 81.9854C36.0674 87.0524 42.8882 89.927 50.0258 90H50.3912C65.324 89.7808 77.3336 77.6738 77.4068 62.7408V36.7242C77.0414 21.8644 64.8856 10.0253 50.0502 10.0009Z" fill="white"/>
</g>
<defs>
<clipPath id="clip0_4_12">
<rect width="80" height="80" fill="white" transform="translate(10 10)"/>
</clipPath>
</defs>
</svg>

================
File: public/providers/logos/ollama.svg
================
<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_278_45)">
<path d="M36.5389 18.018C35.9417 18.1145 35.2251 18.4268 34.7197 18.8127C33.19 19.975 32.0047 22.442 31.504 25.5154C31.3156 26.6776 31.187 28.2901 31.187 29.5214C31.187 30.973 31.357 32.829 31.6004 34.1107C31.6556 34.3955 31.6831 34.6482 31.6602 34.6666C31.6418 34.685 31.4167 34.8687 31.164 35.0708C30.3003 35.7599 29.3126 36.8212 28.6327 37.7905C27.328 39.6419 26.4827 41.746 26.129 44.0245C25.9912 44.925 25.9544 46.7442 26.0647 47.6446C26.3082 49.7211 26.9329 51.476 28.0033 53.0839L28.3525 53.603L28.2514 53.773C27.5348 54.9766 26.9238 56.7178 26.6389 58.3899C26.4138 59.713 26.3863 60.0667 26.3863 61.84C26.3863 63.6271 26.4092 63.9809 26.6206 65.2166C26.8732 66.6959 27.3878 68.2624 27.962 69.3053C28.1504 69.6452 28.6098 70.3527 28.6649 70.3895C28.6833 70.3986 28.6281 70.5686 28.5408 70.7661C27.8793 72.2133 27.3142 74.1381 27.08 75.7599C26.9146 76.8715 26.8916 77.2299 26.8916 78.4014C26.8916 79.8944 26.9743 80.6203 27.2867 81.8101L27.3326 81.9846H29.2988H31.2697L31.141 81.7412C30.3463 80.2711 30.2728 77.5423 30.9573 74.8181C31.2697 73.5593 31.6234 72.6359 32.2849 71.3633L32.68 70.5916V70.1184C32.68 69.6774 32.6708 69.6269 32.5284 69.3374C32.4182 69.1169 32.2712 68.9286 32.0093 68.6713C31.5637 68.2395 31.2421 67.7847 30.9848 67.2242C29.8547 64.771 29.6342 61.128 30.429 58.0224C30.7597 56.7269 31.3064 55.5738 31.8807 54.9445C32.2712 54.5126 32.4733 54.0303 32.4733 53.5295C32.4733 53.0104 32.2895 52.5832 31.8761 52.1376C30.6908 50.8696 29.9604 49.326 29.6985 47.5298C29.3264 44.9709 30.0017 42.1823 31.5361 39.9727C33.0384 37.8043 35.147 36.4123 37.5037 36.0402C38.032 35.9529 39.0197 35.9667 39.571 36.0678C40.1729 36.1735 40.5495 36.1412 40.9355 35.9575C41.4132 35.7324 41.6521 35.4521 41.9323 34.809C42.1804 34.2348 42.3734 33.9224 42.8925 33.2746C43.5173 32.4983 44.119 31.9699 45.0838 31.3313C46.1864 30.6101 47.4405 30.0864 48.6901 29.8337C49.1448 29.7418 49.3562 29.728 50.2061 29.728C51.056 29.728 51.2673 29.7418 51.7221 29.8337C53.5551 30.2059 55.3743 31.1522 56.826 32.4936C57.1384 32.783 57.8872 33.711 58.1261 34.097C58.218 34.2485 58.3788 34.5702 58.4798 34.809C58.7601 35.4521 58.999 35.7324 59.4767 35.9575C59.8489 36.1367 60.2393 36.1735 60.8182 36.0769C61.7324 35.9208 62.4353 35.9345 63.3311 36.1183C66.3815 36.7339 69.0369 39.2468 70.2129 42.6142C71.2374 45.5681 70.9479 48.6599 69.4227 51.0212C69.1654 51.4209 68.9082 51.7425 68.5361 52.1376C67.7321 52.9966 67.7321 54.0624 68.5315 54.9445C69.8454 56.3824 70.6677 59.9198 70.4196 63.0391C70.2543 65.0972 69.7259 66.9394 69.0001 67.9822C68.8715 68.166 68.605 68.4783 68.4028 68.6713C68.141 68.9286 67.994 69.1169 67.8837 69.3374C67.7413 69.6269 67.7321 69.6774 67.7321 70.1184V70.5916L68.1272 71.3633C68.7888 72.6359 69.1425 73.5593 69.4549 74.8181C70.1302 77.5055 70.0705 80.1792 69.2987 81.6999C69.2344 81.8285 69.1792 81.9479 69.1792 81.9617C69.1792 81.9755 70.0567 81.9846 71.1317 81.9846H73.0796L73.1301 81.7871C73.1577 81.6815 73.2036 81.5207 73.2265 81.4288C73.2771 81.2267 73.3781 80.6295 73.4609 80.0552C73.539 79.4764 73.539 77.3447 73.4609 76.7016C73.1669 74.3678 72.6753 72.5165 71.8714 70.7661C71.7841 70.5686 71.7289 70.3986 71.7473 70.3895C71.7703 70.3757 71.8989 70.1919 72.0367 69.9852C73.0382 68.4692 73.6538 66.5627 73.9662 64.0452C74.0489 63.3514 74.0489 60.3699 73.9662 59.7038C73.7456 57.9857 73.4792 56.8188 73.0382 55.6381C72.8544 55.1466 72.3675 54.1084 72.1608 53.773L72.0597 53.603L72.4088 53.0839C73.4792 51.476 74.104 49.7211 74.3475 47.6446C74.4577 46.7442 74.421 44.925 74.2832 44.0245C73.9248 41.7413 73.0841 39.6465 71.7795 37.7905C71.0995 36.8212 70.1118 35.7599 69.2482 35.0708C68.9955 34.8687 68.7704 34.685 68.752 34.6666C68.7291 34.6482 68.7566 34.3955 68.8117 34.1107C69.3676 31.2119 69.3492 27.5965 68.7658 24.7711C68.2605 22.3088 67.3417 20.3517 66.1564 19.2216C65.21 18.3212 64.2453 17.9353 63.0876 18.0088C60.4323 18.165 58.2915 21.22 57.4462 26.0345C57.3084 26.8109 57.189 27.7205 57.189 27.9686C57.189 28.065 57.1705 28.1431 57.1476 28.1431C57.1246 28.1431 56.9455 28.0512 56.7525 27.9364C54.7036 26.7236 52.425 26.0758 50.2061 26.0758C47.9872 26.0758 45.7086 26.7236 43.6597 27.9364C43.4667 28.0512 43.2876 28.1431 43.2646 28.1431C43.2416 28.1431 43.2232 28.065 43.2232 27.9686C43.2232 27.7113 43.0992 26.7741 42.966 26.0345C42.1987 21.7115 40.4393 18.8495 38.1009 18.1282C37.7794 18.0318 36.8652 17.9674 36.5389 18.018ZM37.32 21.7575C37.9815 22.2812 38.7165 23.7788 39.1392 25.4556C39.2173 25.7588 39.2999 26.108 39.3229 26.2366C39.3413 26.3607 39.3918 26.6409 39.4332 26.8568C39.6124 27.8307 39.695 28.8828 39.7042 30.1645L39.7088 31.4279L39.3918 31.8964L39.0749 32.3696H38.3352C37.4716 32.3696 36.6125 32.4799 35.7901 32.7004C35.4961 32.7739 35.2113 32.8474 35.1562 32.8612C35.0689 32.8796 35.0551 32.852 35.0046 32.4752C34.7335 30.4309 34.7473 28.1661 35.046 26.2825C35.3767 24.1831 36.1485 22.2812 36.9019 21.7207C37.0811 21.5875 37.1132 21.5921 37.32 21.7575ZM63.5149 21.7253C63.9697 22.0607 64.4704 22.9519 64.8425 24.0912C65.5913 26.3698 65.8027 29.4983 65.4076 32.4752C65.3571 32.852 65.3433 32.8796 65.256 32.8612C65.2009 32.8474 64.916 32.7739 64.622 32.7004C63.7997 32.4799 62.9406 32.3696 62.077 32.3696H61.3373L61.0204 31.8964L60.7034 31.4279L60.7079 30.1645C60.7172 28.382 60.8825 26.9901 61.2776 25.4419C61.6957 23.7788 62.4353 22.2812 63.0922 21.7575C63.299 21.5921 63.3311 21.5875 63.5149 21.7253Z" fill="black"/>
<path d="M49.494 44.8467C48.4971 44.9433 48.2261 44.98 47.7483 45.0765C46.9719 45.2373 45.9336 45.5956 45.2124 45.9494C42.7041 47.1759 40.9768 49.2202 40.4484 51.5861C40.3428 52.0548 40.329 52.2109 40.329 53.0011C40.329 53.7821 40.3428 53.952 40.4439 54.3977C41.1467 57.4894 43.995 59.7727 47.6794 60.1907C48.4787 60.278 51.9334 60.278 52.7328 60.1907C55.6913 59.8553 58.2364 58.252 59.3803 56.0009C59.6834 55.3992 59.8305 55.0086 59.9683 54.3977C60.0694 53.952 60.0832 53.7821 60.0832 53.0011C60.0832 52.2109 60.0694 52.0548 59.9637 51.5861C59.1965 48.1499 55.8613 45.444 51.7726 44.9295C51.2397 44.8652 49.8432 44.81 49.494 44.8467ZM51.2121 47.3459C52.5766 47.4929 53.9502 47.9799 55.0527 48.7149C55.6454 49.11 56.4815 49.9369 56.8398 50.479C57.2808 51.1497 57.5334 51.8342 57.6483 52.6658C57.6988 53.0471 57.6713 53.3365 57.5334 53.952C57.3175 54.8708 56.6468 55.831 55.7418 56.5017C55.3191 56.8095 54.4417 57.2552 53.9042 57.4297C52.8844 57.7559 52.2182 57.8156 49.8385 57.7972C48.2858 57.7834 48.0101 57.7696 47.5645 57.687C46.0439 57.4021 44.8403 56.7957 43.9675 55.8723C43.2599 55.1281 42.9384 54.4482 42.7638 53.3503C42.6857 52.8403 42.8327 51.995 43.1313 51.2829C43.4943 50.4147 44.4314 49.3351 45.3594 48.7149C46.4344 47.9983 47.8494 47.4883 49.1494 47.3505C49.6502 47.2954 50.7114 47.2954 51.2121 47.3459Z" fill="black"/>
<path d="M48.4512 50.6995C48.1021 50.8879 47.8586 51.3656 47.9321 51.7193C48.0147 52.1007 48.3501 52.4866 48.8738 52.8036C49.1541 52.9736 49.1724 52.9965 49.1862 53.1665C49.1954 53.2676 49.1586 53.557 49.1081 53.8143C49.053 54.0669 49.0116 54.3334 49.0116 54.4069C49.0163 54.6044 49.2 54.926 49.3929 55.0822C49.563 55.22 49.5951 55.2246 50.0729 55.2384C50.5093 55.2522 50.6012 55.2429 50.7757 55.1603C51.226 54.9397 51.3408 54.5355 51.1754 53.7591C51.0376 53.1114 51.0652 53.0103 51.4097 52.8127C51.7726 52.6014 52.1586 52.2293 52.2734 51.9766C52.4939 51.4943 52.2917 50.9476 51.8048 50.6949C51.6854 50.6352 51.5383 50.6077 51.3224 50.6077C50.9871 50.6077 50.7712 50.6858 50.3761 50.9384L50.1509 51.0808L50.0086 50.9935C49.4251 50.649 49.3195 50.6077 48.9657 50.6122C48.713 50.6122 48.5752 50.6352 48.4512 50.6995Z" fill="black"/>
<path d="M37.297 45.366C36.4839 45.6232 35.8775 46.2204 35.5651 47.0703C35.4135 47.4747 35.34 48.1132 35.4043 48.4577C35.5559 49.2801 36.2312 50.0289 36.9985 50.2356C37.9632 50.4883 38.6844 50.3229 39.323 49.689C39.6951 49.326 39.8973 49.009 40.0994 48.4945C40.2463 48.1316 40.2556 48.0673 40.2556 47.5527L40.2601 47.0015L40.0672 46.6064C39.7594 45.9816 39.2035 45.5176 38.5604 45.3476C38.1974 45.2557 37.614 45.2604 37.297 45.366Z" fill="black"/>
<path d="M61.8335 45.3524C61.2041 45.5223 60.6436 45.9909 60.345 46.6065L60.1521 47.0016L60.1567 47.5529C60.1567 48.0674 60.1659 48.1317 60.3128 48.4946C60.515 49.0091 60.7172 49.3261 61.0892 49.6891C61.7278 50.323 62.4491 50.4884 63.4139 50.2358C63.9697 50.0887 64.5255 49.6201 64.792 49.0734C65.0217 48.6095 65.0768 48.2741 65.0034 47.7458C64.8334 46.5376 64.1259 45.6601 63.0738 45.3524C62.7661 45.2605 62.1688 45.2605 61.8335 45.3524Z" fill="black"/>
</g>
<defs>
<clipPath id="clip0_278_45">
<rect width="48.4122" height="64" fill="white" transform="translate(26 18)"/>
</clipPath>
</defs>
</svg>

================
File: public/providers/logos/openai-compatible.svg
================
<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<circle cx="50" cy="50" r="32" fill="black"/>
</svg>

================
File: public/providers/logos/openai.svg
================
<svg width="100" height="100" viewBox="0 0 100 100" fill="none" xmlns="http://www.w3.org/2000/svg">
<g clip-path="url(#clip0_278_47)">
<path d="M77.4119 44.1941C78.8639 39.8361 78.3639 35.0621 76.0419 31.0981C72.5499 25.0181 65.5299 21.8901 58.6739 23.3621C55.6239 19.9261 51.2419 17.9721 46.6479 18.0001C39.6399 17.9841 33.4219 22.4961 31.2659 29.1641C26.7639 30.0861 22.8779 32.9041 20.6039 36.8981C17.0859 42.9621 17.8879 50.6061 22.5879 55.8061C21.1359 60.1641 21.6359 64.9381 23.9579 68.9021C27.4499 74.9821 34.4699 78.1101 41.3259 76.6381C44.3739 80.0741 48.7579 82.0281 53.3519 81.9981C60.3639 82.0161 66.5839 77.5001 68.7399 70.8261C73.2419 69.9041 77.1279 67.0861 79.4019 63.0921C82.9159 57.0281 82.1119 49.3901 77.4139 44.1901L77.4119 44.1941ZM53.3559 77.8161C50.5499 77.8201 47.8319 76.8381 45.6779 75.0401C45.7759 74.9881 45.9459 74.8941 46.0559 74.8261L58.7999 67.4661C59.4519 67.0961 59.8519 66.4021 59.8479 65.6521V47.6861L65.2339 50.7961C65.2919 50.8241 65.3299 50.8801 65.3379 50.9441V65.8221C65.3299 72.4381 59.9719 77.8021 53.3559 77.8161ZM27.5879 66.8101C26.1819 64.3821 25.6759 61.5361 26.1579 58.7741C26.2519 58.8301 26.4179 58.9321 26.5359 59.0001L39.2799 66.3601C39.9259 66.7381 40.7259 66.7381 41.3739 66.3601L56.9319 57.3761V63.5961C56.9359 63.6601 56.9059 63.7221 56.8559 63.7621L43.9739 71.2001C38.2359 74.5041 30.9079 72.5401 27.5899 66.8101H27.5879ZM24.2339 38.9921C25.6339 36.5601 27.8439 34.7001 30.4759 33.7341C30.4759 33.8441 30.4699 34.0381 30.4699 34.1741V48.8961C30.4659 49.6441 30.8659 50.3381 31.5159 50.7081L47.0739 59.6901L41.6879 62.8001C41.6339 62.8361 41.5659 62.8421 41.5059 62.8161L28.6219 55.3721C22.8959 52.0561 20.9319 44.7301 24.2319 38.9941L24.2339 38.9921ZM68.4859 49.2901L52.9279 40.3061L58.3139 37.1981C58.3679 37.1621 58.4359 37.1561 58.4959 37.1821L71.3799 44.6201C77.1159 47.9341 79.0819 55.2721 75.7679 61.0081C74.3659 63.4361 72.1579 65.2961 69.5279 66.2641V51.1021C69.5339 50.3541 69.1359 49.6621 68.4879 49.2901H68.4859ZM73.8459 41.2221C73.7519 41.1641 73.5859 41.0641 73.4679 40.9961L60.7239 33.6361C60.0779 33.2581 59.2779 33.2581 58.6299 33.6361L43.0719 42.6201V36.4001C43.0679 36.3361 43.0979 36.2741 43.1479 36.2341L56.0299 28.8021C61.7679 25.4921 69.1039 27.4621 72.4119 33.2021C73.8099 35.6261 74.3159 38.4641 73.8419 41.2221H73.8459ZM40.1439 52.3081L34.7559 49.1981C34.6979 49.1701 34.6599 49.1141 34.6519 49.0501V34.1721C34.6559 27.5481 40.0299 22.1801 46.6539 22.1841C49.4559 22.1841 52.1679 23.1681 54.3219 24.9601C54.2239 25.0121 54.0559 25.1061 53.9439 25.1741L41.1999 32.5341C40.5479 32.9041 40.1479 33.5961 40.1519 34.3461L40.1439 52.3041V52.3081ZM43.0699 46.0001L49.9999 41.9981L56.9299 45.9981V54.0001L49.9999 58.0001L43.0699 54.0001V46.0001Z" fill="black"/>
</g>
<defs>
<clipPath id="clip0_278_47">
<rect width="64" height="64" fill="white" transform="translate(18 18)"/>
</clipPath>
</defs>
</svg>

================
File: .env.example
================
# Luma AI
LUMA_API_KEY=

# Model Configuration
NEXT_PUBLIC_AZURE_DEPLOYMENT_NAME=
AZURE_API_KEY=
AZURE_RESOURCE_NAME=

ANTHROPIC_API_KEY=
GOOGLE_GENERATIVE_AI_API_KEY=
GROQ_API_KEY=
OLLAMA_BASE_URL=
OPENAI_API_KEY=
OPENAI_COMPATIBLE_API_KEY=
OPENAI_COMPATIBLE_API_BASE_URL=
FIREWORKS_API_KEY=

NEXT_PUBLIC_OLLAMA_MODEL=

================
File: .env.local.example
================
###############################################################################
# Required Configuration
# These settings are essential for the basic functionality of the system.
###############################################################################

# OpenAI API key retrieved here: https://platform.openai.com/api-keys
OPENAI_API_KEY=[YOUR_OPENAI_API_KEY]

# Search Configuration
TAVILY_API_KEY=[YOUR_TAVILY_API_KEY]  # Get your API key at: https://app.tavily.com/home

###############################################################################
# Optional Features
# Enable these features by uncommenting and configuring the settings below
###############################################################################

#------------------------------------------------------------------------------
# Chat History Storage
# Enable persistent chat history across sessions
#------------------------------------------------------------------------------
# NEXT_PUBLIC_ENABLE_SAVE_CHAT_HISTORY=true  # enable chat history storage

# Redis Configuration (Required if NEXT_PUBLIC_ENABLE_SAVE_CHAT_HISTORY=true)
# Choose between local Redis or Upstash Redis
# OPTION 1: Local Redis
# USE_LOCAL_REDIS=false  # use local Redis
# LOCAL_REDIS_URL=redis://localhost:6379  # local Redis URL (if USE_LOCAL_REDIS=true)

# OPTION 2: Upstash Redis (Recommended for production)
# UPSTASH_REDIS_REST_URL=[YOUR_UPSTASH_REDIS_REST_URL]  # Upstash Redis REST URL (if USE_LOCAL_REDIS=false)
# UPSTASH_REDIS_REST_TOKEN=[YOUR_UPSTASH_REDIS_REST_TOKEN]  # Upstash Redis REST Token (if USE_LOCAL_REDIS=false)

#------------------------------------------------------------------------------
# Additional AI Providers
# Enable alternative AI models by configuring these providers
#------------------------------------------------------------------------------
# Google Generative AI
# GOOGLE_GENERATIVE_AI_API_KEY=[YOUR_GOOGLE_GENERATIVE_AI_API_KEY]

# Anthropic (Claude)
# ANTHROPIC_API_KEY=[YOUR_ANTHROPIC_API_KEY]

# Groq
# GROQ_API_KEY=[YOUR_GROQ_API_KEY]

# Ollama
# OLLAMA_BASE_URL=http://localhost:11434
# NEXT_PUBLIC_OLLAMA_MODEL=[YOUR_MODEL_NAME] (eg: deepseek-r1)
# If you want to use a different model for tool call, set the model name here.
# NEXT_PUBLIC_OLLAMA_TOOL_CALL_MODEL=[YOUR_MODEL_NAME] (eg: phi4) (optional)

# Azure OpenAI
# AZURE_API_KEY=
# AZURE_RESOURCE_NAME=
# NEXT_PUBLIC_AZURE_DEPLOYMENT_NAME=

# DeepSeek
# DEEPSEEK_API_KEY=[YOUR_DEEPSEEK_API_KEY]

# Fireworks
# FIREWORKS_API_KEY=[YOUR_FIREWORKS_API_KEY]

# OpenAI Compatible Model
# NEXT_PUBLIC_OPENAI_COMPATIBLE_MODEL=
# OPENAI_COMPATIBLE_API_KEY=
# OPENAI_COMPATIBLE_API_BASE_URL=

#------------------------------------------------------------------------------
# Alternative Search Providers
# Configure different search backends (default: Tavily)
#------------------------------------------------------------------------------
# SEARCH_API=searxng  # Available options: tavily, searxng, exa

# SearXNG Configuration (Required if SEARCH_API=searxng)
# SEARXNG_API_URL=http://localhost:8080  # Replace with your local SearXNG API URL or docker http://searxng:8080
# SEARXNG_SECRET=""  # generate a secret key e.g. openssl rand -base64 32
# SEARXNG_PORT=8080
# SEARXNG_BIND_ADDRESS=0.0.0.0
# SEARXNG_IMAGE_PROXY=true
# SEARXNG_LIMITER=false
# SEARXNG_DEFAULT_DEPTH=basic
# SEARXNG_MAX_RESULTS=50
# SEARXNG_ENGINES=google,bing,duckduckgo,wikipedia
# SEARXNG_TIME_RANGE=None
# SEARXNG_SAFESEARCH=0

#------------------------------------------------------------------------------
# Additional Features
# Enable extra functionality as needed
#------------------------------------------------------------------------------
# NEXT_PUBLIC_ENABLE_SHARE=true  # Enable sharing of chat conversations
# SERPER_API_KEY=[YOUR_SERPER_API_KEY]  # Enable video search capability
# JINA_API_KEY=[YOUR_JINA_API_KEY]  # Alternative to Tavily for retrieve tool

================
File: .eslintrc.json
================
{
  "extends": "next/core-web-vitals"
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts

================
File: CODE_OF_CONDUCT.md
================
# Code of Conduct

## Our Pledge

We as members, contributors, and leaders pledge to make participation in our
community a harassment-free experience for everyone, regardless of age, body
size, visible or invisible disability, ethnicity, sex characteristics, gender
identity and expression, level of experience, education, socio-economic status,
nationality, personal appearance, race, religion, or sexual identity
and orientation.

We pledge to act and interact in ways that contribute to an open, welcoming,
diverse, inclusive, and healthy community.

## Our Standards

Examples of behavior that contributes to a positive environment for our
community include:

- Demonstrating empathy and kindness toward other people
- Being respectful of differing opinions, viewpoints, and experiences
- Giving and gracefully accepting constructive feedback
- Accepting responsibility and apologizing to those affected by our mistakes,
  and learning from the experience
- Focusing on what is best not just for us as individuals, but for the
  overall community

Examples of unacceptable behavior include:

- The use of sexualized language or imagery, and sexual attention or
  advances of any kind
- Trolling, insulting or derogatory comments, and personal or political attacks
- Public or private harassment
- Publishing others' private information, such as a physical or email
  address, without their explicit permission
- Other conduct which could reasonably be considered inappropriate in a
  professional setting

## Enforcement Responsibilities

Community leaders are responsible for clarifying and enforcing our standards of
acceptable behavior and will take appropriate and fair corrective action in
response to any behavior that they deem inappropriate, threatening, offensive,
or harmful.

## Scope

This Code of Conduct applies within all community spaces, and also applies when
an individual is officially representing the community in public spaces.

## Enforcement

Instances of abusive, harassing, or otherwise unacceptable behavior may be
reported to the community leaders responsible for enforcement at
[INSERT CONTACT METHOD].
All complaints will be reviewed and investigated promptly and fairly.

## Attribution

This Code of Conduct is adapted from the [Contributor Covenant][homepage],
version 2.0, available at
https://www.contributor-covenant.org/version/2/0/code_of_conduct.html.

[homepage]: https://www.contributor-covenant.org

================
File: components.json
================
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": true,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "app/globals.css",
    "baseColor": "neutral",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}

================
File: CONTRIBUTING.md
================
# Contributing to Morphic

Thank you for your interest in contributing to Morphic! This document provides guidelines and instructions for contributing.

## Code of Conduct

By participating in this project, you are expected to uphold our [Code of Conduct](CODE_OF_CONDUCT.md).

## How to Contribute

### Reporting Issues

- Check if the issue already exists in our [GitHub Issues](https://github.com/miurla/morphic/issues)
- Use the issue templates when creating a new issue
- Provide as much context as possible

### Pull Requests

1. Fork the repository
2. Create a new branch from `main`:
   ```bash
   git checkout -b feat/your-feature-name
   ```
3. Make your changes
4. Commit your changes using conventional commits:
   ```bash
   git commit -m "feat: add new feature"
   ```
5. Push to your fork
6. Open a Pull Request

### Commit Convention

We use conventional commits. Examples:

- `feat: add new feature`
- `fix: resolve issue with X`
- `docs: update README`
- `chore: update dependencies`
- `refactor: improve code structure`

### Development Setup

Follow the [Quickstart](README.md#-quickstart) guide in the README to set up your development environment.

## License

By contributing, you agree that your contributions will be licensed under the Apache-2.0 License.

================
File: docker-compose.yaml
================
# This is a Docker Compose file for setting up the morphic-stack environment.

name: morphic-stack
services:
  morphic:
    build:
      context: . # The build context is the current directory
      dockerfile: Dockerfile
    command: bun dev # Use `bun dev -H 0.0.0.0` to listen on all interfaces
    env_file: .env.local # Load environment variables
    ports:
      - '3000:3000' # Maps port 3000 on the host to port 3000 in the container.
    depends_on:
      - redis
      - searxng

  redis:
    image: redis:alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes

  searxng:
    image: searxng/searxng
    ports:
      - '${SEARXNG_PORT:-8080}:8080'
    env_file: .env.local # can remove if you want to use env variables or in settings.yml
    volumes:
      - ./searxng-limiter.toml:/etc/searxng/limiter.toml
      - ./searxng-settings.yml:/etc/searxng/settings.yml
      - searxng_data:/data

volumes:
  redis_data:
  searxng_data:

================
File: Dockerfile
================
FROM oven/bun:1.1.3-alpine

RUN apk add --no-cache nodejs npm git

WORKDIR /app

COPY package.json bun.lockb ./
RUN bun install

COPY . .

RUN bun next telemetry disable

CMD ["bun", "dev", "-H", "0.0.0.0"]

================
File: LICENSE
================
Apache License
                           Version 2.0, January 2004
                        http://www.apache.org/licenses/

TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION

1.  Definitions.

    "License" shall mean the terms and conditions for use, reproduction,
    and distribution as defined by Sections 1 through 9 of this document.

    "Licensor" shall mean the copyright owner or entity authorized by
    the copyright owner that is granting the License.

    "Legal Entity" shall mean the union of the acting entity and all
    other entities that control, are controlled by, or are under common
    control with that entity. For the purposes of this definition,
    "control" means (i) the power, direct or indirect, to cause the
    direction or management of such entity, whether by contract or
    otherwise, or (ii) ownership of fifty percent (50%) or more of the
    outstanding shares, or (iii) beneficial ownership of such entity.

    "You" (or "Your") shall mean an individual or Legal Entity
    exercising permissions granted by this License.

    "Source" form shall mean the preferred form for making modifications,
    including but not limited to software source code, documentation
    source, and configuration files.

    "Object" form shall mean any form resulting from mechanical
    transformation or translation of a Source form, including but
    not limited to compiled object code, generated documentation,
    and conversions to other media types.

    "Work" shall mean the work of authorship, whether in Source or
    Object form, made available under the License, as indicated by a
    copyright notice that is included in or attached to the work
    (an example is provided in the Appendix below).

    "Derivative Works" shall mean any work, whether in Source or Object
    form, that is based on (or derived from) the Work and for which the
    editorial revisions, annotations, elaborations, or other modifications
    represent, as a whole, an original work of authorship. For the purposes
    of this License, Derivative Works shall not include works that remain
    separable from, or merely link (or bind by name) to the interfaces of,
    the Work and Derivative Works thereof.

    "Contribution" shall mean any work of authorship, including
    the original version of the Work and any modifications or additions
    to that Work or Derivative Works thereof, that is intentionally
    submitted to Licensor for inclusion in the Work by the copyright owner
    or by an individual or Legal Entity authorized to submit on behalf of
    the copyright owner. For the purposes of this definition, "submitted"
    means any form of electronic, verbal, or written communication sent
    to the Licensor or its representatives, including but not limited to
    communication on electronic mailing lists, source code control systems,
    and issue tracking systems that are managed by, or on behalf of, the
    Licensor for the purpose of discussing and improving the Work, but
    excluding communication that is conspicuously marked or otherwise
    designated in writing by the copyright owner as "Not a Contribution."

    "Contributor" shall mean Licensor and any individual or Legal Entity
    on behalf of whom a Contribution has been received by Licensor and
    subsequently incorporated within the Work.

2.  Grant of Copyright License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    copyright license to reproduce, prepare Derivative Works of,
    publicly display, publicly perform, sublicense, and distribute the
    Work and such Derivative Works in Source or Object form.

3.  Grant of Patent License. Subject to the terms and conditions of
    this License, each Contributor hereby grants to You a perpetual,
    worldwide, non-exclusive, no-charge, royalty-free, irrevocable
    (except as stated in this section) patent license to make, have made,
    use, offer to sell, sell, import, and otherwise transfer the Work,
    where such license applies only to those patent claims licensable
    by such Contributor that are necessarily infringed by their
    Contribution(s) alone or by combination of their Contribution(s)
    with the Work to which such Contribution(s) was submitted. If You
    institute patent litigation against any entity (including a
    cross-claim or counterclaim in a lawsuit) alleging that the Work
    or a Contribution incorporated within the Work constitutes direct
    or contributory patent infringement, then any patent licenses
    granted to You under this License for that Work shall terminate
    as of the date such litigation is filed.

4.  Redistribution. You may reproduce and distribute copies of the
    Work or Derivative Works thereof in any medium, with or without
    modifications, and in Source or Object form, provided that You
    meet the following conditions:

    (a) You must give any other recipients of the Work or
    Derivative Works a copy of this License; and

    (b) You must cause any modified files to carry prominent notices
    stating that You changed the files; and

    (c) You must retain, in the Source form of any Derivative Works
    that You distribute, all copyright, patent, trademark, and
    attribution notices from the Source form of the Work,
    excluding those notices that do not pertain to any part of
    the Derivative Works; and

    (d) If the Work includes a "NOTICE" text file as part of its
    distribution, then any Derivative Works that You distribute must
    include a readable copy of the attribution notices contained
    within such NOTICE file, excluding those notices that do not
    pertain to any part of the Derivative Works, in at least one
    of the following places: within a NOTICE text file distributed
    as part of the Derivative Works; within the Source form or
    documentation, if provided along with the Derivative Works; or,
    within a display generated by the Derivative Works, if and
    wherever such third-party notices normally appear. The contents
    of the NOTICE file are for informational purposes only and
    do not modify the License. You may add Your own attribution
    notices within Derivative Works that You distribute, alongside
    or as an addendum to the NOTICE text from the Work, provided
    that such additional attribution notices cannot be construed
    as modifying the License.

    You may add Your own copyright statement to Your modifications and
    may provide additional or different license terms and conditions
    for use, reproduction, or distribution of Your modifications, or
    for any such Derivative Works as a whole, provided Your use,
    reproduction, and distribution of the Work otherwise complies with
    the conditions stated in this License.

5.  Submission of Contributions. Unless You explicitly state otherwise,
    any Contribution intentionally submitted for inclusion in the Work
    by You to the Licensor shall be under the terms and conditions of
    this License, without any additional terms or conditions.
    Notwithstanding the above, nothing herein shall supersede or modify
    the terms of any separate license agreement you may have executed
    with Licensor regarding such Contributions.

6.  Trademarks. This License does not grant permission to use the trade
    names, trademarks, service marks, or product names of the Licensor,
    except as required for reasonable and customary use in describing the
    origin of the Work and reproducing the content of the NOTICE file.

7.  Disclaimer of Warranty. Unless required by applicable law or
    agreed to in writing, Licensor provides the Work (and each
    Contributor provides its Contributions) on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
    implied, including, without limitation, any warranties or conditions
    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A
    PARTICULAR PURPOSE. You are solely responsible for determining the
    appropriateness of using or redistributing the Work and assume any
    risks associated with Your exercise of permissions under this License.

8.  Limitation of Liability. In no event and under no legal theory,
    whether in tort (including negligence), contract, or otherwise,
    unless required by applicable law (such as deliberate and grossly
    negligent acts) or agreed to in writing, shall any Contributor be
    liable to You for damages, including any direct, indirect, special,
    incidental, or consequential damages of any character arising as a
    result of this License or out of the use or inability to use the
    Work (including but not limited to damages for loss of goodwill,
    work stoppage, computer failure or malfunction, or any and all
    other commercial damages or losses), even if such Contributor
    has been advised of the possibility of such damages.

9.  Accepting Warranty or Additional Liability. While redistributing
    the Work or Derivative Works thereof, You may choose to offer,
    and charge a fee for, acceptance of support, warranty, indemnity,
    or other liability obligations and/or rights consistent with this
    License. However, in accepting such obligations, You may act only
    on Your own behalf and on Your sole responsibility, not on behalf
    of any other Contributor, and only if You agree to indemnify,
    defend, and hold each Contributor harmless for any liability
    incurred by, or claims asserted against, such Contributor by reason
    of your accepting any such warranty or additional liability.

END OF TERMS AND CONDITIONS

APPENDIX: How to apply the Apache License to your work.

      To apply the Apache License to your work, attach the following
      boilerplate notice, with the fields enclosed by brackets "[]"
      replaced with your own identifying information. (Don't include
      the brackets!)  The text should be enclosed in the appropriate
      comment syntax for the file format. We also recommend that a
      file or class name and description of purpose be included on the
      same "printed page" as the copyright notice for easier
      identification within third-party archives.

Copyright 2024 Yoshiki Miura

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

================
File: next.config.mjs
================
/** @type {import('next').NextConfig} */
const nextConfig = {};

export default nextConfig;

================
File: package.json
================
{
  "name": "morphic",
  "version": "0.1.0",
  "private": true,
  "license": "Apache-2.0",
  "scripts": {
    "dev": "next dev --turbo",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@ai-sdk/anthropic": "^1.1.5",
    "@ai-sdk/azure": "^1.1.5",
    "@ai-sdk/deepseek": "^0.1.6",
    "@ai-sdk/fireworks": "^0.1.6",
    "@ai-sdk/google": "^1.1.5",
    "@ai-sdk/groq": "^1.1.6",
    "@ai-sdk/luma": "^0.0.4",
    "@ai-sdk/openai": "^1.1.5",
    "@ai-sdk/replicate": "^0.1.7",
    "@radix-ui/react-alert-dialog": "^1.0.5",
    "@radix-ui/react-avatar": "^1.0.4",
    "@radix-ui/react-checkbox": "^1.0.4",
    "@radix-ui/react-collapsible": "^1.0.3",
    "@radix-ui/react-dialog": "^1.1.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-label": "^2.0.2",
    "@radix-ui/react-popover": "^1.1.5",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-separator": "^1.0.3",
    "@radix-ui/react-slider": "^1.1.2",
    "@radix-ui/react-slot": "^1.0.2",
    "@radix-ui/react-switch": "^1.0.3",
    "@radix-ui/react-toggle": "^1.1.1",
    "@radix-ui/react-tooltip": "^1.0.7",
    "@tailwindcss/typography": "^0.5.12",
    "@upstash/redis": "^1.34.0",
    "ai": "^4.1.9",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.0",
    "cmdk": "1.0.0",
    "embla-carousel-react": "^8.0.0",
    "exa-js": "^1.0.12",
    "framer-motion": "^12.3.1",
    "jsdom": "^22.1.0",
    "katex": "^0.16.10",
    "lucide-react": "^0.474.0",
    "next": "14.1.0",
    "next-themes": "^0.3.0",
    "node-html-parser": "^6.1.13",
    "ollama-ai-provider": "^1.2.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^5.0.1",
    "react-markdown": "^8.0.7",
    "react-syntax-highlighter": "^15.5.0",
    "react-textarea-autosize": "^8.5.3",
    "redis": "^4.7.0",
    "rehype-external-links": "^3.0.0",
    "rehype-katex": "^6.0.0",
    "remark-gfm": "^3.0.1",
    "remark-math": "^5.1.1",
    "sonner": "^1.4.41",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@types/jsdom": "^21.1.7",
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "@types/react-syntax-highlighter": "^15.5.13",
    "eslint": "^8",
    "eslint-config-next": "^14.2.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: prettier.config.js
================
/** @type {import('prettier').Config} */
module.exports = {
  endOfLine: 'lf',
  semi: false,
  useTabs: false,
  singleQuote: true,
  arrowParens: 'avoid',
  tabWidth: 2,
  trailingComma: 'none',
  importOrder: [
    '^(react/(.*)$)|^(react$)',
    '^(next/(.*)$)|^(next$)',
    '<THIRD_PARTY_MODULES>',
    '',
    '^types$',
    '^@/types/(.*)$',
    '^@/config/(.*)$',
    '^@/lib/(.*)$',
    '^@/hooks/(.*)$',
    '^@/components/ui/(.*)$',
    '^@/components/(.*)$',
    '^@/registry/(.*)$',
    '^@/styles/(.*)$',
    '^@/app/(.*)$',
    '',
    '^[./]',
  ],
  importOrderSeparation: false,
  importOrderSortSpecifiers: true,
  importOrderBuiltinModulesToTop: true,
  importOrderParserPlugins: ['typescript', 'jsx', 'decorators-legacy'],
  importOrderMergeDuplicateImports: true,
  importOrderCombineTypeAndValueImports: true,
};

================
File: README.md
================
# Morphic

An AI-powered search engine with a generative UI.

![capture](/public/screenshot-2025-01-31.png)

## üóÇÔ∏è Overview

- üõ† [Features](#-features)
- üß± [Stack](#-stack)
- üöÄ [Quickstart](#-quickstart)
- üåê [Deploy](#-deploy)
- üîé [Search Engine](#-search-engine)
- ‚úÖ [Verified models](#-verified-models)
- ‚ö° [AI SDK Implementation](#-ai-sdk-implementation)
- üì¶ [Open Source vs Cloud Offering](#-open-source-vs-cloud-offering)
- üë• [Contributing](#-contributing)

## üõ† Features

### Core Features

- AI-powered search with GenerativeUI
- Natural language question understanding
- Multiple search providers support (Tavily, SearXNG, Exa)
- Model selection from UI (switch between available AI models)
  - Reasoning models with visible thought process

### Chat & History

- Chat history functionality (Optional)
- Share search results (Optional)
- Redis support (Local/Upstash)

### AI Providers

- OpenAI (Default)
- Google Generative AI
- Azure OpenAI
- Anthropic
- Ollama
- Groq
- DeepSeek
- Fireworks
- OpenAI Compatible

### Search Capabilities

- URL-specific search
- Video search support (Optional)
- SearXNG integration with:
  - Customizable search depth (basic/advanced)
  - Configurable engines
  - Adjustable results limit
  - Safe search options
  - Custom time range filtering

### Additional Features

- Docker deployment ready
- Browser search engine integration

## üß± Stack

### Core Framework

- [Next.js](https://nextjs.org/) - App Router, React Server Components
- [TypeScript](https://www.typescriptlang.org/) - Type safety
- [Vercel AI SDK](https://sdk.vercel.ai/docs) - Text streaming / Generative UI

### AI & Search

- [OpenAI](https://openai.com/) - Default AI provider (Optional: Google AI, Anthropic, Groq, Ollama, Azure OpenAI, DeepSeek, Fireworks)
- [Tavily AI](https://tavily.com/) - Default search provider
- Alternative providers:
  - [SearXNG](https://docs.searxng.org/) - Self-hosted search
  - [Exa](https://exa.ai/) - Neural search

### Data Storage

- [Upstash](https://upstash.com/) - Serverless Redis
- [Redis](https://redis.io/) - Local Redis option

### UI & Styling

- [Tailwind CSS](https://tailwindcss.com/) - Utility-first CSS framework
- [shadcn/ui](https://ui.shadcn.com/) - Re-usable components
- [Radix UI](https://www.radix-ui.com/) - Unstyled, accessible components
- [Lucide Icons](https://lucide.dev/) - Beautiful & consistent icons

## üöÄ Quickstart

### 1. Fork and Clone repo

Fork the repo to your Github account, then run the following command to clone the repo:

```bash
git clone git@github.com:[YOUR_GITHUB_ACCOUNT]/morphic.git
```

### 2. Install dependencies

```bash
cd morphic
bun install
```

### 3. Configure environment variables

```bash
cp .env.local.example .env.local
```

Fill in the required environment variables in `.env.local`:

```bash
# Required
OPENAI_API_KEY=     # Get from https://platform.openai.com/api-keys
TAVILY_API_KEY=     # Get from https://app.tavily.com/home
```

For optional features configuration (Redis, SearXNG, etc.), see [CONFIGURATION.md](./docs/CONFIGURATION.md)

### 4. Run app locally

#### Using Bun

```bash
bun dev
```

#### Using Docker

```bash
docker compose up -d
```

Visit http://localhost:3000 in your browser.

## üåê Deploy

Host your own live version of Morphic with Vercel or Cloudflare Pages.

### Vercel

[![Deploy with Vercel](https://vercel.com/button)](https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fmiurla%2Fmorphic&env=OPENAI_API_KEY,TAVILY_API_KEY,UPSTASH_REDIS_REST_URL,UPSTASH_REDIS_REST_TOKEN)

## üîé Search Engine

### Setting up the Search Engine in Your Browser

If you want to use Morphic as a search engine in your browser, follow these steps:

1. Open your browser settings.
2. Navigate to the search engine settings section.
3. Select "Manage search engines and site search".
4. Under "Site search", click on "Add".
5. Fill in the fields as follows:
   - **Search engine**: Morphic
   - **Shortcut**: morphic
   - **URL with %s in place of query**: `https://morphic.sh/search?q=%s`
6. Click "Add" to save the new search engine.
7. Find "Morphic" in the list of site search, click on the three dots next to it, and select "Make default".

This will allow you to use Morphic as your default search engine in the browser.

## ‚úÖ Verified models

### List of models applicable to all

- OpenAI
  - o3-mini
  - gpt-4o
  - gpt-4o-mini
  - gpt-4-turbo
  - gpt-3.5-turbo
- Google
  - Gemini 1.5 Pro (Unstable)
  - Gemini 2.0 Flash (Experimental)
- Anthropic
  - Claude 3.5 Sonnet
  - Claude 3.5 Hike
- Ollama
  - qwen2.5
  - deepseek-r1
- Groq
  - deepseek-r1-distill-llama-70b
- DeepSeek
  - DeepSeek V3
  - DeepSeek R1

## ‚ö° AI SDK Implementation

### Current Version: AI SDK UI

This version of Morphic uses the AI SDK UI implementation, which is recommended for production use. It provides better streaming performance and more reliable client-side UI updates.

### Previous Version: AI SDK RSC (v0.2.34 and earlier)

The React Server Components (RSC) implementation of AI SDK was used in versions up to [v0.2.34](https://github.com/miurla/morphic/releases/tag/v0.2.34) but is now considered experimental and not recommended for production. If you need to reference the RSC implementation, please check the v0.2.34 release tag.

> Note: v0.2.34 was the final version using RSC implementation before migrating to AI SDK UI.

For more information about choosing between AI SDK UI and RSC, see the [official documentation](https://sdk.vercel.ai/docs/getting-started/navigating-the-library#when-to-use-ai-sdk-rsc).

## üì¶ Open Source vs Cloud Offering

Morphic is open source software available under the Apache-2.0 license.

To maintain sustainable development and provide cloud-ready features, we offer a hosted version of Morphic alongside our open-source offering. The cloud solution makes Morphic accessible to non-technical users and provides additional features while keeping the core functionality open and available for developers.

For our cloud service, visit [morphic.sh](https://morphic.sh).

## üë• Contributing

We welcome contributions to Morphic! Whether it's bug reports, feature requests, or pull requests, all contributions are appreciated.

Please see our [Contributing Guide](CONTRIBUTING.md) for details on:

- How to submit issues
- How to submit pull requests
- Commit message conventions
- Development setup

================
File: searxng-limiter.toml
================
#https://docs.searxng.org/admin/searx.limiter.html

================
File: searxng-settings.yml
================
use_default_settings: true
server:
  # Is overwritten by ${SEARXNG_PORT} and ${SEARXNG_BIND_ADDRESS}
  port: 8888
  bind_address: '0.0.0.0'
  # public URL of the instance, to ensure correct inbound links. Is overwritten
  # by ${SEARXNG_URL}.
  base_url: false # "http://example.com/location"
  # rate limit the number of request on the instance, block some bots.
  # Is overwritten by ${SEARXNG_LIMITER}
  limiter: false
  # enable features designed only for public instances.
  # Is overwritten by ${SEARXNG_PUBLIC_INSTANCE}
  public_instance: false

  # If your instance owns a /etc/searxng/settings.yml file, then set the following
  # values there.

  secret_key: 'ursecretkey' # Is overwritten by ${SEARXNG_SECRET}
  # Proxy image results through SearXNG. Is overwritten by ${SEARXNG_IMAGE_PROXY}
  image_proxy: false
  # 1.0 and 1.1 are supported
  http_protocol_version: '1.0'
  # POST queries are more secure as they don't show up in history but may cause
  # problems when using Firefox containers
  method: 'POST'
  default_http_headers:
    X-Content-Type-Options: nosniff
    X-Download-Options: noopen
    X-Robots-Tag: noindex, nofollow
    Referrer-Policy: no-referrer

search:
  formats:
    - json

================
File: tailwind.config.ts
================
import type { Config } from 'tailwindcss'
const { fontFamily } = require('tailwindcss/defaultTheme')

const config = {
  darkMode: ['class'],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}'
  ],
  prefix: '',
  theme: {
    container: {
      center: true,
      padding: '2rem',
      screens: {
        '2xl': '1400px'
      }
    },
    extend: {
      colors: {
        border: 'hsl(var(--border))',
        input: 'hsl(var(--input))',
        ring: 'hsl(var(--ring))',
        background: 'hsl(var(--background))',
        foreground: 'hsl(var(--foreground))',
        primary: {
          DEFAULT: 'hsl(var(--primary))',
          foreground: 'hsl(var(--primary-foreground))'
        },
        secondary: {
          DEFAULT: 'hsl(var(--secondary))',
          foreground: 'hsl(var(--secondary-foreground))'
        },
        destructive: {
          DEFAULT: 'hsl(var(--destructive))',
          foreground: 'hsl(var(--destructive-foreground))'
        },
        muted: {
          DEFAULT: 'hsl(var(--muted))',
          foreground: 'hsl(var(--muted-foreground))'
        },
        accent: {
          DEFAULT: 'hsl(var(--accent))',
          foreground: 'hsl(var(--accent-foreground))',
          blue: {
            DEFAULT: 'hsl(var(--accent-blue))',
            foreground: 'hsl(var(--accent-blue-foreground))',
            border: 'hsl(var(--accent-blue-border))'
          }
        },
        popover: {
          DEFAULT: 'hsl(var(--popover))',
          foreground: 'hsl(var(--popover-foreground))'
        },
        card: {
          DEFAULT: 'hsl(var(--card))',
          foreground: 'hsl(var(--card-foreground))'
        },
        chart: {
          '1': 'hsl(var(--chart-1))',
          '2': 'hsl(var(--chart-2))',
          '3': 'hsl(var(--chart-3))',
          '4': 'hsl(var(--chart-4))',
          '5': 'hsl(var(--chart-5))'
        }
      },
      borderRadius: {
        lg: 'var(--radius)',
        md: 'calc(var(--radius) - 2px)',
        sm: 'calc(var(--radius) - 4px)'
      },
      keyframes: {
        'accordion-down': {
          from: {
            height: '0'
          },
          to: {
            height: 'var(--radix-accordion-content-height)'
          }
        },
        'accordion-up': {
          from: {
            height: 'var(--radix-accordion-content-height)'
          },
          to: {
            height: '0'
          }
        }
      },
      animation: {
        'accordion-down': 'accordion-down 0.2s ease-out',
        'accordion-up': 'accordion-up 0.2s ease-out'
      },
      fontFamily: {
        sans: ['var(--font-sans)', ...fontFamily.sans]
      }
    }
  },
  plugins: [require('tailwindcss-animate'), require('@tailwindcss/typography')]
} satisfies Config

export default config

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": [
        "./*"
      ]
    },
    "target": "ES2017"
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}
